<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS7下FTP安装与配置</title>
    <url>/2020/03/11/CentOS7%E4%B8%8BFTP%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="FTP安装与配置（虚拟用户）"><a href="#FTP安装与配置（虚拟用户）" class="headerlink" title="FTP安装与配置（虚拟用户）"></a>FTP安装与配置（虚拟用户）</h1><p>FTP安装与配置：<a href="https://www.inqingdao.cn/598.html" target="_blank" rel="noopener">https://www.inqingdao.cn/598.html</a></p>
<p>FTP解决权限不足：<a href="https://blog.csdn.net/haoxizh/article/details/41546601" target="_blank" rel="noopener">https://blog.csdn.net/haoxizh/article/details/41546601</a></p>
<p>FTP命令操作：<a href="https://blog.csdn.net/u012842630/article/details/100864483" target="_blank" rel="noopener">https://blog.csdn.net/u012842630/article/details/100864483</a></p>
<h1 id="FTP安装与配置【推荐】"><a href="#FTP安装与配置【推荐】" class="headerlink" title="FTP安装与配置【推荐】"></a>FTP安装与配置【推荐】</h1><h2 id="一、安装-vsftpd"><a href="#一、安装-vsftpd" class="headerlink" title="一、安装 vsftpd"></a>一、安装 vsftpd</h2><ol>
<li><p>切换root用户</p>
</li>
<li><p>查看是否安装vsftp</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa |grep vsftpd</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果没有安装，那么安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install vsftpd -y</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动vsftpd服务，以及重启命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd.service		# 启动vsftpd服务</span><br><span class="line">systemctl restart vsftpd.service	# 重启命令</span><br><span class="line">systemctl enable vsftpd.service		# 设置开启自启</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>确认服务是否启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antup | grep ftp</span><br></pre></td></tr></table></figure></div>

<p>如没有安装netstat，先进行安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure></div>

<p>结果如下，则FTP服务启动成功：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# netstat -antup | grep ftp</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      1777&#x2F;vsftpd</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="二、配置-vsftpd"><a href="#二、配置-vsftpd" class="headerlink" title="二、配置 vsftpd"></a>二、配置 vsftpd</h2><ol>
<li><p>修改配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure></div>

<p>修改以下配置参数，设置匿名用户和本地用户的登录权限，设置指定例外用户列表文件的路径，并开启监听 IPv4 sockets。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">anonymous_enable&#x3D;NO							# 是否允许匿名ftp,如否则选择NO   </span><br><span class="line">local_enable&#x3D;YES							# 是否允许本地用户登录</span><br><span class="line">chroot_local_user&#x3D;YES						# 本地用户禁锢在宿主目录中 </span><br><span class="line">chroot_list_enable&#x3D;YES						# 是否将系统用户限止在自己的home目录下   </span><br><span class="line">chroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list	# 列出的是不chroot的用户的列表 </span><br><span class="line">listen&#x3D;YES</span><br></pre></td></tr></table></figure></div>

<p>注释 <code>listen_ipv6=YES</code> 配置参数，关闭监听 IPv6 sockets。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#listen_ipv6&#x3D;YES</span><br></pre></td></tr></table></figure></div>

<p>添加以下配置参数，开启被动模式，设置本地用户登录后所在目录，以及云服务器建立数据传输可使用的端口范围值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allow_writeable_chroot&#x3D;YES</span><br><span class="line">pasv_enable&#x3D;YES</span><br><span class="line">#pasv_address&#x3D;xxx.xx.xxx.xx #如果是云服务器，请开放注释并修改为您的 Linux 云服务器公网 IP</span><br><span class="line">pasv_min_port&#x3D;40000</span><br><span class="line">pasv_max_port&#x3D;45000</span><br><span class="line"></span><br><span class="line"># 设置本地用户登录后所在的目录。默认配置文件中没有设置该项，此时用户登录FTP服务器后，所在的目录为该用户的主目录，对于root用户，则为&#x2F;root目录。</span><br><span class="line">local_root&#x3D;&#x2F;var&#x2F;ftp   </span><br><span class="line"># 设置匿名用户登录后所在的目录。若未指定，则默认为&#x2F;var&#x2F;ftp目录。</span><br><span class="line">anon_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;pub</span><br></pre></td></tr></table></figure></div>

<p><strong>可选配置</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有用户禁止下载</span><br><span class="line">download_enable&#x3D;NO</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建并编辑 <code>chroot_list</code> 文件</p>
<p>如果希望某个用户可以访问根目录，不受限于自己的目录，把用户名加入.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;vsftpd&#x2F;chroot_list</span><br></pre></td></tr></table></figure></div>

<p>输入 <strong>:wq</strong> 退出文件</p>
</li>
<li><p>重启FTP服务器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、创建用户"><a href="#三、创建用户" class="headerlink" title="三、创建用户"></a>三、创建用户</h2><ol>
<li><p>创建一个组，用于存放ftp用户</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd ftpgroups</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在 /home 目录下创建一个ftp目录专门存放ftp用户</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;home&#x2F;ftp</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建ftp用户，并加入ftpgroups组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -d &#x2F;home&#x2F;ftp&#x2F;ftpuser1 -g ftpgroups ftpuser1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置密码（这里作为测试就取：111）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd ftpuser1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置不允许用于用户登录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -s &#x2F;sbin&#x2F;nologin ftpuser1</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="四、防火墙设置"><a href="#四、防火墙设置" class="headerlink" title="四、防火墙设置"></a>四、防火墙设置</h2><p>如果是再云服务器上搭建的话，防火墙默认没开，所以只要配置安全组，开放21端口，和40000-45000端口即可。</p>
<ol>
<li><p>方式一：部分端口开放</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-service&#x3D;ftp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;21&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;40000-45000&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>方式二：关闭防火墙</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="五、修改Selinux"><a href="#五、修改Selinux" class="headerlink" title="五、修改Selinux"></a>五、修改Selinux</h2><p>如果是云服务器，这个默认没有开启。因此不用设置。直接跳过。</p>
<p><strong>【1、2部先跳过，后面再次搭建的时候好像不用配置，最后还是不行的时候再来执行】</strong></p>
<ol>
<li><p>修改Selinux文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure></div>

<p>修改：SELINUX=disabled</p>
</li>
<li><p>重启服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果上面配置后，还是不能登录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getsebool -a | grep ftp</span><br></pre></td></tr></table></figure></div>

<p>结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftpd_anon_write --&gt; off</span><br><span class="line">ftpd_connect_all_unreserved --&gt; off</span><br><span class="line">ftpd_connect_db --&gt; off</span><br><span class="line">ftpd_full_access --&gt; off			# 开启</span><br><span class="line">ftpd_use_cifs --&gt; off</span><br><span class="line">ftpd_use_fusefs --&gt; off</span><br><span class="line">ftpd_use_nfs --&gt; off</span><br><span class="line">ftpd_use_passive_mode --&gt; off</span><br><span class="line">httpd_can_connect_ftp --&gt; off</span><br><span class="line">httpd_enable_ftp_server --&gt; off</span><br><span class="line">tftp_anon_write --&gt; off</span><br><span class="line">tftp_home_dir --&gt; off				# 开启</span><br></pre></td></tr></table></figure></div>

<p>开启上面2个：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setsebool tftp_home_dir 1</span><br><span class="line">setsebool ftpd_full_access 1</span><br><span class="line"># 查看是否开启成功</span><br><span class="line">getsebool -a | grep ftp</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="六、登录"><a href="#六、登录" class="headerlink" title="六、登录"></a>六、登录</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\XXX&gt;ftp 192.168.174.50</span><br><span class="line">连接到 192.168.174.50。</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">200 Always in UTF8 mode.</span><br><span class="line">用户(192.168.174.50:(none)): ftpuser1</span><br><span class="line">331 Please specify the password.</span><br><span class="line">密码:</span><br><span class="line">230 Login successful.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>如果这里显示 530 Login incorrect.</strong></p>
<p>注释 <strong>/etc/pam.d/vsftpd</strong> 文件里的这一行, 在前面加 # 号: </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#auth       required    pam_shells.so</span><br></pre></td></tr></table></figure></div>

<p>然后重启</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></div>



<h2 id="七、有效用户配置"><a href="#七、有效用户配置" class="headerlink" title="七、有效用户配置"></a>七、有效用户配置</h2><p><strong>如果上面的配置还不能进行登录的话，可以进行如下操作</strong>（可以就跳过）：</p>
<p>ftp会根据/etc/shells这个文件来判断一个用户是否是有效用户，会阻止那些shell不在/etc/shells里的用户登陆.</p>
<p>所以如果ftp用户的登录shell为/sbin/nologin  则</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;shells</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;sh</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;bash</span><br><span class="line">&#x2F;sbin&#x2F;nologin	# 新增</span><br></pre></td></tr></table></figure></div>



<h2 id="八、其他操作"><a href="#八、其他操作" class="headerlink" title="八、其他操作"></a>八、其他操作</h2><h3 id="8-1-不受限目录用户设置"><a href="#8-1-不受限目录用户设置" class="headerlink" title="8.1 不受限目录用户设置"></a>8.1 不受限目录用户设置</h3><ol>
<li><p>按第三节再创建一个用户 <strong>ftpuser2</strong></p>
</li>
<li><p>添加不受限用户</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vsftpd&#x2F;chroot_list</span><br></pre></td></tr></table></figure></div>

<p>添加用户名，一行一个名字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftpuser2</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>验证是否成功</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\BoWenWang&gt;ftp 192.168.174.50</span><br><span class="line">连接到 192.168.174.50。</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">200 Always in UTF8 mode.</span><br><span class="line">用户(192.168.174.50:(none)): ftpuser2</span><br><span class="line">331 Please specify the password.</span><br><span class="line">密码:</span><br><span class="line">230 Login successful.</span><br><span class="line">ftp&gt;</span><br><span class="line">ftp&gt; cd &#x2F;</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp: 收到 107 字节，用时 0.03秒 3.82千字节&#x2F;秒。</span><br><span class="line">ftp&gt; put D:\tmp\1.txt</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">553 Could not create file.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，虽然说可以访问到根目录，但是没有权限的话，还是不能进行操作！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp&gt; cd ~</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; put D:\tmp\1.txt</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt;</span><br><span class="line">ftp&gt; get 1.txt D:\tmp\ttttttt.txt</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Opening BINARY mode data connection for 1.txt (0 bytes).</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ftpuser2]# ll</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--. 1 ftpuser2 ftpgroups 0 Mar 12 11:06 1.txt</span><br></pre></td></tr></table></figure></div>

<p>可以在自己的目录下上传，下载文件。</p>
</li>
</ol>
<h3 id="8-2-设置匿名登录访问公共目录"><a href="#8-2-设置匿名登录访问公共目录" class="headerlink" title="8.2 设置匿名登录访问公共目录"></a>8.2 设置匿名登录访问公共目录</h3><p>在拥有用户名登录的同时，也有公共的匿名登录，进行文件共享，那么可以进行如下设置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure></div>

<p>修改如下地方：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">anonymous_enable&#x3D;YES</span><br><span class="line"></span><br><span class="line"># 设置匿名用户登录后所在的目录。若未指定，则默认为&#x2F;var&#x2F;ftp目录。(该属性需要自己添加)</span><br><span class="line">anon_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;pub</span><br></pre></td></tr></table></figure></div>

<p>重启FTP服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></div>

<p>通过WEB或者文件资源管理器，查看：</p>
<p>在地址栏输入（你自己的服务器IP） <strong><a href="ftp://192.168.174.50/" target="_blank" rel="noopener">ftp://192.168.174.50/</a></strong></p>
<p><a href="/postImages/FTP.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/FTP.png" class="lazyload"></a></p>
<p><a href="/postImages/FTP2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/FTP2.png" class="lazyload"></a></p>
<p>匿名用户试图修改文件：</p>
<p><a href="/postImages/FTP3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/FTP3.png" class="lazyload"></a></p>
<h3 id="8-3-添加用户允许在公共目录上传文件"><a href="#8-3-添加用户允许在公共目录上传文件" class="headerlink" title="8.3 添加用户允许在公共目录上传文件"></a>8.3 添加用户允许在公共目录上传文件</h3><ol>
<li><p>再添加一个用户 <strong>ftpuser3</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd -d &#x2F;var&#x2F;ftp&#x2F;pub -g ftpgroups ftpuser3</span><br><span class="line">passwd ftpuser3</span><br><span class="line">usermod -s &#x2F;sbin&#x2F;nologin ftpuser3</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果是将已有用户的主目录改为公共目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -d &#x2F;var&#x2F;ftp&#x2F;pub ftpwbw</span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>更改公共目录所有者（或者添加一个管理组也可以，原理一样就是权限更改）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ftp]# chown -R ftpuser3 pub</span><br><span class="line">[root@localhost ftp]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 2 ftpuser3 root 21 Mar 12 11:20 pub</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试效果</p>
<p>查看文件列表，确定该用户家目录为公共目录。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\BoWenWang&gt;ftp 192.168.174.50</span><br><span class="line">连接到 192.168.174.50。</span><br><span class="line">220 (vsFTPd 3.0.2)</span><br><span class="line">200 Always in UTF8 mode.</span><br><span class="line">用户(192.168.174.50:(none)): ftpuser3</span><br><span class="line">331 Please specify the password.</span><br><span class="line">密码:</span><br><span class="line">230 Login successful.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">pub.txt</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp: 收到 12 字节，用时 0.00秒 12.00千字节&#x2F;秒。</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">pub.txt</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp: 收到 12 字节，用时 0.00秒 12.00千字节&#x2F;秒。</span><br></pre></td></tr></table></figure></div>

<p>创建文件夹、上传一个文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp&gt; mkdir admin</span><br><span class="line">257 &quot;&#x2F;admin&quot; created</span><br><span class="line">ftp&gt; cd admin</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; put D:\tmp\1.txt</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Ok to send data.</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure></div>

<p>通过WEB查看</p>
<p><a href="/postImages/FTP4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/FTP4.png" class="lazyload"></a></p>
<p>通过文件资源管理器，发现匿名用户依旧无法修改文件。</p>
<p>接着用ftpuser3进行操作，重命名成功：</p>
<p><a href="/postImages/FTP5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/FTP5.png" class="lazyload"></a></p>
</li>
</ol>
<p><a href="/postImages/FTP6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/FTP6.png" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7之GRUB相关操作</title>
    <url>/2020/04/16/CentOS7%E4%B9%8BGRUB%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="CentOS7之GRUB相关操作"><a href="#CentOS7之GRUB相关操作" class="headerlink" title="CentOS7之GRUB相关操作"></a>CentOS7之GRUB相关操作</h1><p>操作环境为WMware15，CentOS7。</p>
<p><strong>参考文章</strong>：</p>
<p><a href="https://blog.csdn.net/qq_41671415/article/details/101783414" target="_blank" rel="noopener">https://blog.csdn.net/qq_41671415/article/details/101783414</a></p>
<p><a href="http://www.mamicode.com/info-detail-1754660.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-1754660.html</a></p>
<p><a href="https://blog.51cto.com/14473285/2432770" target="_blank" rel="noopener">https://blog.51cto.com/14473285/2432770</a></p>
<h2 id="一、设置GRUB密码"><a href="#一、设置GRUB密码" class="headerlink" title="一、设置GRUB密码"></a>一、设置GRUB密码</h2><ol>
<li><p>ROOT权限，设置GRUB密码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo grub2-setpasswo</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/GRUB1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB1.png" class="lazyload"></a></p>
</li>
<li><p>设置完成后，会生成 <strong>/boot/grub2/user.cfg</strong> 文件。</p>
<p><a href="/postImages/GRUB2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB2.png" class="lazyload"></a></p>
</li>
<li><p>重启</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo reboot</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在等待界面，按 <strong>e</strong> 进入GRUB。</p>
<p><a href="/postImages/GRUB3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB3.png" class="lazyload"></a></p>
<p>要求输入密码，账户名为root，密码是刚才设置的。</p>
<p><a href="/postImages/GRUB4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB4.png" class="lazyload"></a></p>
<p>输入正确后进入，GRUB界面。</p>
<p><a href="/postImages/GRUB5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB5.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="二、进入单用户模式"><a href="#二、进入单用户模式" class="headerlink" title="二、进入单用户模式"></a>二、进入单用户模式</h2><ol>
<li><p>在GRUB编辑界面中，修改以下地方:</p>
<ul>
<li>把 <strong>ro</strong> 可读改成 <strong>rw</strong> 可读写</li>
<li>删除 <strong>rhgb quiet</strong></li>
<li>添加 <strong>init=/bin/sh</strong> </li>
</ul>
<p><a href="/postImages/GRUB6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB6.png" class="lazyload"></a></p>
</li>
<li><p>按Ctrl+X，启动系统</p>
<p><a href="/postImages/GRUB7.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB7.png" class="lazyload"></a></p>
</li>
<li><p>然后可以进行相关操作，这里举一个修改用户密码的例子</p>
<p><a href="/postImages/GRUB8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB8.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="三、忘记GRUB密码"><a href="#三、忘记GRUB密码" class="headerlink" title="三、忘记GRUB密码"></a>三、忘记GRUB密码</h2><p>如果设置 了GRUB密码，但是忘记了，那么我们可以利用光盘来恢复清除GRUB密码。</p>
<ol>
<li><p>载入光驱</p>
<p><a href="/postImages/GRUB9.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB9.png" class="lazyload"></a></p>
</li>
<li><p>启动虚拟机，在初始界面按F2进入BOOT设置</p>
<p><a href="/postImages/GRUB10.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB10.png" class="lazyload"></a></p>
<p>设置光盘为第一启动项</p>
<p><a href="/postImages/GRUB11.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB11.png" class="lazyload"></a></p>
<p><a href="/postImages/GRUB12.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB12.png" class="lazyload"></a></p>
<p><a href="/postImages/GRUB13.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB13.png" class="lazyload"></a></p>
</li>
<li><p>重新进入系统，选择急救模式</p>
<p><a href="/postImages/GRUB14.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB14.png" class="lazyload"></a></p>
<p>进入命令模式</p>
<p><a href="/postImages/GRUB15.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB15.png" class="lazyload"></a></p>
<p>接着进入bash模式，删除刚才创建的密码文件</p>
<p><a href="/postImages/GRUB16.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB16.png" class="lazyload"></a></p>
</li>
<li><p>重启虚拟机</p>
<p><a href="/postImages/GRUB17.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB17.png" class="lazyload"></a></p>
<p>这里可能会直接再次进入刚才那个急救模式的界面，可以在电源处关闭再重启</p>
<p><a href="/postImages/GRUB18.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB18.png" class="lazyload"></a></p>
</li>
<li><p>恢复第一启动项（不然每次都以光盘启动），F10保存，重启</p>
<p><a href="/postImages/GRUB19.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB19.png" class="lazyload"></a></p>
</li>
<li><p>再等待界面，直接按 <strong>e</strong> 进入，发现不用密码，就能直接进入。</p>
<p><a href="/postImages/GRUB20.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB20.png" class="lazyload"></a></p>
<p><a href="/postImages/GRUB21.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB21.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="四、GRUB损坏修复"><a href="#四、GRUB损坏修复" class="headerlink" title="四、GRUB损坏修复"></a>四、GRUB损坏修复</h2><p>有时候GRUB文件损坏会导致无法进入系统。这时候我们还是利用上面的光盘驱动来进行恢复。</p>
<ol>
<li><p>模拟GRUB损坏</p>
<p>执行命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;dev&#x2F;sda bs&#x3D;446 count&#x3D;1</span><br><span class="line">$reboot	# 重启</span><br></pre></td></tr></table></figure></div>

<p>从空设备文件zero中读取446字节的数据，将其覆盖到第一块硬盘（sda），从而破坏MBR扇区中的数据“模拟GRUB（stage1）的坏损的情况.</p>
</li>
</ol>
<p>   <a href="/postImages/GRUB22.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB22.png" class="lazyload"></a></p>
<ol start="2">
<li><p>重启后，发现系统进不去了，因为文件损坏了</p>
<p><a href="/postImages/GRUB23.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB23.png" class="lazyload"></a></p>
</li>
<li><p>按照之前的做法，进入急救模式=&gt;命令模式=&gt;挂载系统镜像，进入bash模式（忘记的可以翻到上面看）</p>
</li>
<li><p>查看原磁盘设备名</p>
<p>我们先找到原来系统的磁盘（这里由于我看不到上面的信息加了 | more）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#fdisk -l</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/GRUB24.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB24.png" class="lazyload"></a></p>
<p><a href="/postImages/GRUB25.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB25.png" class="lazyload"></a></p>
</li>
<li><p>重构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#grub2-install &#x2F;dev&#x2F;sda</span><br><span class="line">#grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</span><br><span class="line">#exit</span><br><span class="line">#reboot</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/GRUB26.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB26.png" class="lazyload"></a></p>
</li>
<li><p>重启虚拟机（恢复正常，可以进入系统）</p>
<p><a href="/postImages/GRUB27.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/GRUB27.png" class="lazyload"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7搭建Samba</title>
    <url>/2020/04/23/CentOS7%E6%90%AD%E5%BB%BASamba/</url>
    <content><![CDATA[<h1 id="CentOS7搭建Samba"><a href="#CentOS7搭建Samba" class="headerlink" title="CentOS7搭建Samba"></a>CentOS7搭建Samba</h1><p>【转】<a href="https://blog.csdn.net/wc1695040842/article/details/91866500" target="_blank" rel="noopener">https://blog.csdn.net/wc1695040842/article/details/91866500</a></p>
<p>【转】<a href="https://www.cnblogs.com/pwswaitfor/p/10967821.html" target="_blank" rel="noopener">https://www.cnblogs.com/pwswaitfor/p/10967821.html</a></p>
<p>关于Linux和Windows系统之间的文件传输，很多人选择使用FTP，相对较安全，但是有时还是会出现一些问题，比如上传文件时，文件名莫名出现乱码，文件大小改变等问题。相比较来说，使用Samba作为文件共享，就省事简洁多了。Samba服务器通信协议（Server Messages Block）就是是为了解决局域网内的文件或打印机等资源的共享服务问题，让多个主机之间共享文件变成越来越简单。</p>
<h2 id="一、安装Samba"><a href="#一、安装Samba" class="headerlink" title="一、安装Samba"></a>一、安装Samba</h2><p><strong>查看是已安装samba包</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#rpm -qa|grep samba</span><br><span class="line">samba-client-libs-4.9.1-10.el7_7.x86_64</span><br><span class="line">samba-common-4.9.1-10.el7_7.noarch</span><br><span class="line">samba-common-libs-4.9.1-10.el7_7.x86_64</span><br><span class="line">samba-client-4.9.1-10.el7_7.x86_64</span><br></pre></td></tr></table></figure></div>

<p><strong>安装Samba服务</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install -y samba</span><br></pre></td></tr></table></figure></div>



<h2 id="二、关闭selinux和防火墙"><a href="#二、关闭selinux和防火墙" class="headerlink" title="二、关闭selinux和防火墙"></a>二、关闭selinux和防火墙</h2><p><strong>关闭selinux</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vi &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure></div>

<p><strong>关闭防火墙</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#systemctl stop firewalld</span><br><span class="line">#systemctl disable firewalld</span><br></pre></td></tr></table></figure></div>



<h2 id="三、创建共享目录"><a href="#三、创建共享目录" class="headerlink" title="三、创建共享目录"></a>三、创建共享目录</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mkdir &#x2F;home&#x2F;share</span><br><span class="line">#chmod 777 &#x2F;home&#x2F;share</span><br></pre></td></tr></table></figure></div>



<h2 id="四、创建用户"><a href="#四、创建用户" class="headerlink" title="四、创建用户"></a>四、创建用户</h2><p><strong>创建一个用户</strong>（设置为不予许登入系统）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#useradd -d &#x2F;home&#x2F;sambauser -s &#x2F;sbin&#x2F;nologin sambauser</span><br><span class="line">#passwd sambauser</span><br></pre></td></tr></table></figure></div>



<h2 id="五、修改Samba配置文件"><a href="#五、修改Samba配置文件" class="headerlink" title="五、修改Samba配置文件"></a>五、修改Samba配置文件</h2><p><strong>备份配置文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#cp &#x2F;etc&#x2F;samba&#x2F;smb.conf &#x2F;etc&#x2F;samba&#x2F;smb.conf.bak</span><br></pre></td></tr></table></figure></div>

<p><strong>修改配置文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vi &#x2F;etc&#x2F;samba&#x2F;smb.conf</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># See smb.conf.example for a more detailed config file or</span><br><span class="line"># read the smb.conf manpage.</span><br><span class="line"># Run &#39;testparm&#39; to verify the config is correct after</span><br><span class="line"># you modified it.</span><br><span class="line"></span><br><span class="line"># 全局配置</span><br><span class="line">[global]</span><br><span class="line">        workgroup &#x3D; SAMBA</span><br><span class="line">        security &#x3D; user</span><br><span class="line"></span><br><span class="line">        passdb backend &#x3D; tdbsam</span><br><span class="line"></span><br><span class="line">        printing &#x3D; cups</span><br><span class="line">        printcap name &#x3D; cups</span><br><span class="line">        load printers &#x3D; yes</span><br><span class="line">        cups options &#x3D; raw</span><br><span class="line"></span><br><span class="line">[homes]</span><br><span class="line">        comment &#x3D; Home Directories</span><br><span class="line">        valid users &#x3D; %S, %D%w%S</span><br><span class="line">        browseable &#x3D; No</span><br><span class="line">        read only &#x3D; No</span><br><span class="line">        inherit acls &#x3D; Yes</span><br><span class="line"></span><br><span class="line"># 共享打印机配置</span><br><span class="line">[printers]</span><br><span class="line">        comment &#x3D; All Printers</span><br><span class="line">        path &#x3D; &#x2F;var&#x2F;tmp</span><br><span class="line">        printable &#x3D; Yes</span><br><span class="line">        create mask &#x3D; 0600</span><br><span class="line">        browseable &#x3D; No</span><br><span class="line"></span><br><span class="line">[print$]</span><br><span class="line">        comment &#x3D; Printer Drivers</span><br><span class="line">        path &#x3D; &#x2F;var&#x2F;lib&#x2F;samba&#x2F;drivers</span><br><span class="line">        write list &#x3D; @printadmin root</span><br><span class="line">        force group &#x3D; @printadmin</span><br><span class="line">        create mask &#x3D; 0664</span><br><span class="line">        directory mask &#x3D; 0775</span><br></pre></td></tr></table></figure></div>

<p><strong>末尾追加内容</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这个是共享文件夹标识，表示登录samba打开时显示的文件夹名称。配置了多少个共享文件夹标识，登录samba时就会显示多少文件夹。</span><br><span class="line">[share]</span><br><span class="line">        #对该共享资源的说明</span><br><span class="line">        comment &#x3D; my share</span><br><span class="line">        #共享资源的路径</span><br><span class="line">        path &#x3D; &#x2F;home&#x2F;share</span><br><span class="line">        #设置允许访问共享的用户或组的列表</span><br><span class="line">        valid user &#x3D; sambauser</span><br><span class="line">        #指定共享的路径是否可写</span><br><span class="line">        writable &#x3D; yes</span><br><span class="line">        #是否可以浏览共享目录</span><br><span class="line">        browseable &#x3D; yes</span><br><span class="line">        #指定客户机在共享目录中创建文件的默认权限</span><br><span class="line">        create mode &#x3D; 0777</span><br><span class="line">        #指定客户机共享目录中创建文件目录的默认权限</span><br><span class="line">        directory mode &#x3D; 0777</span><br></pre></td></tr></table></figure></div>

<p>【配置文件参数解析】<a href="https://blog.51cto.com/yuanbin/115761" target="_blank" rel="noopener">https://blog.51cto.com/yuanbin/115761</a></p>
<h2 id="六、pdbedit-命令说明"><a href="#六、pdbedit-命令说明" class="headerlink" title="六、pdbedit 命令说明"></a>六、pdbedit 命令说明</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pdbedit 命令用于管理Samba服务的帐户信息数据库，格式为：&quot;pdbedit [选项] 帐户&quot;</span><br><span class="line">第一次把用户信息写入到数据库时需要使用-a参数，以后修改用户密码、删除用户等等操作就不再需要了。</span><br><span class="line"> </span><br><span class="line">pdbedit -L ：查看samba用户</span><br><span class="line">pdbedit -a -u user：添加samba用户</span><br><span class="line">pdbedit -r -u user：修改samba用户信息</span><br><span class="line">pdbedit -x -u user：删除samba用户</span><br><span class="line"> </span><br><span class="line">samba服务数据库的密码也可以用 smbpasswd 命令 操作</span><br><span class="line">smbpasswd -a user：添加一个samba用户</span><br><span class="line">smbpasswd -d user：禁用一个samba用户</span><br><span class="line">smbpasswd -e user：恢复一个samba用户</span><br><span class="line">smbpasswd -x user：删除一个samba用户</span><br></pre></td></tr></table></figure></div>



<h2 id="七、添加用户为samba用户"><a href="#七、添加用户为samba用户" class="headerlink" title="七、添加用户为samba用户"></a>七、添加用户为samba用户</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pdbedit -a -u sambauser</span><br><span class="line">new password:</span><br><span class="line">retype new password:</span><br></pre></td></tr></table></figure></div>



<h2 id="八、启动Samba服务"><a href="#八、启动Samba服务" class="headerlink" title="八、启动Samba服务"></a>八、启动Samba服务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动</span><br><span class="line">#systemctl start smb</span><br><span class="line"># 查看状态</span><br><span class="line">#systemctl status smb</span><br><span class="line"># 重启</span><br><span class="line">#systemctl restart smb</span><br></pre></td></tr></table></figure></div>



<h2 id="九、测试"><a href="#九、测试" class="headerlink" title="九、测试"></a>九、测试</h2><p><strong>现在共享目录中加一些文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 &#x2F;home&#x2F;share]#touch share1.txt</span><br><span class="line">[root@centos7 &#x2F;home&#x2F;share]#touch share2.txt</span><br><span class="line">[root@centos7 &#x2F;home&#x2F;share]#mkdir dir</span><br><span class="line">[root@centos7 &#x2F;home&#x2F;share]#touch dir&#x2F;share3.txt</span><br><span class="line">[root@centos7 &#x2F;home&#x2F;share]#ls</span><br><span class="line">dir  share1.txt  share2.txt</span><br></pre></td></tr></table></figure></div>

<h3 id="9-1-将samba共享目录挂载到windows上"><a href="#9-1-将samba共享目录挂载到windows上" class="headerlink" title="9.1 将samba共享目录挂载到windows上"></a>9.1 将samba共享目录挂载到windows上</h3><ol>
<li><p>”Win+E键”打开，右键“此电脑”选择“映射网络驱动器”</p>
<p><a href="/postImages/samba1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/samba1.png" class="lazyload"></a></p>
</li>
<li><p>输入samba的地址，点击“完成”</p>
<p><a href="/postImages/samba2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/samba2.png" class="lazyload"></a></p>
</li>
<li><p>输入密码</p>
<p><a href="/postImages/samba3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/samba3.png" class="lazyload"></a></p>
</li>
<li><p>成功访问</p>
<p><a href="/postImages/samba4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/samba4.png" class="lazyload"></a></p>
</li>
<li><p>在Windows上添加一些文件</p>
<p><a href="/postImages/samba5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/samba5.png" class="lazyload"></a></p>
</li>
<li><p>返回Linux查看</p>
<p><a href="/postImages/samba6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/samba6.png" class="lazyload"></a></p>
</li>
</ol>
<h3 id="9-2-将samba共享目录挂载到Linux上"><a href="#9-2-将samba共享目录挂载到Linux上" class="headerlink" title="9.2 将samba共享目录挂载到Linux上"></a>9.2 将samba共享目录挂载到Linux上</h3><p>打开另一台虚拟机（192.168.174.101）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建挂载目录</span><br><span class="line">[root@localhost &#x2F;]# mkdir &#x2F;shareDir</span><br><span class="line"></span><br><span class="line"># 挂载</span><br><span class="line">[root@localhost &#x2F;]# mount -t cifs &#x2F;&#x2F;192.168.174.100&#x2F;share -o username&#x3D;sambauser,password&#x3D;111 &#x2F;shareDir</span><br><span class="line"></span><br><span class="line"># 查看磁盘信息（最后一行显示）</span><br><span class="line">[root@localhost &#x2F;]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 898M     0  898M   0% &#x2F;dev</span><br><span class="line">tmpfs                    910M     0  910M   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs                    910M  9.5M  901M   2% &#x2F;run</span><br><span class="line">tmpfs                    910M     0  910M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;centos-root   17G  8.3G  8.8G  49% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda1               1014M  150M  865M  15% &#x2F;boot</span><br><span class="line">tmpfs                    182M     0  182M   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line">&#x2F;&#x2F;192.168.174.100&#x2F;share   25G  4.3G   21G  18% &#x2F;shareDir</span><br><span class="line"></span><br><span class="line"># 查看文件</span><br><span class="line">[root@localhost &#x2F;]# ll &#x2F;shareDir&#x2F;</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root 0 Apr 23 13:37 dir</span><br><span class="line">-rwxr-xr-x 1 root root 0 Apr 23 13:36 share1.txt</span><br><span class="line">-rwxr-xr-x 1 root root 0 Apr 23 13:36 share2.txt</span><br><span class="line">-rwxr-xr-x 1 root root 0 Apr 23 13:44 来自Win10的文件.txt</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Flume学习笔记</title>
    <url>/2020/04/13/Flume%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Flume学习笔记"><a href="#Flume学习笔记" class="headerlink" title="Flume学习笔记"></a>Flume学习笔记</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li><p>收集、移动、聚合大量日志数据的服务。</p>
</li>
<li><p>基于流数据的架构，用于在线日志分析</p>
</li>
<li><p>基于事件。</p>
</li>
<li><p>在生产和消费者之间启动协调作用。</p>
</li>
<li><p>提供了事务保证，确保消息一定被分发。</p>
</li>
</ul>
<p><a href="/postImages/Flume.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/Flume.png" class="lazyload"></a></p>
<p>Source：接受数据，类型有多种。</p>
<p>Channel：临时存放地，对Source中来的数据进行缓冲，直到sink消费掉。</p>
<p>Sink：从channel提取数据存放到中央化存储(hadoop / hbase)。</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><ol>
<li><p>下载 <strong>apache-flume-1.9.0-bin.tar.gz</strong></p>
</li>
<li><p>安装到自定义目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf apache-flume-1.9.0-bin.tar.gz -C &#x2F;soft&#x2F;</span><br><span class="line">$cd &#x2F;soft&#x2F;</span><br><span class="line">$ln -s apache-flume-1.9.0-bin flume</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$vi &#x2F;etc&#x2F;profile</span><br><span class="line"># flume</span><br><span class="line">export FLUME_HOME&#x3D;&#x2F;soft&#x2F;flume</span><br><span class="line">export PATH&#x3D;$PATH:$FLUME_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">$source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改配置文件env，添加JAVA_HOME</p>
</li>
<li><p>验证安装是否成功</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flume-ng version</span><br><span class="line">Flume 1.9.0</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、使用文档"><a href="#三、使用文档" class="headerlink" title="三、使用文档"></a>三、使用文档</h2><p><strong>官方手册</strong>：<a href="http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html" target="_blank" rel="noopener">http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html</a></p>
<p>安装nc用作测试工具：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;sudo yum install nmap-ncat.x86_64</span><br></pre></td></tr></table></figure></div>



<p><strong>如果发现端口访问不了，可以把localhost改成0.0.0.0</strong></p>
<h3 id="3-1-Flume-Source"><a href="#3-1-Flume-Source" class="headerlink" title="3.1 Flume Source"></a>3.1 Flume Source</h3><p>数据收集。</p>
<h4 id="3-1-1-netcat-监听端口"><a href="#3-1-1-netcat-监听端口" class="headerlink" title="3.1.1 netcat 监听端口"></a>3.1.1 netcat 监听端口</h4><ol>
<li><p>创建配置文件[/soft/flume/conf/netcat-conf.conf]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<ul>
<li><p>启动flume-agent</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;flume&#x2F;conf]$flume-ng agent -f netcat-source.conf -n a1 -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure></div>

<p>-f（–conf-file）：配置文件</p>
<p>-n（–name）：配置文件中的flume对象</p>
<p>–conf：配置文件目录</p>
<p>-Dflume.root.logger=INFO：使用log4j</p>
<p>console：打印到控制台</p>
</li>
<li><p>另起一个窗口，查看端口是否启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$network -anop | grep 44444</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动nc客户端，发送信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> $&gt;nc localhost 44444</span><br><span class="line"> Hi,flume!</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/netcat.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/netcat.png" class="lazyload"></a></p>
</li>
</ul>
</li>
</ol>
<h4 id="3-1-2-exec-监听文件"><a href="#3-1-2-exec-监听文件" class="headerlink" title="3.1.2 exec 监听文件"></a>3.1.2 exec 监听文件</h4><p>实时日志收集，对一个文件的监听。当文件有新的内容的时候，会触发事件。</p>
<ol>
<li><p>配置文件[exec-source.conf]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息(文件末尾追加的时候触发)</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">exec</span></span><br><span class="line"><span class="meta">a1.sources.r1.command</span>=<span class="string">tail -F /home/centos/flume-exec.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flume-ng agent -f exec-source.conf -n a1 -Dflume.root.logger&#x3D;INFO,console</span><br><span class="line"></span><br><span class="line">$echo test exec &gt;&gt; &#x2F;home&#x2F;wbw&#x2F;flume-exec.txt</span><br><span class="line">$echo hello &gt;&gt; &#x2F;home&#x2F;wbw&#x2F;flume-exec.txt</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/exec.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/exec.png" class="lazyload"></a></p>
</li>
</ol>
<h4 id="3-1-3-spooldir-监听目录"><a href="#3-1-3-spooldir-监听目录" class="headerlink" title="3.1.3 spooldir 监听目录"></a>3.1.3 spooldir 监听目录</h4><p>监控一个文件夹，静态文件。</p>
<p>收集完之后，会重命名文件成新文件。.compeleted</p>
<p>不能实时收集数据，要把文件移动进去。</p>
<ol>
<li><p>配置文件[spooldir-source.conf]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息(目录下文件变化时触发事件)</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">spooldir</span></span><br><span class="line"><span class="meta">a1.sources.r1.spoolDir</span>=<span class="string">/home/wbw/spooldir</span></span><br><span class="line"><span class="meta">a1.sources.r1.fileHeader</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$mkdir &#x2F;home&#x2F;wbw&#x2F;spooldir</span><br><span class="line">$flume-ng agent -f spooldir-source.conf -n a1 -Dflume.root.logger&#x3D;INFO,console</span><br><span class="line"></span><br><span class="line">$echo hello &gt;&gt; &#x2F;home&#x2F;wbw&#x2F;spooldir&#x2F;sp1.txt</span><br><span class="line">$echo spool &gt;&gt; &#x2F;home&#x2F;wbw&#x2F;spooldir&#x2F;sp2.txt</span><br><span class="line">$echo hello &gt;&gt; &#x2F;home&#x2F;wbw&#x2F;spooldir&#x2F;sp3.txt</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/spooldir.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/spooldir.png" class="lazyload"></a></p>
<p><a href="/postImages/spooldir2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/spooldir2.png" class="lazyload"></a></p>
</li>
</ol>
<h4 id="3-1-4-seq-生成文件（压力测试）"><a href="#3-1-4-seq-生成文件（压力测试）" class="headerlink" title="3.1.4 seq 生成文件（压力测试）"></a>3.1.4 seq 生成文件（压力测试）</h4><p>通过生成指定文件数量，进行压力测试。</p>
<ol>
<li><p>配置文件[seq-source.conf]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 声明3种组件</span><br><span class="line">a1.sources=r1</span><br><span class="line">a1.channels=c1</span><br><span class="line">a1.sinks=k1</span><br><span class="line"></span><br><span class="line"># 定义source信息(压力测试)</span><br><span class="line">a1.sources.r1.type=seq</span><br><span class="line">a1.sources.r1.totalEvent=1000   # 生成N个数据</span><br><span class="line"></span><br><span class="line"># 定义sink信息</span><br><span class="line">a1.sinks.k1.type=logger</span><br><span class="line"></span><br><span class="line"># 定义channel信息</span><br><span class="line">a1.channels.c1.type=memory</span><br><span class="line"></span><br><span class="line"># 绑定(1个sink只对应1个channel)</span><br><span class="line">a1.sources.r1.channels=c1</span><br><span class="line">a1.sinks.k1.channel=c1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flume-ng agent -f seq-source.conf -n a1 -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="3-1-5-stress-压力测试"><a href="#3-1-5-stress-压力测试" class="headerlink" title="3.1.5 stress (压力测试)"></a>3.1.5 stress (压力测试)</h4><ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1.sources &#x3D; stresssource-1</span><br><span class="line">a1.channels &#x3D; memoryChannel-1</span><br><span class="line">a1.sources.stresssource-1.type &#x3D; org.apache.flume.source.StressSource</span><br><span class="line">a1.sources.stresssource-1.size &#x3D; 10240</span><br><span class="line">a1.sources.stresssource-1.maxTotalEvents &#x3D; 1000000</span><br><span class="line">a1.sources.stresssource-1.channels &#x3D; memoryChannel-1</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h4 id="3-1-6-KafkaSource"><a href="#3-1-6-KafkaSource" class="headerlink" title="3.1.6 KafkaSource"></a>3.1.6 KafkaSource</h4><p><strong>作为消费者</strong>（Kafka  =&gt; source）</p>
<ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kafka</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">org.apache.flume.source.kafka.KafkaSource</span></span><br><span class="line"><span class="meta">a1.sources.r1.batchSize</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">a1.sources.r1.batchDurationMillis</span> = <span class="string">2000</span></span><br><span class="line"><span class="comment"># 配置服务</span></span><br><span class="line"><span class="meta">a1.sources.r1.kafka.bootstrap.servers</span> = <span class="string">s202:9092</span></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line"><span class="meta">a1.sources.r1.kafka.topics</span> = <span class="string">test4</span></span><br><span class="line"><span class="comment"># 组</span></span><br><span class="line"><span class="meta">a1.sources.r1.kafka.consumer.group.id</span> = <span class="string">g4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$flume-ng agent -f kafka-source.conf -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line"># 运行kafka生产者 JAVA API，发送 "This is Kafka"</span><br><span class="line"></span><br><span class="line"># flume控制台打印消息</span><br><span class="line">2020-04-17 19:06:01,645 INFO sink.LoggerSink: Event: &#123; headers:&#123;topic=test4, partition=0, offset=4, timestamp=1587121557922&#125; body: 54 68 69 73 20 69 73 20 4B 61 66 6B 61          This is Kafka</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="3-1-7-Log4j"><a href="#3-1-7-Log4j" class="headerlink" title="3.1.7 Log4j"></a>3.1.7 Log4j</h4><ol>
<li><p>配置文件 log4j-source.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">0.0.0.0</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写java代码，生成日志</p>
<ul>
<li><p>log4j.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### set log levels ###</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">INFO,Console,flume</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  输出到控制台  ###</span></span><br><span class="line"><span class="meta">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;] [%t] [%c] [%p] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到flume</span></span><br><span class="line"><span class="meta">log4j.appender.flume</span> = <span class="string">org.apache.flume.clients.log4jappender.Log4jAppender</span></span><br><span class="line"><span class="meta">log4j.appender.flume.Hostname</span> = <span class="string">s201</span></span><br><span class="line"><span class="meta">log4j.appender.flume.Port</span> = <span class="string">44444</span></span><br><span class="line"><span class="meta">log4j.appender.flume.UnsafeMode</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>LoggerGenerator.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LoggerGenerator class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/29 12:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(LoggerGenerator<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            logger.info(<span class="string">"value : "</span> + index++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flume-ng agent -f log4j-source.conf -n a1 -Dflume.root.logger&#x3D;INFO,console</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-2-Flume-Sink"><a href="#3-2-Flume-Sink" class="headerlink" title="3.2 Flume Sink"></a>3.2 Flume Sink</h3><p>指定将数据存到哪。</p>
<h4 id="3-2-1-hdfs"><a href="#3-2-1-hdfs" class="headerlink" title="3.2.1 hdfs"></a>3.2.1 hdfs</h4><ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">hdfs</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.path</span>=<span class="string">/flume/events/%y-%m-%d/%H%M/%S</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.filePrefix</span>=<span class="string">events-</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.useLocalTimeStamp</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否产生新目录，每10分钟产生一个新的目录，一般控制的目录方面</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.round</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.roundValue</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.roundUnit</span>=<span class="string">minute</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否产生新文件，当文件达到一定大小后，会生成新文件,单位字节</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.rollnterval</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.rollSize</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hdfs.rollCount</span>=<span class="string">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flume-ng agent -f hdfs-sink.conf -n a1</span><br><span class="line"></span><br><span class="line"># hdfs创建目录 </span><br><span class="line">$hdfs dfs -mkdir &#x2F;flume</span><br><span class="line"></span><br><span class="line"># 启动nc</span><br><span class="line">$nc localhost 44444</span><br><span class="line">hello,hdfs</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/hdfs.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/hdfs.png" class="lazyload"></a></p>
<p><a href="/postImages/hdfs2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/hdfs2.png" class="lazyload"></a></p>
</li>
</ol>
<h4 id="3-2-2-hvie"><a href="#3-2-2-hvie" class="headerlink" title="3.2.2 hvie"></a>3.2.2 hvie</h4><p>很少用，hive要转mr太慢了。</p>
<h4 id="3-2-3-hbase"><a href="#3-2-3-hbase" class="headerlink" title="3.2.3 hbase"></a>3.2.3 hbase</h4><ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">hbase</span></span><br><span class="line"><span class="meta">a1.sinks.k1.table</span>=<span class="string">ns1:logger</span></span><br><span class="line"><span class="meta">a1.sinks.k1.columnFamily</span>=<span class="string">f1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.serializer</span>=<span class="string">org.apache.flume.sink.hbase.RegexHbaseEventSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动hbase集群，创建表</span><br><span class="line">$start-hbase.sh</span><br><span class="line">$hbase shell</span><br><span class="line">hbase(main):001:0&gt; create &#39;ns1:logger&#39;,&#39;f1&#39;</span><br><span class="line"></span><br><span class="line"># 启动flume</span><br><span class="line">$flume-ng agent -f hbase-sink.conf -n a1 </span><br><span class="line"></span><br><span class="line"># 启动nc</span><br><span class="line">$nc localhost 44444</span><br><span class="line">hello,hbase</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/hbase.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/hbase.png" class="lazyload"></a></p>
</li>
</ol>
<h4 id="3-2-4-kafka"><a href="#3-2-4-kafka" class="headerlink" title="3.2.4 kafka"></a>3.2.4 kafka</h4><p><strong>作为生产者</strong>（sink =&gt; Kafka）</p>
<ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置KafkaSink</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">org.apache.flume.sink.kafka.KafkaSink</span></span><br><span class="line"><span class="comment"># 配置主题</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.topic</span> = <span class="string">test4</span></span><br><span class="line"><span class="comment"># 配置服务</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.bootstrap.servers</span> = <span class="string">s202:9092</span></span><br><span class="line"><span class="comment"># 配置大小</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.flumeBatchSize</span> = <span class="string">20</span></span><br><span class="line"><span class="comment"># 配置应答</span></span><br><span class="line"><span class="meta">a1.sinks.k1.kafka.producer.acks</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 运行flume</span><br><span class="line">$flume-ng agent -f kafka-sink.conf -n a1</span><br><span class="line"></span><br><span class="line"># 运行kafka消费者 JAVA API</span><br><span class="line"></span><br><span class="line"># 启动nc</span><br><span class="line">$nc localhost 44444</span><br><span class="line">hello,kafka</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"># JAVA API控制台接收到消息</span><br><span class="line">offset = 0, value = hello,kafka</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-3-avro-跃点（Sink-gt-Source）"><a href="#3-3-avro-跃点（Sink-gt-Source）" class="headerlink" title="3.3 avro 跃点（Sink-&gt;Source）"></a>3.3 avro 跃点（Sink-&gt;Source）</h3><p>使用<strong>avroSource</strong>和<strong>AvroSink</strong>实现跃点agent处理（从一个a1.Sink到一个a2.Source）</p>
<ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a1（相当于客户端）</span></span><br><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a1.sources</span>=<span class="string">r1</span></span><br><span class="line"><span class="meta">a1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks</span>=<span class="string">k1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息</span></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息(作为a2的source)</span></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sinks.k1.hostname</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sinks.k1.port</span>=<span class="string">55555</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a2(当相于服务端)</span></span><br><span class="line"><span class="comment"># 声明3种组件</span></span><br><span class="line"><span class="meta">a2.sources</span>=<span class="string">r2</span></span><br><span class="line"><span class="meta">a2.channels</span>=<span class="string">c2</span></span><br><span class="line"><span class="meta">a2.sinks</span>=<span class="string">k2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义source信息(avro)</span></span><br><span class="line"><span class="meta">a2.sources.r2.type</span>=<span class="string">avro</span></span><br><span class="line"><span class="meta">a2.sources.r2.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a2.sources.r2.port</span>=<span class="string">55555</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义sink信息</span></span><br><span class="line"><span class="meta">a2.sinks.k2.type</span>=<span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义channel信息</span></span><br><span class="line"><span class="meta">a2.channels.c2.type</span>=<span class="string">memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定(1个sink只对应1个channel)</span></span><br><span class="line"><span class="meta">a2.sources.r2.channels</span>=<span class="string">c2</span></span><br><span class="line"><span class="meta">a2.sinks.k2.channel</span>=<span class="string">c2</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动并验证a2</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flume-ng agent -f avro.conf -n a2 -Dflume.root.logger&#x3D;INFO,console</span><br><span class="line"></span><br><span class="line">$netstat -lnpt | grep 55555</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp6       0      0 127.0.0.1:55555         :::*                    LISTEN      60646&#x2F;java</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动并验证a1</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$flume-ng agent -f avro.conf -n a1</span><br><span class="line"></span><br><span class="line">$netstat -lnpt | grep 44444</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp6       0      0 127.0.0.1:44444         :::*                    LISTEN      62129&#x2F;java</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>nc发送数据给a1</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$nc localhost 44444</span><br><span class="line">hello,avro!</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/avro.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/avro.png" class="lazyload"></a></p>
</li>
</ol>
<h3 id="3-4-Flume-Channel"><a href="#3-4-Flume-Channel" class="headerlink" title="3.4 Flume Channel"></a>3.4 Flume Channel</h3><p>通道是事件在代理上进行的存储库。源添加事件，接收器将其删除。</p>
<h4 id="3-4-1-Memory-Channel-内存通道"><a href="#3-4-1-Memory-Channel-内存通道" class="headerlink" title="3.4.1 Memory Channel 内存通道"></a>3.4.1 Memory Channel 内存通道</h4><p>有缺点，如果出问题。通道中的数据就丢了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 和之前的配置那样</span><br><span class="line">a2.channels.c2.type&#x3D;memory</span><br></pre></td></tr></table></figure></div>



<h4 id="3-4-2-File-Channel-文件通道"><a href="#3-4-2-File-Channel-文件通道" class="headerlink" title="3.4.2 File Channel 文件通道"></a>3.4.2 File Channel 文件通道</h4><p>通道中的文件不会丢，但是占空间。</p>
<ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.sinks</span>= <span class="string">k1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.type</span>=<span class="string">netcat</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span>=<span class="string">44444</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span>=<span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">file</span></span><br><span class="line"><span class="meta">a1.channels.c1.checkpointDir</span> = <span class="string">/home/centos/flume/fc_check</span></span><br><span class="line"><span class="meta">a1.channels.c1.dataDirs</span> = <span class="string">/home/wbw/flume/fc_data</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span>=<span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span>=<span class="string">c1</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="3-4-3-Spillable-Memory-Channel-可溢出文件通道"><a href="#3-4-3-Spillable-Memory-Channel-可溢出文件通道" class="headerlink" title="3.4.3 Spillable Memory Channel 可溢出文件通道"></a>3.4.3 Spillable Memory Channel 可溢出文件通道</h4><p>事件存储在内存队列中和磁盘上。<strong>内存中队列充当主存储，磁盘充当溢出</strong>。使用嵌入式文件通道管理磁盘存储。当内存中队列已满时，其他传入事件将存储在文件通道中。该通道非常适合在正常操作期间需要高存储通道吞吐量的流，但同时又需要更大的文件通道容量，以更好地容忍间歇性接收器侧中断或排水速率下降。在这种异常情况下，吞吐量将大约降低到文件通道速度。如果代理崩溃或重新启动，则当代理联机时，只会恢复磁盘上存储的事件。<strong>该频道目前处于实验阶段，不建议在生产中使用。</strong></p>
<ol>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">SPILLABLEMEMORY</span></span><br><span class="line"><span class="comment">#0表示禁用内存通道，等价于文件通道</span></span><br><span class="line"><span class="meta">a1.channels.c1.memoryCapacity</span> = <span class="string">0</span></span><br><span class="line"><span class="comment">#0,禁用文件通道，等价内存通道。</span></span><br><span class="line"><span class="meta">a1.channels.c1.overflowCapacity</span> = <span class="string">2000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.channels.c1.byteCapacity</span> = <span class="string">800000</span></span><br><span class="line"><span class="meta">a1.channels.c1.checkpointDir</span> = <span class="string">/user/centos/flume/fc_check</span></span><br><span class="line"><span class="meta">a1.channels.c1.dataDirs</span> = <span class="string">/user/centos/flume/fc_data</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="3-4-4-KafkaChannel-数据库通道"><a href="#3-4-4-KafkaChannel-数据库通道" class="headerlink" title="3.4.4 KafkaChannel 数据库通道"></a>3.4.4 KafkaChannel 数据库通道</h4><p><strong>生产者 + 消费者</strong>（source =&gt; channel =&gt; sink）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">a1.sources</span> = <span class="string">r1</span></span><br><span class="line"><span class="meta">a1.sinks</span> = <span class="string">k1</span></span><br><span class="line"><span class="meta">a1.channels</span> = <span class="string">c1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.type</span> = <span class="string">avro</span></span><br><span class="line"><span class="meta">a1.sources.r1.bind</span> = <span class="string">localhost</span></span><br><span class="line"><span class="meta">a1.sources.r1.port</span> = <span class="string">8888</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sinks.k1.type</span> = <span class="string">logger</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.channels.c1.type</span> = <span class="string">org.apache.flume.channel.kafka.KafkaChannel</span></span><br><span class="line"><span class="meta">a1.channels.c1.kafka.bootstrap.servers</span> = <span class="string">s202:9092</span></span><br><span class="line"><span class="meta">a1.channels.c1.kafka.topic</span> = <span class="string">test4</span></span><br><span class="line"><span class="meta">a1.channels.c1.kafka.consumer.group.id</span> = <span class="string">g6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">a1.sources.r1.channels</span> = <span class="string">c1</span></span><br><span class="line"><span class="meta">a1.sinks.k1.channel</span> = <span class="string">c1</span></span><br></pre></td></tr></table></figure></div>



<h2 id="四、JAVA-API"><a href="#四、JAVA-API" class="headerlink" title="四、JAVA API"></a>四、JAVA API</h2><h3 id="4-1-pom-依赖"><a href="#4-1-pom-依赖" class="headerlink" title="4.1 pom 依赖"></a>4.1 pom 依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>其他组件，导入相应依赖。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Flume</category>
      </categories>
      <tags>
        <tag>Flume</tag>
      </tags>
  </entry>
  <entry>
    <title>HBase学习笔记</title>
    <url>/2020/03/29/HBase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="HBase学习笔记"><a href="#HBase学习笔记" class="headerlink" title="HBase学习笔记"></a>HBase学习笔记</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li><p>hadoop数据库，分布式可伸缩大型数据存储。</p>
</li>
<li><p>用户对随机、实时读写数据。</p>
</li>
<li><p>十亿行 x 百万列。</p>
</li>
<li><p>版本化、非关系型数据库。</p>
</li>
<li><p>面向列数据库，面向列存储，table是按row排序。三级坐标定位（RowId,列族+列，版本号）。</p>
</li>
</ul>
<p><a href="/postImages/Hbase%E5%AD%98%E5%82%A8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/Hbase%E5%AD%98%E5%82%A8.png" class="lazyload"></a></p>
<p><strong>Feature特性</strong></p>
<pre><code>Linear and modular scalability.                    //线性模块化扩展方式。
Strictly consistent reads and writes.            //严格一致性读写
Automatic and configurable sharding of tables    //自动可配置表切割
Automatic failover support between RegionServers.    //区域服务器之间自动容在
Convenient base classes for backing Hadoop MapReduce jobs with Apache HBase tables.        //
Easy to use Java API for client access.            //java API
Block cache and Bloom Filters for real-time queries    //块缓存和布隆过滤器用于实时查询 
Query predicate push down via server side Filters    //通过服务器端过滤器实现查询预测
Thrift gateway and a REST-ful Web service that supports XML, Protobuf, and binary data encoding options    //
Extensible jruby-based (JIRB) shell                    //
Support for exporting metrics via the Hadoop metrics subsystem to files or Ganglia; or via JMX            //可视化</code></pre><h2 id="二、搭建HBase集群"><a href="#二、搭建HBase集群" class="headerlink" title="二、搭建HBase集群"></a>二、搭建HBase集群</h2><p>集群规划：201用于master管理，202-204用于区域服务器。</p>
<ol>
<li><p>jdk 、hadoop安装。</p>
</li>
<li><p>在201安装<strong>hbase-2.2.4-bin.tar.gz</strong>，配置环境变量，分发到202-204</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf hbase-2.2.4-bin.tar.gz -C &#x2F;soft&#x2F;</span><br><span class="line">$ln -s hbase-2.2.4 hbase</span><br><span class="line">$sudo vi &#x2F;etc&#x2F;profile</span><br><span class="line"># Hbase</span><br><span class="line">export HBASE_HOME&#x3D;&#x2F;soft&#x2F;hbase</span><br><span class="line">export PATH&#x3D;$PATH:$HBASE_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">$source &#x2F;etc&#x2F;profile</span><br><span class="line">[root@s201 &#x2F;soft&#x2F;hbase]#xsync.sh &#x2F;etc&#x2F;profile</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hbase&#x2F;conf]$xcall.sh &#39;source &#x2F;etc&#x2F;profile&#39;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>验证是否安装成功</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase version</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置Hbase完全分布式</p>
<ul>
<li><p>修改 hbase/conf/hbase-env.sh</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改JDK路径</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;soft&#x2F;jdk</span><br><span class="line"># 使用自己的ZK管理</span><br><span class="line">export HBASE_MANAGES_ZK&#x3D;false</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改 hbse-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用完全分布式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定hbase数据在hdfs上的存放路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置zk地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201:2181,s202:2181,s203:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- zk的本地目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置 hbase/conf/regionservers</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s202</span><br><span class="line">s203</span><br><span class="line">s204</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>因为HBase数据将存储在HDFS上，故需要把Hadoop关于HDFS的相关配置文件（hdfs-site.xml和core-site.xml）拷贝到HBase的conf目录下，分别执行以下两条命令。【如果不做这个，那么mycluster将识别不到】</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop]$cp hdfs-site.xml &#x2F;soft&#x2F;hbase&#x2F;conf&#x2F;</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop]$cp core-site.xml &#x2F;soft&#x2F;hbase&#x2F;conf&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>然后分发到202-204</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$xsync.sh hbase-2.2.4</span><br><span class="line">$xsync.sh hbase</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ol>
<pre><code>【或者】不推荐

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在hbase-env.sh文件添加hadoop配置文件目录到HBASE_CLASSPATH环境变量并分发.</span><br><span class="line">[&#x2F;soft&#x2F;hbase&#x2F;conf&#x2F;hbase-env.sh]</span><br><span class="line">export HBASE_CLASSPATH&#x3D;$HBASE_CLASSPATH:&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop</span><br><span class="line"></span><br><span class="line">2.在hbase&#x2F;conf&#x2F;目录下创建到hadoop的hdfs-site.xml符号连接。</span><br><span class="line">$&gt;ln -s &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop&#x2F;hdfs-site.xml &#x2F;soft&#x2F;hbase&#x2F;conf&#x2F;hdfs-site.xml</span><br></pre></td></tr></table></figure></div>

然后分发到202-204</code></pre><ol start="5">
<li><p>启动Hbase（ZK集群启动状态）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line">可以看到S201的HMaster，以及S202-204的HRegionServer</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hbase&#x2F;conf]$xcall.sh jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2144 DFSZKFailoverController</span><br><span class="line">4337 Jps</span><br><span class="line">2456 ResourceManager</span><br><span class="line">1626 QuorumPeerMain</span><br><span class="line">4110 HMaster</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1409 QuorumPeerMain</span><br><span class="line">2164 HRegionServer</span><br><span class="line">2278 Jps</span><br><span class="line">1511 DataNode</span><br><span class="line">1577 JournalNode</span><br><span class="line">1645 NodeManager</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1377 QuorumPeerMain</span><br><span class="line">2241 Jps</span><br><span class="line">1619 NodeManager</span><br><span class="line">1485 DataNode</span><br><span class="line">1551 JournalNode</span><br><span class="line">2127 HRegionServer</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1552 NodeManager</span><br><span class="line">2086 HRegionServer</span><br><span class="line">2200 Jps</span><br><span class="line">1418 DataNode</span><br><span class="line">1484 JournalNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s205 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1440 ResourceManager</span><br><span class="line">1672 Jps</span><br><span class="line">1374 DFSZKFailoverController</span><br><span class="line">1311 NameNode</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：可能HMaster起不来!</strong></p>
<p>查看日志文件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: The procedure WAL relies on the ability to hsync for proper operation during component failures, but the underlying filesystem does not support doing so. Please check the config value of &#39;hbase.procedure.store.wal.use.hsync&#39; to set the desired level of robustness and ensure the config value of &#39;hbase.wal.dir&#39; points to a FileSystem mount that can provide it.</span><br></pre></td></tr></table></figure></div>

<p>对 hbase-site.xml 添加如下配置，然后分发，重启集群。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看WEBUI</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;s201:16010</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/HbaseWEBUI.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/HbaseWEBUI.png" class="lazyload"></a></p>
</li>
<li><p>HBASE备份(高可用)【可选】</p>
<p>在s202上执行命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase-daemon.sh start master</span><br></pre></td></tr></table></figure></div>

<p>启动一个备用Master，以保障HBase集群的高可用（HA）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1409 QuorumPeerMain</span><br><span class="line">3763 Jps</span><br><span class="line">1511 DataNode</span><br><span class="line">1577 JournalNode</span><br><span class="line">3485 HRegionServer</span><br><span class="line">1645 NodeManager</span><br><span class="line">3645 HMaster			&#x2F;&#x2F;!!!</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/HbaseWEBUI2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/HbaseWEBUI2.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="三、HBase-Shell"><a href="#三、HBase-Shell" class="headerlink" title="三、HBase Shell"></a>三、HBase Shell</h2><p>shell命令后面如果有参数都要加上单引号。</p>
<h3 id="3-1-进入shell、帮助"><a href="#3-1-进入shell、帮助" class="headerlink" title="3.1 进入shell、帮助"></a>3.1 进入shell、帮助</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase shell		&#x2F;&#x2F;进入shell</span><br><span class="line">$hbase&gt;help			&#x2F;&#x2F;帮助</span><br><span class="line"></span><br><span class="line">COMMAND GROUPS:</span><br><span class="line">  Group name: general</span><br><span class="line">  Commands: processlist, status, table_help, version, whoami</span><br><span class="line"></span><br><span class="line">  Group name: ddl</span><br><span class="line">  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, list_regions, locate_region, show_filters</span><br><span class="line"></span><br><span class="line">  Group name: namespace</span><br><span class="line">  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables</span><br></pre></td></tr></table></figure></div>

<p>可以看到有很多命令分组。</p>
<h3 id="3-2-命名空间"><a href="#3-2-命名空间" class="headerlink" title="3.2 命名空间"></a>3.2 命名空间</h3><p>命名空间有点类似MYSQL中的库的概念。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;help	&#39;list_namespace&#39;			&#x2F;&#x2F;查看特定的命令帮助</span><br><span class="line">$hbase&gt;list_namespace					&#x2F;&#x2F;列出名字空间(相当于MYSQL中的数据库)</span><br><span class="line">$hbase&gt;list_namespace_tables &#39;default&#39;	&#x2F;&#x2F;列出名字空间(数据库)</span><br><span class="line">$hbase&gt;create_namespace &#39;ns1&#39;			&#x2F;&#x2F;创建命名空间</span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-创建表"><a href="#3-3-创建表" class="headerlink" title="3.3 创建表"></a>3.3 创建表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;help &#39;create&#39;</span><br><span class="line">$hbase&gt;create &#39;ns1:t1&#39;,&#39;f1&#39;				&#x2F;&#x2F;创建表,指定空间下.ns1为命名空间，t1为表名，f1为列族</span><br></pre></td></tr></table></figure></div>



<h3 id="3-4-删除表"><a href="#3-4-删除表" class="headerlink" title="3.4 删除表"></a>3.4 删除表</h3><p>要先禁用表才能删除。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disable &#39;ns1:t1&#39;</span><br><span class="line">drop &#39;ns1:t1&#39;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-5-插入、更新"><a href="#3-5-插入、更新" class="headerlink" title="3.5 插入、更新"></a>3.5 插入、更新</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;put &#39;ns1:t1&#39;,&#39;row1&#39;,&#39;f1:id&#39;,100		&#x2F;&#x2F;插入数据</span><br><span class="line">$hbase&gt;put &#39;ns1:t1&#39;,&#39;row1&#39;,&#39;f1:name&#39;,&#39;tom&#39;	&#x2F;&#x2F;row1是行ID，后面跟着‘键’，‘值’</span><br></pre></td></tr></table></figure></div>



<h3 id="3-6-查看数据"><a href="#3-6-查看数据" class="headerlink" title="3.6 查看数据"></a>3.6 查看数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;get &#39;ns1:t1&#39;,&#39;row1&#39;					&#x2F;&#x2F;查询指定row</span><br><span class="line">$hbase&gt;scan &#39;ns1:t1&#39;						&#x2F;&#x2F;扫描表</span><br></pre></td></tr></table></figure></div>



<h2 id="四、JAVA-API"><a href="#四、JAVA-API" class="headerlink" title="四、JAVA API"></a>四、JAVA API</h2><ol>
<li><p>导入依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>添加配置文件</p>
<p>复制hbase集群的hbase-site.xml文件到模块的src/main/resources目录下。</p>
</li>
<li><p>编写代码</p>
<p><strong>注意：</strong>如果发现JAVA连接不上HBase，可能是本地开发环境的hosts没有将集群的host集写上去。</p>
</li>
</ol>
<h3 id="4-1-插入"><a href="#4-1-插入" class="headerlink" title="4.1 插入"></a>4.1 插入</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPut</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建conf对象</span></span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    <span class="comment">// 通过连接工厂创建连接对象</span></span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    <span class="comment">// 获得表名对象</span></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    <span class="comment">// 获得table</span></span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line">    <span class="comment">// 通过bytes工具类创建字节数组(将字符串)</span></span><br><span class="line">    <span class="keyword">byte</span>[] rowId = Bytes.toBytes(<span class="string">"row3"</span>);</span><br><span class="line">    <span class="comment">// 创建put对象</span></span><br><span class="line">    Put put = <span class="keyword">new</span> Put(rowId);</span><br><span class="line">    <span class="keyword">byte</span>[] f1 = Bytes.toBytes(<span class="string">"f1"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] id = Bytes.toBytes(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] value = Bytes.toBytes(<span class="number">102</span>);</span><br><span class="line">    put.addColumn(f1, id, value);</span><br><span class="line">    <span class="comment">// 执行插入</span></span><br><span class="line">    table.put(put);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-2-批量插入"><a href="#4-2-批量插入" class="headerlink" title="4.2 批量插入"></a>4.2 批量插入</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchPut</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数字格式化</span></span><br><span class="line">    DecimalFormat df = <span class="keyword">new</span> DecimalFormat();</span><br><span class="line">    df.applyPattern(<span class="string">"0000"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建conf对象</span></span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    <span class="comment">// 通过连接工厂创建连接对象</span></span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    <span class="comment">// 获得表名对象</span></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    <span class="comment">// 获得table</span></span><br><span class="line">    HTable table = (HTable) conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.不要自动清理缓冲区</span></span><br><span class="line">    table.setAutoFlush(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        Put put = <span class="keyword">new</span> Put(Bytes.toBytes(<span class="string">"row"</span> + df.format(i)));</span><br><span class="line">        <span class="comment">// 2.关闭写前日志（有风险）</span></span><br><span class="line">        put.setWriteToWAL(<span class="keyword">false</span>);</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"id"</span>), Bytes.toBytes(i));</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"name"</span>), Bytes.toBytes(<span class="string">"tom"</span> + i));</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"age"</span>), Bytes.toBytes(i % <span class="number">100</span>));</span><br><span class="line">        table.put(put);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定量刷新</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            table.flushCommits();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    table.flushCommits();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-3-获取记录"><a href="#4-3-获取记录" class="headerlink" title="4.3 获取记录"></a>4.3 获取记录</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建conf对象</span></span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    <span class="comment">// 通过连接工厂创建连接对象</span></span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    <span class="comment">// 获得表名对象</span></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    <span class="comment">// 获得table</span></span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line">    <span class="comment">// 通过bytes工具类创建字节数组(将字符串)</span></span><br><span class="line">    <span class="keyword">byte</span>[] rowId = Bytes.toBytes(<span class="string">"row3"</span>);</span><br><span class="line">    <span class="comment">// 创建get对象</span></span><br><span class="line">    Get get = <span class="keyword">new</span> Get(rowId);</span><br><span class="line">    Result r = table.get(get);</span><br><span class="line">    <span class="keyword">byte</span>[] idValue = r.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(Bytes.toInt(idValue));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-4-查看名字空间列表"><a href="#4-4-查看名字空间列表" class="headerlink" title="4.4 查看名字空间列表"></a>4.4 查看名字空间列表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listNameSpaces</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    Admin admin = conn.getAdmin();</span><br><span class="line"></span><br><span class="line">    NamespaceDescriptor[] ns = admin.listNamespaceDescriptors();</span><br><span class="line">    <span class="keyword">for</span> (NamespaceDescriptor n : ns) &#123;</span><br><span class="line">        System.out.println(n.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-5-创建名字空间列表"><a href="#4-5-创建名字空间列表" class="headerlink" title="4.5 创建名字空间列表"></a>4.5 创建名字空间列表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNameSpace</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    Admin admin = conn.getAdmin();</span><br><span class="line">    <span class="comment">// 创建名字空间描述符</span></span><br><span class="line">    NamespaceDescriptor nsd = NamespaceDescriptor.create(<span class="string">"ns2"</span>).build();</span><br><span class="line">    admin.createNamespace(nsd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示名字空间列表</span></span><br><span class="line">    NamespaceDescriptor[] ns = admin.listNamespaceDescriptors();</span><br><span class="line">    <span class="keyword">for</span> (NamespaceDescriptor n : ns) &#123;</span><br><span class="line">        System.out.println(n.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-6-创建表"><a href="#4-6-创建表" class="headerlink" title="4.6 创建表"></a>4.6 创建表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    Admin admin = conn.getAdmin();</span><br><span class="line">    <span class="comment">// 创建表名字对象</span></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns2:t2"</span>);</span><br><span class="line">    <span class="comment">// 创建表描述符</span></span><br><span class="line">    HTableDescriptor tb1 = <span class="keyword">new</span> HTableDescriptor(tableName);</span><br><span class="line">    <span class="comment">// 创建列族描述符</span></span><br><span class="line">    HColumnDescriptor col = <span class="keyword">new</span> HColumnDescriptor(<span class="string">"f1"</span>);</span><br><span class="line">    tb1.addFamily(col);</span><br><span class="line"></span><br><span class="line">    admin.createTable(tb1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-7-查看指定名字空间下的表"><a href="#4-7-查看指定名字空间下的表" class="headerlink" title="4.7 查看指定名字空间下的表"></a>4.7 查看指定名字空间下的表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listTable</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    Admin admin = conn.getAdmin();</span><br><span class="line">    HTableDescriptor[] htd = admin.listTableDescriptorsByNamespace(<span class="string">"ns2"</span>);</span><br><span class="line">    <span class="keyword">for</span> (HTableDescriptor hTableDescriptor : htd) &#123;</span><br><span class="line">        System.out.println(hTableDescriptor.getTableName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-8-禁用表"><a href="#4-8-禁用表" class="headerlink" title="4.8 禁用表"></a>4.8 禁用表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disableTable</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    Admin admin = conn.getAdmin();</span><br><span class="line">    <span class="comment">// 禁用表</span></span><br><span class="line">    admin.disableTable(TableName.valueOf(<span class="string">"ns2:t2"</span>));</span><br><span class="line">    <span class="comment">// 删除表</span></span><br><span class="line">    admin.deleteTable(TableName.valueOf(<span class="string">"ns2:t2"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-9-删除数据"><a href="#4-9-删除数据" class="headerlink" title="4.9 删除数据"></a>4.9 删除数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择行</span></span><br><span class="line">    Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(<span class="string">"row0001"</span>));</span><br><span class="line">    <span class="comment">// 添加删除的列数据</span></span><br><span class="line">    delete.addColumn(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"id"</span>));</span><br><span class="line">    delete.addColumn(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">    table.delete(delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-10-扫描表（指定列族和列）"><a href="#4-10-扫描表（指定列族和列）" class="headerlink" title="4.10 扫描表（指定列族和列）"></a>4.10 扫描表（指定列族和列）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line">    Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">    scan.withStartRow(Bytes.toBytes(<span class="string">"row0002"</span>));</span><br><span class="line">    scan.withStopRow(Bytes.toBytes(<span class="string">"row0010"</span>));</span><br><span class="line"></span><br><span class="line">    ResultScanner rs = table.getScanner(scan);</span><br><span class="line">    Iterator&lt;Result&gt; iterator = rs.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Result result = iterator.next();</span><br><span class="line">        <span class="keyword">byte</span>[] name = result.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"name"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] age = result.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"age"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] id = result.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"id"</span>));</span><br><span class="line">        System.out.print(Bytes.toInt(id) + <span class="string">","</span>);</span><br><span class="line">        System.out.print(Bytes.toString(name) + <span class="string">","</span>);</span><br><span class="line">        System.out.println(Bytes.toInt(age));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-11-扫描表（指定列族）"><a href="#4-11-扫描表（指定列族）" class="headerlink" title="4.11 扫描表（指定列族）"></a>4.11 扫描表（指定列族）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line">    Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">    scan.withStartRow(Bytes.toBytes(<span class="string">"row0001"</span>));</span><br><span class="line">    scan.withStopRow(Bytes.toBytes(<span class="string">"row0010"</span>));</span><br><span class="line"></span><br><span class="line">    ResultScanner rs = table.getScanner(scan);</span><br><span class="line">    Iterator&lt;Result&gt; iterator = rs.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Result result = iterator.next();</span><br><span class="line">        NavigableMap&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; map = result.getFamilyMap(Bytes.toBytes(<span class="string">"f1"</span>));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            String col = Bytes.toString(entry.getKey());</span><br><span class="line">            String value = Bytes.toString(entry.getValue());</span><br><span class="line">            System.out.print(col + <span class="string">":"</span> + value + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-12-扫描表（指定表）"><a href="#4-12-扫描表（指定表）" class="headerlink" title="4.12 扫描表（指定表）"></a>4.12 扫描表（指定表）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:t1"</span>);</span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line">    Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">    scan.withStartRow(Bytes.toBytes(<span class="string">"row0001"</span>));</span><br><span class="line">    scan.withStopRow(Bytes.toBytes(<span class="string">"row0010"</span>));</span><br><span class="line"></span><br><span class="line">    ResultScanner rs = table.getScanner(scan);</span><br><span class="line">    Iterator&lt;Result&gt; iterator = rs.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Result result = iterator.next();</span><br><span class="line">        <span class="comment">// 得到一行的所有map,key=f1,value=Map&lt;Col,Map&lt;Timestamp,value&gt;&gt;</span></span><br><span class="line">        NavigableMap&lt;<span class="keyword">byte</span>[], NavigableMap&lt;<span class="keyword">byte</span>[], NavigableMap&lt;Long, <span class="keyword">byte</span>[]&gt;&gt;&gt; map = result.getMap();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">byte</span>[], NavigableMap&lt;<span class="keyword">byte</span>[], NavigableMap&lt;Long, <span class="keyword">byte</span>[]&gt;&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//得到列族</span></span><br><span class="line">            String f = Bytes.toString(entry.getKey());</span><br><span class="line">            Map&lt;<span class="keyword">byte</span>[], NavigableMap&lt;Long, <span class="keyword">byte</span>[]&gt;&gt; colDataMap = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;<span class="keyword">byte</span>[], NavigableMap&lt;Long, <span class="keyword">byte</span>[]&gt;&gt; ets : colDataMap.entrySet() )&#123;</span><br><span class="line">                String c = Bytes.toString(ets.getKey());</span><br><span class="line">                Map&lt;Long, <span class="keyword">byte</span>[]&gt; tsValueMap = ets.getValue();</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Long,<span class="keyword">byte</span>[]&gt; e : tsValueMap.entrySet())&#123;</span><br><span class="line">                    Long ts = e.getKey() ;</span><br><span class="line">                    String value = Bytes.toString(e.getValue());</span><br><span class="line">                    System.out.print(f+<span class="string">":"</span>+c+<span class="string">":"</span>+ts+<span class="string">"="</span> +value + <span class="string">","</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="五、HBase架构"><a href="#五、HBase架构" class="headerlink" title="五、HBase架构"></a>五、HBase架构</h2><h3 id="5-1-HBase写入过程"><a href="#5-1-HBase写入过程" class="headerlink" title="5.1 HBase写入过程"></a>5.1 HBase写入过程</h3><ul>
<li>WAL（write ahead log,写前日志）</li>
<li>（不完整，待续）</li>
</ul>
<h3 id="5-2-HBase基于HDFS"><a href="#5-2-HBase基于HDFS" class="headerlink" title="5.2 HBase基于HDFS"></a>5.2 HBase基于HDFS</h3><p> 相同列族的数据存放在一个文件中。</p>
<ul>
<li><p>表数据的存储目录结构构成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs:&#x2F;&#x2F;s201:8020&#x2F;hbase&#x2F;data&#x2F;$&#123;名字空间&#125;&#x2F;$&#123;表名&#125;&#x2F;$&#123;区域名称&#125;&#x2F;$&#123;列族名称&#125;&#x2F;$&#123;文件名&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>WAL目录结构构成</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs:&#x2F;&#x2F;s201:8020&#x2F;hbase&#x2F;WALs&#x2F;$&#123;区域服务器名称,主机名,端口号,时间戳&#125;&#x2F;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h3 id="5-3-client端交互过程"><a href="#5-3-client端交互过程" class="headerlink" title="5.3 client端交互过程"></a>5.3 client端交互过程</h3><ol>
<li><p>hbase集群启动时，master负责分配区域到指定区域服务器。</p>
</li>
<li><p>联系zk，找出meta表所在rs(regionserver) 【/hbase/meta-region-server】</p>
</li>
<li><p>定位row key,找到对应region server</p>
</li>
<li><p>缓存信息在本地。</p>
</li>
<li><p>联系RegionServer</p>
</li>
<li><p>HRegionServer负责open HRegion对象，为每个列族创建Store对象，Store包含多个StoreFile实例，他们是对HFile的轻量级封装。每个Store还对应了一个MemStore，用于内存存储数据。</p>
</li>
</ol>
<h2 id="六、区域"><a href="#六、区域" class="headerlink" title="六、区域"></a>六、区域</h2><h3 id="6-1-区域切割"><a href="#6-1-区域切割" class="headerlink" title="6.1 区域切割"></a>6.1 区域切割</h3><p>hbase切割文件10G进行切割。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hregion.max.filesize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>10737418240<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span>&gt;</span>hbase-default.xml<span class="tag">&lt;/<span class="name">source</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="6-2-切割-shell"><a href="#6-2-切割-shell" class="headerlink" title="6.2 切割 shell"></a>6.2 切割 shell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;scan &#39;hbase:meta&#39;	&#x2F;&#x2F;查看元数据表</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/split1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split1.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;split &#39;ns1:t1&#39;		&#x2F;&#x2F;切割表</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/split2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split2.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;切割区域(将上面的第二区域再次进行切分)</span><br><span class="line">hbase(main):001:0&gt; split &#39;ns1:t1,row5676,1586006932311.3e0703e224357f9111ee569021726486.&#39;,&#39;row8888&#39;</span><br><span class="line">0 row(s) in 0.5010 seconds</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/split3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split3.png" class="lazyload"></a></p>
<p><a href="/postImages/split4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split4.png" class="lazyload"></a></p>
<h3 id="6-3-手动移动区域"><a href="#6-3-手动移动区域" class="headerlink" title="6.3 手动移动区域"></a>6.3 手动移动区域</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):002:0&gt; help &#39;move&#39;</span><br><span class="line">Move a region.  Optionally specify target regionserver else we choose one</span><br><span class="line">at random.  NOTE: You pass the encoded region name, not the region name so</span><br><span class="line">this command is a little different to the others.  The encoded region name</span><br><span class="line">is the hash suffix on region names: e.g. if the region name were</span><br><span class="line">TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396. then</span><br><span class="line">the encoded region name portion is 527db22f95c8a9e0116f0cc13c680396</span><br><span class="line">A server name is its host, port plus startcode. For example:</span><br><span class="line">host187.example.com,60020,1289493121758</span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  hbase&gt; move &#39;ENCODED_REGIONNAME&#39;</span><br><span class="line">  hbase&gt; move &#39;ENCODED_REGIONNAME&#39;, &#39;SERVER_NAME&#39;</span><br></pre></td></tr></table></figure></div>

<p>即：</p>
<ul>
<li>ENCODED_REGIONNAME 在元数据信息表中可以找到</li>
<li>SERVER_NAME 在WEBUI中的/Home下可以看到</li>
</ul>
<h3 id="6-4-合并区域"><a href="#6-4-合并区域" class="headerlink" title="6.4 合并区域"></a>6.4 合并区域</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):003:0&gt; help &#39;merge_region&#39;</span><br><span class="line">Merge two regions. Passing &#39;true&#39; as the optional third parameter will force</span><br><span class="line">a merge (&#39;force&#39; merges regardless else merge will fail unless passed</span><br><span class="line">adjacent regions. &#39;force&#39; is for expert use only).</span><br><span class="line"></span><br><span class="line">NOTE: You must pass the encoded region name, not the full region name so</span><br><span class="line">this command is a little different from other region operations.  The encoded</span><br><span class="line">region name is the hash suffix on region names: e.g. if the region name were</span><br><span class="line">TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396. then</span><br><span class="line">the encoded region name portion is 527db22f95c8a9e0116f0cc13c680396</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  hbase&gt; merge_region &#39;ENCODED_REGIONNAME&#39;, &#39;ENCODED_REGIONNAME&#39;</span><br><span class="line">  hbase&gt; merge_region &#39;ENCODED_REGIONNAME&#39;, &#39;ENCODED_REGIONNAME&#39;, true</span><br></pre></td></tr></table></figure></div>



<h3 id="6-5-预切割"><a href="#6-5-预切割" class="headerlink" title="6.5 预切割"></a>6.5 预切割</h3><p>创建表时，预先对表进行切割。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create &#39;ns1:t2&#39;,&#39;f1&#39;,SPLITS &#x3D;&gt; [&#39;row3000&#39;,&#39;row6000&#39;]</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/%E9%A2%84%E5%88%87%E5%89%B2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%A2%84%E5%88%87%E5%89%B2.png" class="lazyload"></a></p>
<h2 id="七、版本控制"><a href="#七、版本控制" class="headerlink" title="七、版本控制"></a>七、版本控制</h2><h3 id="7-1-检索版本"><a href="#7-1-检索版本" class="headerlink" title="7.1 检索版本"></a>7.1 检索版本</h3><p>创建表时，指定列族的版本数（即保存最近N次的改动）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create &#39;ns1:t3&#39;,&#123;NAME&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;3&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后我们添加4条记录。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):002:0&gt; put &#39;ns1:t3&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom1&#39;</span><br><span class="line">0 row(s) in 0.1670 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):003:0&gt; put &#39;ns1:t3&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom2&#39;</span><br><span class="line">0 row(s) in 0.0790 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):004:0&gt; put &#39;ns1:t3&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom3&#39;</span><br><span class="line">0 row(s) in 0.0280 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):005:0&gt; put &#39;ns1:t3&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom4&#39;</span><br><span class="line">0 row(s) in 0.0330 seconds</span><br></pre></td></tr></table></figure></div>

<p>查询指定版本数记录（可以看到，虽然指定了4，但是设置的版本数为3，所以只显示3条）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):007:0&gt; get &#39;ns1:t3&#39;,&#39;row1&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;4&#125;</span><br><span class="line">COLUMN            CELL</span><br><span class="line"> f1:              timestamp&#x3D;1586336405057, value&#x3D;tom4 </span><br><span class="line"> f1:              timestamp&#x3D;1586336401776, value&#x3D;tom3 </span><br><span class="line"> f1:              timestamp&#x3D;1586336398687, value&#x3D;tom2</span><br></pre></td></tr></table></figure></div>



<h3 id="7-2-原生扫描"><a href="#7-2-原生扫描" class="headerlink" title="7.2 原生扫描"></a>7.2 原生扫描</h3><p>该操作为专家操作。RAW=&gt;true</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):011:0&gt; put &#39;ns1:t3&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom5&#39;</span><br><span class="line">0 row(s) in 0.0230 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):012:0&gt; scan &#39;ns1:t3&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;10&#125;</span><br><span class="line">ROW           COLUMN+CELL</span><br><span class="line">row1          column&#x3D;f1:, timestamp&#x3D;1586336766575, value&#x3D;tom5          </span><br><span class="line">row1          column&#x3D;f1:, timestamp&#x3D;1586336405057, value&#x3D;tom4          </span><br><span class="line">row1          column&#x3D;f1:, timestamp&#x3D;1586336401776, value&#x3D;tom3          </span><br><span class="line">row1          column&#x3D;f1:, timestamp&#x3D;1586336398687, value&#x3D;tom2</span><br><span class="line"></span><br><span class="line">hbase(main):020:0&gt; get &#39;ns1:t3&#39;,&#39;row1&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;4&#125;</span><br><span class="line">COLUMN                        CELL</span><br><span class="line">f1:                           timestamp&#x3D;1586336766575, value&#x3D;tom5</span><br><span class="line">f1:                           timestamp&#x3D;1586336405057, value&#x3D;tom4</span><br><span class="line">f1:                           timestamp&#x3D;1586336401776, value&#x3D;tom3</span><br></pre></td></tr></table></figure></div>

<p>可以看到通过原生扫描可以看到所有的历史记录。接着我们删除其中的一条记录。再来看变化。可以发现get查看自动补上一条历史的版本。而原生扫描则会显示type=Delete</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):025:0&gt; delete &#39;ns1:t3&#39;,&#39;row1&#39;,&#39;f1&#39;,1586336405057</span><br><span class="line"></span><br><span class="line">hbase(main):026:0&gt; get &#39;ns1:t3&#39;,&#39;row1&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;4&#125;</span><br><span class="line">COLUMN                        CELL</span><br><span class="line">f1:                           timestamp&#x3D;1586336766575, value&#x3D;tom5</span><br><span class="line">f1:                           timestamp&#x3D;1586336401776, value&#x3D;tom3</span><br><span class="line">f1:                           timestamp&#x3D;1586336398687, value&#x3D;tom2                       </span><br><span class="line"></span><br><span class="line">hbase(main):027:0&gt; scan &#39;ns1:t3&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;10&#125;</span><br><span class="line">ROW                           COLUMN+CELL</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586336766575, value&#x3D;tom5</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586336405057, type&#x3D;Delete</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586336405057, value&#x3D;tom4</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586336401776, value&#x3D;tom3</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586336398687, value&#x3D;tom2</span><br></pre></td></tr></table></figure></div>



<h2 id="八、其他参数"><a href="#八、其他参数" class="headerlink" title="八、其他参数"></a>八、其他参数</h2><h3 id="8-1-TTL-存活时间"><a href="#8-1-TTL-存活时间" class="headerlink" title="8.1 TTL 存活时间"></a>8.1 TTL 存活时间</h3><p>定时清理数据。</p>
<p>超过该时间，原生扫描也扫不到数据。</p>
<p>TTL单位秒。TTL=&gt;10</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定TTL创建表</span><br><span class="line">hbase(main):031:0&gt; create &#39;ns1:t4&#39;,&#123;NAME&#x3D;&gt;&#39;f1&#39;,TTL&#x3D;&gt;10,VERSIONS&#x3D;&gt;3&#125;</span><br><span class="line"># 这里我们插入一条记录</span><br><span class="line">hbase(main):032:0&gt; put &#39;ns1:t4&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom1&#39;</span><br><span class="line"># 前10秒查询</span><br><span class="line">hbase(main):033:0&gt; get &#39;ns1:t4&#39;,&#39;row1&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;4&#125;</span><br><span class="line">COLUMN                         CELL</span><br><span class="line">f1:                           timestamp&#x3D;1586337429892, value&#x3D;tom1                         </span><br><span class="line"># 10秒后查询</span><br><span class="line">hbase(main):034:0&gt; get &#39;ns1:t4&#39;,&#39;row1&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;4&#125;</span><br><span class="line">COLUMN                         CELL</span><br><span class="line"># 通过原生原生扫描可以看到数据</span><br><span class="line">hbase(main):035:0&gt; scan &#39;ns1:t4&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;10&#125;</span><br><span class="line">ROW                            COLUMN+CELL</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586337429892, value&#x3D;tom1             </span><br><span class="line"># 刷新，写入磁盘！</span><br><span class="line">hbase(main):036:0&gt; flush &#39;ns1:t4&#39;</span><br><span class="line"># 再次原生扫描，发现数据已经消失了。</span><br><span class="line">hbase(main):037:0&gt; scan &#39;ns1:t4&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;10&#125;</span><br><span class="line">ROW                            COLUMN+CELL                                                                           </span><br><span class="line">0 row(s) in 0.0240 seconds</span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-KEEP-DELETED-CELLS-保存删除记录"><a href="#8-2-KEEP-DELETED-CELLS-保存删除记录" class="headerlink" title="8.2 KEEP_DELETED_CELLS 保存删除记录"></a>8.2 KEEP_DELETED_CELLS 保存删除记录</h3><p>删除key之后，数据是否还保留。KEEP_DELETED_CELLS=&gt;true</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定KEEP_DELETED_CELLS创建表</span><br><span class="line">hbase(main):038:0&gt; create &#39;ns1:t5&#39;,&#123;NAME&#x3D;&gt;&#39;f1&#39;,TTL&#x3D;&gt;10,VERSIONS&#x3D;&gt;3,KEEP_DELETED_CELLS&#x3D;&gt;true&#125;</span><br><span class="line"># 添加一条记录</span><br><span class="line">hbase(main):039:0&gt; put &#39;ns1:t5&#39;,&#39;row1&#39;,&#39;f1&#39;,&#39;tom1&#39;</span><br><span class="line"># 10秒后查看，发现数据消失了</span><br><span class="line">hbase(main):040:0&gt; get &#39;ns1:t5&#39;,&#39;row1&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,VERSIONS&#x3D;&gt;4&#125;</span><br><span class="line">COLUMN                         CELL                                                                                  </span><br><span class="line">0 row(s) in 0.0140 seconds</span><br><span class="line"># 通过原生扫描，发现数据存在</span><br><span class="line">hbase(main):041:0&gt; scan &#39;ns1:t5&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;10&#125;</span><br><span class="line">ROW                            COLUMN+CELL</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586337719189, value&#x3D;tom1             </span><br><span class="line"># 刷新操作</span><br><span class="line">hbase(main):042:0&gt; flush &#39;ns1:t4&#39;</span><br><span class="line">0 row(s) in 0.2030 seconds</span><br><span class="line"># 再次原生扫描，发现确实记录还存在</span><br><span class="line">hbase(main):043:0&gt; scan &#39;ns1:t5&#39;,&#123;COLUMN&#x3D;&gt;&#39;f1&#39;,RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;10&#125;</span><br><span class="line">ROW                            COLUMN+CEL</span><br><span class="line">row1                          column&#x3D;f1:, timestamp&#x3D;1586337719189, value&#x3D;tom1</span><br></pre></td></tr></table></figure></div>



<h2 id="九、调优操作"><a href="#九、调优操作" class="headerlink" title="九、调优操作"></a>九、调优操作</h2><p>对结果不影响，对性能有影响。</p>
<h3 id="9-1-扫描器缓存（行级）"><a href="#9-1-扫描器缓存（行级）" class="headerlink" title="9.1 扫描器缓存（行级）"></a>9.1 扫描器缓存（行级）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">scan.setCaching(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="9-2-扫描器批处理（列级）"><a href="#9-2-扫描器批处理（列级）" class="headerlink" title="9.2 扫描器批处理（列级）"></a>9.2 扫描器批处理（列级）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">scan.setBatch(<span class="number">5</span>);	<span class="comment">// 每次next返回5列数据</span></span><br></pre></td></tr></table></figure></div>



<h3 id="9-3-Filter-过滤器"><a href="#9-3-Filter-过滤器" class="headerlink" title="9.3 Filter 过滤器"></a>9.3 Filter 过滤器</h3><h4 id="9-3-1-行过滤器"><a href="#9-3-1-行过滤器" class="headerlink" title="9.3.1 行过滤器"></a>9.3.1 行过滤器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小于等于 'row0100'</span></span><br><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">RowFilter rowFilter = <span class="keyword">new</span> RowFilter(</span><br><span class="line">    CompareFilter.CompareOp.LESS_OR_EQUAL, </span><br><span class="line">    <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"row0100"</span>)));</span><br><span class="line">scan.setFilter(rowFilter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-2-列族过滤器"><a href="#9-3-2-列族过滤器" class="headerlink" title="9.3.2 列族过滤器"></a>9.3.2 列族过滤器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">FamilyFilter filter = <span class="keyword">new</span> FamilyFilter(</span><br><span class="line">    CompareFilter.CompareOp.LESS,</span><br><span class="line">    <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"f2"</span>)));	<span class="comment">// 二进制对比器</span></span><br><span class="line">scan.setFilter(filter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-3-列过滤器"><a href="#9-3-3-列过滤器" class="headerlink" title="9.3.3 列过滤器"></a>9.3.3 列过滤器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">QualifierFilter colfilter = <span class="keyword">new</span> QualifierFilter(</span><br><span class="line">    CompareFilter.CompareOp.EQUAL, </span><br><span class="line">    <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"id"</span>)));</span><br><span class="line">scan.setFilter(colfilter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-4-值过滤器"><a href="#9-3-4-值过滤器" class="headerlink" title="9.3.4 值过滤器"></a>9.3.4 值过滤器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">ValueFilter filter = <span class="keyword">new</span> ValueFilter(</span><br><span class="line">    CompareFilter.CompareOp.EQUAL,</span><br><span class="line">    <span class="keyword">new</span> SubstringComparator(<span class="string">"to"</span>));		<span class="comment">// 子串对比器</span></span><br><span class="line">scan.setFilter(filter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-5-依赖过滤器"><a href="#9-3-5-依赖过滤器" class="headerlink" title="9.3.5 依赖过滤器"></a>9.3.5 依赖过滤器</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">DependentColumnFilter filter = <span class="keyword">new</span> DependentColumnFilter(</span><br><span class="line">    Bytes.toBytes(<span class="string">"f2"</span>),		<span class="comment">// 列族</span></span><br><span class="line">    Bytes.toBytes(<span class="string">"addr"</span>),		<span class="comment">// 列</span></span><br><span class="line">    <span class="keyword">true</span>,						<span class="comment">// 列是否应在之后丢弃</span></span><br><span class="line">    CompareFilter.CompareOp.NOT_EQUAL,		<span class="comment">// 对比操作</span></span><br><span class="line">    <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"beijing"</span>)));	<span class="comment">// 对比器</span></span><br><span class="line">scan.setFilter(filter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-6-单列值过滤器"><a href="#9-3-6-单列值过滤器" class="headerlink" title="9.3.6 单列值过滤器"></a>9.3.6 单列值过滤器</h4><p>单列值value过滤，对列上的value进行过滤，不符合整行删除。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">SingleColumnValueFilter filter = <span class="keyword">new</span> SingleColumnValueFilter(</span><br><span class="line">    Bytes.toBytes(<span class="string">"f2"</span>,Bytes.toBytes(<span class="string">"name"</span>),</span><br><span class="line">    CompareFilter.CompareOp.NOT_EQUAL),</span><br><span class="line">    BinaryComparator(Bytes.toBytes(<span class="string">"tom2.1"</span>)));</span><br><span class="line">scan.setFilter(filter);</span><br><span class="line"><span class="comment">// SingleColumnValueExcludeFilter	单列值排除过滤器,去掉过滤使用的列,对列的值进行过滤</span></span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-7-前缀过滤器"><a href="#9-3-7-前缀过滤器" class="headerlink" title="9.3.7 前缀过滤器"></a>9.3.7 前缀过滤器</h4><p>前缀过滤,是rowkey过滤. where rowkey like ‘row22%’</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">PrefixFilter filter = <span class="keyword">new</span> PrefixFilter(Bytes.toBytes(<span class="string">"row222"</span>));</span><br><span class="line">scan.setFilter(filter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-8-分页过滤器"><a href="#9-3-8-分页过滤器" class="headerlink" title="9.3.8 分页过滤器"></a>9.3.8 分页过滤器</h4><p>分页过滤,是rowkey过滤,在region上扫描时，对每次page设置的大小。</p>
<p>返回到到client，涉及到每个Region结果的合并。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">PageFilter filter = <span class="keyword">new</span> PageFilter(<span class="number">10</span>);</span><br><span class="line">scan.setFilter(filter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-8-KeyOnly-过滤器"><a href="#9-3-8-KeyOnly-过滤器" class="headerlink" title="9.3.8 KeyOnly 过滤器"></a>9.3.8 KeyOnly 过滤器</h4><p>KeyOnly过滤器，只提取key,丢弃value.</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">KeyOnlyFilter filter = <span class="keyword">new</span> KeyOnlyFilter();</span><br><span class="line">scan.setFilter(filter);</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-9-FilterList-过滤器列表"><a href="#9-3-9-FilterList-过滤器列表" class="headerlink" title="9.3.9 FilterList 过滤器列表"></a>9.3.9 FilterList 过滤器列表</h4><p>复杂查询</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComboFilter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    TableName tname = TableName.valueOf(<span class="string">"ns1:t7"</span>);</span><br><span class="line">    Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//where ... f2:age &lt;= 13</span></span><br><span class="line">    SingleColumnValueFilter ftl = <span class="keyword">new</span> SingleColumnValueFilter(</span><br><span class="line">        Bytes.toBytes(<span class="string">"f2"</span>),</span><br><span class="line">        Bytes.toBytes(<span class="string">"age"</span>),</span><br><span class="line">        CompareFilter.CompareOp.LESS_OR_EQUAL,</span><br><span class="line">        <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"13"</span>))</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//where ... f2:name like %t</span></span><br><span class="line">    SingleColumnValueFilter ftr = <span class="keyword">new</span> SingleColumnValueFilter(</span><br><span class="line">        Bytes.toBytes(<span class="string">"f2"</span>),</span><br><span class="line">        Bytes.toBytes(<span class="string">"name"</span>),</span><br><span class="line">        CompareFilter.CompareOp.EQUAL,</span><br><span class="line">        <span class="keyword">new</span> RegexStringComparator(<span class="string">"^t"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//ft</span></span><br><span class="line">    FilterList ft = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL);</span><br><span class="line">    ft.addFilter(ftl);</span><br><span class="line">    ft.addFilter(ftr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//where ... f2:age &gt; 13</span></span><br><span class="line">    SingleColumnValueFilter fbl = <span class="keyword">new</span> SingleColumnValueFilter(</span><br><span class="line">        Bytes.toBytes(<span class="string">"f2"</span>),</span><br><span class="line">        Bytes.toBytes(<span class="string">"age"</span>),</span><br><span class="line">        CompareFilter.CompareOp.GREATER,</span><br><span class="line">        <span class="keyword">new</span> BinaryComparator(Bytes.toBytes(<span class="string">"13"</span>))</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//where ... f2:name like %t</span></span><br><span class="line">    SingleColumnValueFilter fbr = <span class="keyword">new</span> SingleColumnValueFilter(</span><br><span class="line">        Bytes.toBytes(<span class="string">"f2"</span>),</span><br><span class="line">        Bytes.toBytes(<span class="string">"name"</span>),</span><br><span class="line">        CompareFilter.CompareOp.EQUAL,</span><br><span class="line">        <span class="keyword">new</span> RegexStringComparator(<span class="string">"t$"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//ft</span></span><br><span class="line">    FilterList fb = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL);</span><br><span class="line">    fb.addFilter(fbl);</span><br><span class="line">    fb.addFilter(fbr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FilterList fall = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ONE);</span><br><span class="line">    fall.addFilter(ft);</span><br><span class="line">    fall.addFilter(fb);</span><br><span class="line"></span><br><span class="line">    scan.setFilter(fall);</span><br><span class="line">    Table t = conn.getTable(tname);</span><br><span class="line">    ResultScanner rs = t.getScanner(scan);</span><br><span class="line">    Iterator&lt;Result&gt; it = rs.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Result r = it.next();</span><br><span class="line">        <span class="keyword">byte</span>[] f1id = r.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"id"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] f2id = r.getValue(Bytes.toBytes(<span class="string">"f2"</span>), Bytes.toBytes(<span class="string">"id"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] f1name = r.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"name"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] f2name = r.getValue(Bytes.toBytes(<span class="string">"f2"</span>), Bytes.toBytes(<span class="string">"name"</span>));</span><br><span class="line">        System.out.println(f1id + <span class="string">" : "</span> + f2id + <span class="string">" : "</span> + Bytes.toString(f1name) + <span class="string">" : "</span> + Bytes.toString(f2name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="9-3-10-BloomFilter-布隆过滤器"><a href="#9-3-10-BloomFilter-布隆过滤器" class="headerlink" title="9.3.10 BloomFilter 布隆过滤器"></a>9.3.10 BloomFilter 布隆过滤器</h4><h2 id="十、计数器"><a href="#十、计数器" class="headerlink" title="十、计数器"></a>十、计数器</h2><p>除了以上讨论的功能之外, HBase还有一个高级功能:计数器(counter)。许多收集统计信息的应用有点击流或在线广告意见,这些应用需要被收集到日志文件中用于后续的分析。用户可以使用计数器做实时统计,从而放弃延时较高的批量处理操作。</p>
<p>特点：迅速快捷！原子性！</p>
<p><strong>Shell</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase&gt;incr &#39;ns1:t8&#39;,&#39;row1&#39;,&#39;f1:click&#39;,1</span><br><span class="line">$hbase&gt;get_counter &#39;ns1:t8&#39;,&#39;row1&#39;,&#39;f1:click&#39;</span><br></pre></td></tr></table></figure></div>

<p><strong>JAVA API</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIncr</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    TableName tname = TableName.valueOf(<span class="string">"ns1:t8"</span>);</span><br><span class="line">    Table t = conn.getTable(tname);</span><br><span class="line">    Increment incr = <span class="keyword">new</span> Increment(Bytes.toBytes(<span class="string">"row1"</span>));</span><br><span class="line">    incr.addColumn(Bytes.toBytes(<span class="string">"f1"</span>),Bytes.toBytes(<span class="string">"daily"</span>),<span class="number">1</span>);</span><br><span class="line">    incr.addColumn(Bytes.toBytes(<span class="string">"f1"</span>),Bytes.toBytes(<span class="string">"weekly"</span>),<span class="number">10</span>);</span><br><span class="line">    incr.addColumn(Bytes.toBytes(<span class="string">"f1"</span>),Bytes.toBytes(<span class="string">"monthly"</span>),<span class="number">100</span>);</span><br><span class="line">    t.increment(incr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="十一、协处理器"><a href="#十一、协处理器" class="headerlink" title="十一、协处理器"></a>十一、协处理器</h2><p>批处理的，等价于存储过程或者触发器。</p>
<p><a href="/postImages/%E5%8D%8F%E5%A4%84%E7%90%86%E5%99%A8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%8D%8F%E5%A4%84%E7%90%86%E5%99%A8.png" class="lazyload"></a></p>
<p><strong>Observer</strong></p>
<p>观察者,类似于触发器，基于事件。发生动作时，回调相应方法。</p>
<ul>
<li><p>RegionObserver：RegionServer区域观察者。system –&gt; user[加载顺序]</p>
</li>
<li><p>MasterObserver：Master节点。</p>
</li>
<li><p>WAlObserver</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[hbase-site.xml]</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.coprocessor.region.classes<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>coprocessor.RegionObserverExample, coprocessor.AnotherCoprocessor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.coprocessor.master.classes<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>coprocessor.MasterObserverExample<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.coprocessor.wal.classes<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>coprocessor.WALObserverExample, bar.foo.MyWALObserver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p><strong>Endpoint</strong></p>
<p>终端,类似于存储过程。</p>
<p><strong>步骤</strong>：</p>
<ol>
<li><p>添加依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写自定义观察者</p>
<p>pre开头的就是操作前触发的，post就是操作后触发。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.hbasedemo.coprocessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CoprocessorEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Durability;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Get;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.coprocessor.ObserverContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.regionserver.wal.WALEdit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegionObserver</span> <span class="keyword">extends</span> <span class="title">BaseRegionObserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outInfo</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"/home/centos/coprocessor.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">            fw.write(str + <span class="string">"\r\n"</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每个区域都经过</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(CoprocessorEnvironment e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.start(e);</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.start()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOpen</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.preOpen(e);</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.preOpen()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOpen</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postOpen(e);</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.postOpen()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preGetOp</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Get get, List&lt;Cell&gt; results)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.preGetOp(e, get, results);</span><br><span class="line">        String rowkey = Bytes.toString(get.getRow());</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.preGetOp() : rowkey = "</span> + rowkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postGetOp</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Get get, List&lt;Cell&gt; results)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postGetOp(e, get, results);</span><br><span class="line">        String rowkey = Bytes.toString(get.getRow());</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.postGetOp() : rowkey = "</span> + rowkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prePut</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Put put, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.prePut(e, put, edit, durability);</span><br><span class="line">        String rowkey = Bytes.toString(put.getRow());</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.prePut() : rowkey = "</span> + rowkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postPut</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Put put, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postPut(e, put, edit, durability);</span><br><span class="line">        String rowkey = Bytes.toString(put.getRow());</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.postPut() : rowkey = "</span> + rowkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDelete</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Delete delete, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.preDelete(e, delete, edit, durability);</span><br><span class="line">        String rowkey = Bytes.toString(delete.getRow());</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.preDelete() : rowkey = "</span> + rowkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDelete</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Delete delete, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postDelete(e, delete, edit, durability);</span><br><span class="line">        String rowkey = Bytes.toString(delete.getRow());</span><br><span class="line">        outInfo(<span class="string">"MyRegionObserver.postDelete() : rowkey = "</span> + rowkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注册协处理器并分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.coprocessor.region.classes<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn.wangbowen.hbasedemo.coprocessor.MyRegionObserver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>导出jar包，上传并分发hbase集群的hbase/lib目录下</p>
</li>
<li><p>重启集群生效</p>
</li>
</ol>
<h2 id="十二、RowKey设计原则"><a href="#十二、RowKey设计原则" class="headerlink" title="十二、RowKey设计原则"></a>十二、RowKey设计原则</h2><p>xx,yyy,zzz</p>
<p>利用字段，进行哈希处理，添加前缀，注意分散。不要以时间轴做。</p>
<p>根据实际业务需求，设计组成rowkey的字段的前后顺序。</p>
<h2 id="十三、Hbase-集成-Hive"><a href="#十三、Hbase-集成-Hive" class="headerlink" title="十三、Hbase 集成 Hive"></a>十三、Hbase 集成 Hive</h2><p>Hive提供了更丰富的SQL查询功能，而Hbase则有者优秀的存储结构，因此可以利用Hive来查询Hbase。</p>
<p><strong>集成步骤</strong></p>
<ol>
<li><p>将hbase有关jar包放到hive的lib中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase-server-2.2.4.jar</span><br><span class="line">hbase-client-2.2.4.jar</span><br><span class="line">hbase-it-2.2.4.jar</span><br><span class="line">hbase-hadoop2-compat-2.2.4.jar</span><br><span class="line">hbase-hadoop-compat-2.2.4.jar</span><br><span class="line">hbase-common-2.2.4.jar</span><br><span class="line"></span><br><span class="line"># 这个不在Hbase的lib下，下载地址：http:&#x2F;&#x2F;www.java2s.com&#x2F;Code&#x2F;Jar&#x2F;h&#x2F;Downloadhighscalelib10jar.htm</span><br><span class="line"></span><br><span class="line">high-scale-lib-1.1.1-sources.jar</span><br></pre></td></tr></table></figure></div>

<p><strong>复制命令（high-scakle包要自己下载上传）</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp hbase-server-2.2.4.jar hbase-client-2.2.4.jar hbase-it-2.2.4.jar hbase-hadoop2-compat-2.2.4.jar hbase-hadoop-compat-2.2.4.jar &#x2F;soft&#x2F;hive&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>hive的conf下在hive-site.xml文件中配置Zookeeper，hive通过这个参数去连接HBase集群。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201,s202,s203<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在hbase中建立一张表（可以参考上面的创表、插入数据）</p>
</li>
<li><p>启动hive,建立联系（之前要先启动mysql，因为元数据在里面）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create external table t1(</span><br><span class="line">key string,</span><br><span class="line">name string,</span><br><span class="line">id int</span><br><span class="line">)  </span><br><span class="line">STORED BY &#39;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#39; </span><br><span class="line">WITH SERDEPROPERTIES(&quot;hbase.columns.mapping&quot; &#x3D; &quot;:key,f1:name,f1:id&quot;) </span><br><span class="line">TBLPROPERTIES(&quot;hbase.table.name&quot; &#x3D; &quot;ns1:t1&quot;);</span><br></pre></td></tr></table></figure></div>

<p>创建之后HBase不存在这张表，这张表是在HIVE中的。<br>用普通的创建外部表的方式，创建出来的外部表是没有数据的，因为你的HIVE中的数据存放在HBase中而不是在HIVE中。</p>
</li>
<li><p>查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; select * from t1;</span><br><span class="line">row1	tom	100</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>HBase</category>
      </categories>
      <tags>
        <tag>HBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop学习笔记（一）Hadoop集群</title>
    <url>/2020/02/13/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Hadoop%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记（一）Hadoop集群"><a href="#Hadoop学习笔记（一）Hadoop集群" class="headerlink" title="Hadoop学习笔记（一）Hadoop集群"></a>Hadoop学习笔记（一）Hadoop集群</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Hadoop集群有三种模式：</p>
<ul>
<li>本地模式：即系统自身的文件系统。</li>
<li>伪分布式模式：即在一台机子上运行所有角色。</li>
<li>完全分布式模式：根据划分，不同机子拥有不同的角色来进行协同工作。</li>
</ul>
<h2 id="二、伪分布式搭建"><a href="#二、伪分布式搭建" class="headerlink" title="二、伪分布式搭建"></a>二、伪分布式搭建</h2><ol>
<li><p>建虚拟机</p>
</li>
<li><p>配置联网</p>
<ul>
<li><p>查看当前网卡名称 (ip addr)</p>
</li>
<li><p>进入网络配置文件的目录(cd /etc/sysconfig/network-scripts) (ls)</p>
</li>
<li><p>编辑网络配置文件(vi ifcfg-ens33)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改配置文件：</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">添加：</span><br><span class="line">IPADDR&#x3D;本机IP</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;NAT模式网关IP</span><br><span class="line">DNS1&#x3D;8.8.8.8</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>再重新启动网络配置(service network restart)</p>
</li>
<li><p>测试网络是否畅通(本地PING 虚拟机IP，虚拟机ping外网)</p>
</li>
</ul>
</li>
<li><p>更改主机名</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hostname</span><br><span class="line">将里面的内容替换为需要的主机名</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置主机名(域名)映射文件，整个集群都写上去</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line">新建：</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">192.168.xxx.xxx XXX</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装JDK1.8，配置环境变量（Hadoop是JAVA开发）</p>
</li>
<li><p>解压Hadoop（这里使用hadoop-3.0）</p>
</li>
<li><p>修改Hadoop配置文件 </p>
<ul>
<li>修改 vi hadoop-env.sh 的JAVA环境变量为自己的</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/home/hadoop/app/jdk1.8.0_131</span><br></pre></td></tr></table></figure></div>

<ul>
<li>修改 vi core-site.xml <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hdfs://xxx其中hdfs是协议，xxx是核心主机，默认端口号9000 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://weekend01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Hadoop的临时工作目录存放数据，默认/tmp/hadoop-$&#123;user.name&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/app/hadoop-3.1.2/tmp/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>修改 vi hdfs-site.xml <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定HDFS副本的数量，默认是3份。副本数不要超过节点数量。这里只有一台机器所以写1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>修改 vi mapred-site.xml<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定mr运行时框架，这里指定在yarn上，默认是local在本地跑 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>修改 vi yarn-site.xml <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定YARN的老大（ResourceManager）的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>weekend01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- reduce获取数据的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>关闭防火墙（CentOS7如下）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙随开机启动</span></span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;sudo systemctl <span class="built_in">enable</span> firewalld.service	//<span class="string">"开机启动"</span>启用</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;sudo systemctl <span class="built_in">disable</span> firewalld.service	//<span class="string">"开机自启"</span>禁用</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;sudo systemctl start firewalld.service	//启动防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;sudo systemctl stop firewalld.service		//停止防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&gt;sudo systemctl status firewalld.service	//查看防火墙状态</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置Hadoop环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;jdk1.8.0_131</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop-3.1.2</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$PATH:$HADOOP_HOME&#x2F;bin:$PATH:$HADOOP_HOME&#x2F;sbin</span><br><span class="line">更新配置</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动Hadoop</p>
<ul>
<li><p>初始化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首次启动Hadoop集群时，必须对其HDFS进行格式化。格式化本质上是进行一些清理和准备工作，因为此时的HDFS在物理上还是不存在的。格式化只能在主角色（NameNode）所在的机器上进行。</span><br><span class="line"></span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs(namenode + datanode + secondarynamenode):  </span><br><span class="line">start-dfs.sh</span><br><span class="line">yarn资源管理调度(resourcemanager + nodemanager):  </span><br><span class="line">start-yarn.sh</span><br><span class="line"></span><br><span class="line">TIP:如果遇到Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).问题，搜索文章：在CentOS 7中配置免密码登录SSH时遇到错误</span><br><span class="line"></span><br><span class="line">还有一个是启动所有进程（不推荐）</span><br><span class="line">start-all.sh</span><br><span class="line">关闭所有进程</span><br><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<ol start="11">
<li><p>查看进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt; jps</span><br><span class="line">显示5个进程：</span><br><span class="line">2960 ResourceManager</span><br><span class="line">3392 Jps</span><br><span class="line">2550 DataNode</span><br><span class="line">3079 NodeManager</span><br><span class="line">2440 NameNode（仅仅是一个目录的功能）</span><br><span class="line">2734 SecondaryNameNode</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<ul>
<li><p>通过WEB-UI查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">角色							   URL						说明</span><br><span class="line">NameNode						http:&#x2F;&#x2F;NN_host:port&#x2F;	默认端口是9870</span><br><span class="line">ResourceManager					http:&#x2F;&#x2F;RM_host:port&#x2F;	默认端口是8088</span><br><span class="line">MapReduce Job History Server	http:&#x2F;&#x2F;JHS_host:port&#x2F;	默认端口是19888</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>配置SSH</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)检查是否安装了ssh相关软件包(openssh-server + openssh-clients + openssh)</span><br><span class="line">$yum list installed | grep ssh</span><br><span class="line"></span><br><span class="line">2)检查是否启动了sshd进程</span><br><span class="line">$&gt;ps -Af | grep sshd</span><br><span class="line"></span><br><span class="line">3)在client侧生成公私秘钥对。</span><br><span class="line">$&gt;ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">4)生成~&#x2F;.ssh文件夹，里面有id_rsa(私钥) + id_rsa.pub(公钥)</span><br><span class="line"></span><br><span class="line">5)追加公钥到~&#x2F;.ssh&#x2F;authorized_keys文件中(文件名、位置固定)</span><br><span class="line">$&gt;cd ~&#x2F;.ssh</span><br><span class="line">$&gt;cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line">6)修改authorized_keys的权限为644.</span><br><span class="line">$&gt;chmod 644 authorized_keys</span><br><span class="line"></span><br><span class="line">7)测试</span><br><span class="line">$&gt;ssh localhost</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、完全分布式搭建"><a href="#三、完全分布式搭建" class="headerlink" title="三、完全分布式搭建"></a>三、完全分布式搭建</h2><ol>
<li><p>将上述伪分布式机器克隆3台出来（其中01作为名称节点，02-04作为数据节点），记得设置文件夹共享（默认是关闭：设置，选项，文件夹共享，总是启用）</p>
</li>
<li><p>修改hostname和ip地址文件还有host映射</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo vi &#x2F;etc&#x2F;hostname # 修改主机名</span><br><span class="line"></span><br><span class="line">$sudo vi &#x2F;etc&#x2F;hosts # 新增4台机子的IP以及对应的主机名</span><br><span class="line"></span><br><span class="line">$sudo vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ensxxxx   # IP文件目录</span><br><span class="line"></span><br><span class="line">$service network restart  # 重启网络服务</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重新配置SSH</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 在s201机器上删除所有机器上的SSH文件</span><br><span class="line">$ssh s203 rm -r &#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;*</span><br><span class="line">$ssh s204 rm -r &#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;*</span><br><span class="line">$ssh s205 rm -r &#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;*</span><br><span class="line">$rm -r .ssh&#x2F;*</span><br><span class="line"></span><br><span class="line">2）s201机器生成密钥对，并通过SCP发送给其余机器(不用sudo)</span><br><span class="line">$ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"># 追加公钥到authorized_keys</span><br><span class="line">$cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">$chmod 644 authorized_keys</span><br><span class="line"># 分发</span><br><span class="line">$scp id_rsa.pub wbw@s201:&#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$scp id_rsa.pub wbw@s202:&#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$scp id_rsa.pub wbw@s203:&#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$scp id_rsa.pub wbw@s204:&#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置完全分布（目录为${hadoop_home}/etc/hadoop/）</p>
<ul>
<li><p>core-site.xml（根据集群规划，S201为名称节点）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://s201/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--- 配置新的本地目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>hdfs-site.xml（因为这里有3个数据节点，所以副本改成3）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>mapred-site.xml（不变）</p>
</li>
<li><p>yarn-site.xml（根据集群规划，S201为resourcemanager）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>slaves（workers）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">清空里面的所有内容！根据集群规划，数据节点在s202,s203,s204上。然后添加：</span><br><span class="line">s202</span><br><span class="line">s203</span><br><span class="line">s204</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>hadoop-env.sh（Hadoop的JAVA环境，如果之前没有配的化，要记得设置）</p>
</li>
<li><p>将整个配置文件夹分发到其余机器对应的配置文件夹里</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r full wbw@s202:&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;</span><br><span class="line">scp -r full wbw@s203:&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;</span><br><span class="line">scp -r full wbw@s204:&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;</span><br><span class="line"></span><br><span class="line">!!!注意这里的full是我自己的文件夹，正常应该只有一个名为hadoop的文件夹!!!</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>剩余数据清理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TIP:如果之前有用过Hadoop（比如这个是克隆来的，而克隆之前用过了。所以对一些文件进行清理后，重新初始化）</span><br><span class="line"></span><br><span class="line">1)删除临时目录文件</span><br><span class="line">进入主目录下的临时文件夹</span><br><span class="line">$cd &#x2F;tmp</span><br><span class="line">删除hadoop的临时文件（用SSH操作其余机器）</span><br><span class="line">$rm -rf hadoop-wbw</span><br><span class="line">$ssh s202 rm -rf &#x2F;tmp&#x2F;hadoop-wbw</span><br><span class="line">$ssh s203 rm -rf &#x2F;tmp&#x2F;hadoop-wbw</span><br><span class="line">$ssh s204 rm -rf &#x2F;tmp&#x2F;hadoop-wbw</span><br><span class="line"></span><br><span class="line">2)删除Hadoop日志文件</span><br><span class="line">进入Hadoop安装目录下的logs文件夹</span><br><span class="line">$cd &#x2F;soft&#x2F;hadoop&#x2F;logs&#x2F;</span><br><span class="line">删除所有文件（用SSH操作其余机器）</span><br><span class="line">$rm -rf *</span><br><span class="line">$ssh s202 rm -rf &#x2F;soft&#x2F;hadoop&#x2F;logs&#x2F;*</span><br><span class="line">$ssh s203 rm -rf &#x2F;soft&#x2F;hadoop&#x2F;logs&#x2F;*</span><br><span class="line">$ssh s204 rm -rf &#x2F;soft&#x2F;hadoop&#x2F;logs&#x2F;*</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化文件系统并启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hadoop namenode -format</span><br><span class="line">$start-all.sh</span><br><span class="line"># 查看进程</span><br><span class="line">$jps</span><br><span class="line"></span><br><span class="line">s201:</span><br><span class="line">2178 ResourceManager</span><br><span class="line">1964 SecondaryNameNode</span><br><span class="line">2478 Jps</span><br><span class="line">1743 NameNode</span><br><span class="line"></span><br><span class="line">s202:</span><br><span class="line">1825 Jps</span><br><span class="line">1699 NodeManager</span><br><span class="line">1588 DataNode</span><br><span class="line"></span><br><span class="line">s203:</span><br><span class="line">1536 NodeManager</span><br><span class="line">1425 DataNode</span><br><span class="line">1650 Jps</span><br><span class="line"></span><br><span class="line">s204:</span><br><span class="line">1522 NodeManager</span><br><span class="line">1411 DataNode</span><br><span class="line">1636 Jps</span><br><span class="line"></span><br><span class="line">发现启动成功！再次通过WEB-UI查看，发现确实启动成功！(注意关闭防火墙)</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="四、启动命令"><a href="#四、启动命令" class="headerlink" title="四、启动命令"></a>四、启动命令</h2><h3 id="4-1-批量启动节点"><a href="#4-1-批量启动节点" class="headerlink" title="4.1 批量启动节点"></a>4.1 批量启动节点</h3><p>Hadoop的一些启动脚本里面执行的内容（如果启动失败，可以查看日志，即Hadoop安装目录下的logs文件夹）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;start-all.sh		&#x2F;&#x2F;start-dfs.sh + start-yarn.sh</span><br><span class="line">$&gt;start-dfs.sh		&#x2F;&#x2F;hadoop-daemon.sh start namenode</span><br><span class="line">					&#x2F;&#x2F;hadoop-daemons.sh start datanode</span><br><span class="line">$&gt;start-yarn.sh		&#x2F;&#x2F;yarn-daemon.sh start resourcemanager</span><br><span class="line">					&#x2F;&#x2F;yarn-daemons.sh start nodemanager</span><br></pre></td></tr></table></figure></div>



<h3 id="4-2-单独启动节点"><a href="#4-2-单独启动节点" class="headerlink" title="4.2 单独启动节点"></a>4.2 单独启动节点</h3><ul>
<li><p>启动s201上的NameNode</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;sbin]$hadoop-daemon.sh start namenode</span><br><span class="line">WARNING: Use of this script to start HDFS daemons is deprecated.</span><br><span class="line">WARNING: Attempting to execute replacement &quot;hdfs --daemon start&quot; instead.</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;sbin]$xcall.sh &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5272 NameNode</span><br><span class="line">5342 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2587 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2395 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2360 Jps</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在s201上启动所有DataNode</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;sbin]$hadoop-daemons.sh start datanode</span><br><span class="line">WARNING: Use of this script to start HDFS daemons is deprecated.</span><br><span class="line">WARNING: Attempting to execute replacement &quot;hdfs --workers --daemon start&quot; instead.</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;sbin]$xcall.sh &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">7019 NameNode</span><br><span class="line">7246 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3837 Jps</span><br><span class="line">3775 DataNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3494 Jps</span><br><span class="line">3432 DataNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3459 Jps</span><br><span class="line">3397 DataNode</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在s202上停止DataNode</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;sbin]$ssh s202</span><br><span class="line">Last login: Thu Feb 13 18:41:00 2020 from s201</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw]$hadoop-daemon.sh stop datanode</span><br><span class="line">WARNING: Use of this script to stop HDFS daemons is deprecated.</span><br><span class="line">WARNING: Attempting to execute replacement &quot;hdfs --daemon stop&quot; instead.</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw]$exit</span><br><span class="line">logout</span><br><span class="line">Connection to s202 closed.</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;sbin]$xcall.sh &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">7286 Jps</span><br><span class="line">7019 NameNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3945 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3432 DataNode</span><br><span class="line">3516 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">3397 DataNode</span><br><span class="line">3480 Jps</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h2 id="五、节点的服役与退役"><a href="#五、节点的服役与退役" class="headerlink" title="五、节点的服役与退役"></a>五、节点的服役与退役</h2><p>在生产环境中，肯定会有新的节点加入，以及旧的节点退出。因此就需要进行一些设置。</p>
<h3 id="5-1-前期准备"><a href="#5-1-前期准备" class="headerlink" title="5.1 前期准备"></a>5.1 前期准备</h3><p>克隆一台虚拟机，模拟一个新的节点，这里选s204克隆到s205，然后对IP、主机名等信息进行设置。再到s201中更新hosts文件。但是，因为是克隆的，所以datanode并不纯净，因此需要进行清理操作。</p>
<ol>
<li><p>进入Hadoop安装目录，清空logs目录下的所有日志文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s205 &#x2F;soft&#x2F;hadoop&#x2F;logs]$rm -rf *</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>清空Hadoop临时文件目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s205 &#x2F;home&#x2F;wbw&#x2F;hadoop]$rm -rf *</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动datandoe以及nodemanager</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s205 &#x2F;home&#x2F;wbw]$hadoop-daemon.sh start datanode</span><br><span class="line">[wbw@s205 &#x2F;home&#x2F;wbw]$yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看进程，发现运行正常</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s205 &#x2F;home&#x2F;wbw]$jps</span><br><span class="line">1633 NodeManager</span><br><span class="line">1332 DataNode</span><br><span class="line">1726 Jps</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h3 id="5-2-添加新节点"><a href="#5-2-添加新节点" class="headerlink" title="5.2 添加新节点"></a>5.2 添加新节点</h3><ol>
<li><p>创建/修改dfs.include文件（这里暂时称它为白名单，即要想连接上NameNode就必须在这个名单上）中包含新节点名称,该文件在nn的本地目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$touch dfs.hosts</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$vi dfs.hosts</span><br><span class="line">添加如下内容：</span><br><span class="line">s202</span><br><span class="line">s203    </span><br><span class="line">s204    </span><br><span class="line">s205	&#x2F;&#x2F;新节点</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在hdfs-site.xml文件中添加属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>/soft/hadoop/etc/dfs.hosts<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在yarn-site.xml文件中添加属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.nodes.include-path<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/soft/hadoop/etc/dfs.hosts<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在NameNode上刷新节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs dfsadmin -refreshNodes</span><br><span class="line">$yarn rmadmin -refreshNodes</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在slaves(workers)文件中添加新节点ip(主机名)【该文件仅仅是让Hadoop启动的时候，向这些主机发送DataNode启动命令】</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop]$vi workers</span><br><span class="line">添加如下内容：</span><br><span class="line">s202</span><br><span class="line">s203</span><br><span class="line">s204</span><br><span class="line">s205</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单独启动新的节点中的datanode以及nodemanager（建议去新节点的机器上执行jps命令，查看进程状态。实验时，一开始新节点的nodemanager是启动的，但是添加完，在NameNode上刷新节点后，莫名停止了）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hadoop-daemon.sh start datanode</span><br><span class="line">$yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过WEB-UI查看状态，发现s205添加成功（也可以通过命令$hdfs dfsadmin -report查看）</p>
<p><a href="/postImages/%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B91.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B91.png" class="lazyload"></a></p>
</li>
</ol>
<h3 id="5-3-退役节点"><a href="#5-3-退役节点" class="headerlink" title="5.3 退役节点"></a>5.3 退役节点</h3><ol>
<li><p>添加退役节点的ip到黑名单，不要更新白名单。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$touch dfs.hosts.exclude</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$vi dfs.hosts.exclude</span><br><span class="line">添加如下内容：</span><br><span class="line">s204</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置hdfs-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.hosts.exclude<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>/soft/hadoop/etc/dfs.hosts.exclude<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置yarn-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.nodes.exclude-path<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/soft/hadoop/etc/dfs.hosts.exclude<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>刷新NameNode节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs dfsadmin -refreshNodes</span><br><span class="line">$yarn rmadmin -refreshNodes</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看WEB-UI状态（也可以通过命令$hdfs dfsadmin -report查看）</p>
<ul>
<li>绿勾消失了（状态为decommisstion in progress）</li>
</ul>
<p><a href="/postImages/%E9%80%80%E5%BD%B91.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%80%80%E5%BD%B91.png" class="lazyload"></a></p>
<ul>
<li>当所有的要退役的节点都报告为Decommissioned,数据转移工作已经完成。</li>
</ul>
<p><a href="/postImages/%E9%80%80%E5%BD%B92.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%80%80%E5%BD%B92.png" class="lazyload"></a></p>
</li>
<li><p>从白名单删除节点，并刷新节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs dfsadmin -refreshNodes</span><br><span class="line">$yarn rmadmin -refreshNodes</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看WEB-UI，确定退役成功。同时文件块也成功转移。</p>
<p><a href="/postImages/%E9%80%80%E5%BD%B93.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%80%80%E5%BD%B93.png" class="lazyload"></a></p>
<p><a href="/postImages/%E9%80%80%E5%BD%B94.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%80%80%E5%BD%B94.png" class="lazyload"></a></p>
</li>
<li><p>从slaves(workers)文件中删除退役节点</p>
</li>
</ol>
<h3 id="5-4-黑白名单"><a href="#5-4-黑白名单" class="headerlink" title="5.4 黑白名单"></a>5.4 黑白名单</h3><p>在新增和退役节点的时候，有一个黑白名单的设置。这里的黑白名单有一定的优先级：</p>
<p>include        // dfs.hosts<br>exclude        // dfs.hosts.include</p>
<table>
<thead>
<tr>
<th align="center">include</th>
<th align="center">exclude</th>
<th align="center">Interpretation</th>
</tr>
</thead>
<tbody><tr>
<td align="center">No</td>
<td align="center">No</td>
<td align="center">不能连接</td>
</tr>
<tr>
<td align="center">No</td>
<td align="center">Yes</td>
<td align="center">不能连接</td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center">No</td>
<td align="center">可以连接</td>
</tr>
<tr>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">可以连接，将会退役状态</td>
</tr>
</tbody></table>
<p>解释：Yes和No分别代表主机名是否存在于黑白名单中，以及DataNode能否连接到NameNode。</p>
<h2 id="六、配置第二名称节点"><a href="#六、配置第二名称节点" class="headerlink" title="六、配置第二名称节点"></a>六、配置第二名称节点</h2><p>修改hdfs-site.xml文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据实际主机IP修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s205:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>如果不配置这个属性，那么第二名称节点会和名称节点在一台主机上。</p>
<p>效果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2790 ResourceManager</span><br><span class="line">3096 Jps</span><br><span class="line">2398 NameNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1780 Jps</span><br><span class="line">1526 DataNode</span><br><span class="line">1662 NodeManager</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1664 NodeManager</span><br><span class="line">1782 Jps</span><br><span class="line">1529 DataNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1781 Jps</span><br><span class="line">1526 DataNode</span><br><span class="line">1663 NodeManager</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s205 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1767 Jps</span><br><span class="line">1709 SecondaryNameNode</span><br></pre></td></tr></table></figure></div>



<h2 id="七、Hadoop端口介绍"><a href="#七、Hadoop端口介绍" class="headerlink" title="七、Hadoop端口介绍"></a>七、Hadoop端口介绍</h2><p>Hadoop 3 相对于Hadoop 2 在端口号上有一些改变：</p>
<table>
<thead>
<tr>
<th align="center"><strong>分类</strong></th>
<th align="center"><strong>应用</strong></th>
<th align="center"><strong>Haddop 2.x port</strong></th>
<th align="center"><strong>Haddop 3 port</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">NNPorts</td>
<td align="center">Namenode</td>
<td align="center">8020</td>
<td align="center">9820</td>
</tr>
<tr>
<td align="center">NNPorts</td>
<td align="center">NN HTTP UI</td>
<td align="center">50070</td>
<td align="center">9870</td>
</tr>
<tr>
<td align="center">NNPorts</td>
<td align="center">NN HTTPS UI</td>
<td align="center">50470</td>
<td align="center">9871</td>
</tr>
<tr>
<td align="center">SNN ports</td>
<td align="center">SNN HTTP</td>
<td align="center">50091</td>
<td align="center">9869</td>
</tr>
<tr>
<td align="center">SNN ports</td>
<td align="center">SNN HTTP UI</td>
<td align="center">50090</td>
<td align="center">9868</td>
</tr>
<tr>
<td align="center">DN ports</td>
<td align="center">DN IPC</td>
<td align="center">50020</td>
<td align="center">9867</td>
</tr>
<tr>
<td align="center">DN ports</td>
<td align="center">DN</td>
<td align="center">50010</td>
<td align="center">9866</td>
</tr>
<tr>
<td align="center">DN ports</td>
<td align="center">DN HTTP UI</td>
<td align="center">50075</td>
<td align="center">9864</td>
</tr>
<tr>
<td align="center">DN ports</td>
<td align="center">Namenode</td>
<td align="center">50475</td>
<td align="center">9865</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop学习笔记（三）MapReduce</title>
    <url>/2020/02/16/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89MapReduce/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记（三）MapReduce"><a href="#Hadoop学习笔记（三）MapReduce" class="headerlink" title="Hadoop学习笔记（三）MapReduce"></a>Hadoop学习笔记（三）MapReduce</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>一个存储在分布式文件系统中的大规模数据集，会被切分成许多独立的小数据块，这些小数据块可以被多个Map任务并行处理。Map任务生成的结果会作为Reduce任务的输入，并最终由Reduce输出最终结果。（MapReduce的应用程序不一定要用JAVA来写）</p>
<h2 id="二、MR编程（JAVA）"><a href="#二、MR编程（JAVA）" class="headerlink" title="二、MR编程（JAVA）"></a>二、MR编程（JAVA）</h2><h3 id="2-1-编写程序流程简介"><a href="#2-1-编写程序流程简介" class="headerlink" title="2.1 编写程序流程简介"></a>2.1 编写程序流程简介</h3><p>在JAVA编程中，MR程序编写主要流程分为：</p>
<ol>
<li>编写Mapper类</li>
<li>编写Reduce类</li>
<li>编写Job启动类</li>
<li>打包运行</li>
</ol>
<h3 id="2-2-MR程序入门示例（WordCount）"><a href="#2-2-MR程序入门示例（WordCount）" class="headerlink" title="2.2 MR程序入门示例（WordCount）"></a>2.2 MR程序入门示例（WordCount）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.mr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordCount class</span></span><br><span class="line"><span class="comment"> * 单词计数MapReduce程序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/17 0:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取运行参数(其中至少一个输入路径以及一个输出路径)</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] remainingArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span> (remainingArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Usage: WordCount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;"</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建Job任务</span></span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"WordCount"</span>);</span><br><span class="line">        <span class="comment">// 设置Jar包运行的类</span></span><br><span class="line">        job.setJarByClass(WordCount<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置Map和Reduce类</span></span><br><span class="line">        job.setMapperClass(WcMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(WcReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置reduce输出的键值对类型(这里其实map和reduce同时设置了)</span></span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置map输出的键值对类型(如果map和reduce输出键值对类型一样，下面两个就不用设置)</span></span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 指定原始数据存放在路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; remainingArgs.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(remainingArgs[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指定处理输出数据存放路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(remainingArgs[remainingArgs.length - <span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 将job提交给集群运行</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map类</span></span><br><span class="line"><span class="comment">     * 4个泛型中，前两个是指定mapper输入数据的类型。输入输出都是以键值对形式封装的。</span></span><br><span class="line"><span class="comment">     * 其中LongWritable是对Long的封装，Text是对String的封装。</span></span><br><span class="line"><span class="comment">     * 默认情况下，框架传递给我的mapper的输入数据中，key是要处理文本中一行的起始偏移量，这一行的内容作为value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WcMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> LongWritable NUM = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// 将这一行的内容转为String类型字符串</span></span><br><span class="line">            String line = value.toString();</span><br><span class="line">            <span class="comment">// 拆分单词</span></span><br><span class="line">            String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                <span class="comment">// 将每个单词输出为以键值对形式</span></span><br><span class="line">                context.write(<span class="keyword">new</span> Text(word), NUM);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reduce类</span></span><br><span class="line"><span class="comment">     * 框架在Map处理之后，将所有键值对分组，传递一个组，调用一次reduce方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WcReduce</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> count = <span class="number">0L</span>;</span><br><span class="line">            <span class="comment">// 遍历累加求和</span></span><br><span class="line">            <span class="keyword">for</span> (LongWritable value : values) &#123;</span><br><span class="line">                count += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出这一个单词的统计结果</span></span><br><span class="line">            context.write(key, <span class="keyword">new</span> LongWritable(count));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-3-运行MR程序"><a href="#2-3-运行MR程序" class="headerlink" title="2.3 运行MR程序"></a>2.3 运行MR程序</h3><h4 id="本地模式（IDEA）"><a href="#本地模式（IDEA）" class="headerlink" title="本地模式（IDEA）"></a>本地模式（IDEA）</h4><ol>
<li><p>创建文本文件作为输入数据文件</p>
<p><a href="/postImages/MR1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR1.png" class="lazyload"></a></p>
</li>
<li><p>设置运行参数，根据自己实际的目录（这里采用IDEA编译器）</p>
<p><a href="/postImages/MR2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR2.png" class="lazyload"></a></p>
<p><a href="/postImages/MR3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR3.png" class="lazyload"></a></p>
</li>
<li><p>运行main函数</p>
<p><a href="/postImages/MR4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR4.png" class="lazyload"></a></p>
</li>
</ol>
<h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><ol>
<li><p>修改pom文件，添加打包方式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打包程序</p>
<p><a href="/postImages/MR5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR5.png" class="lazyload"></a></p>
</li>
<li><p>将打包文件上传到集群上，或者设置一个共享文件夹让本地和集群联通</p>
<p><a href="/postImages/MR6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR6.png" class="lazyload"></a></p>
</li>
<li><p>启动HDFS，并在HDFS创建输入文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 启动HDFS</span><br><span class="line">$start-dfs.sh</span><br><span class="line">$start-yarn.sh</span><br><span class="line">&#x2F;&#x2F; 创建输入文件</span><br><span class="line">$hdfs dfs -mkdir -p &#x2F;user&#x2F;wbw&#x2F;mr&#x2F;word_count</span><br><span class="line">$hdfs dfs -put ~&#x2F;sfs&#x2F;words.txt &#x2F;user&#x2F;wbw&#x2F;mr&#x2F;word_count&#x2F;</span><br><span class="line">&#x2F;&#x2F; 运行命令</span><br><span class="line">&#x2F;&#x2F; 解析：$hadoop jar &lt;jar文件&gt; &lt;全路径主类名&gt; &lt;HDFS输入数据源目录可以多个&gt; &lt;HDFS输出结果目录&gt;</span><br><span class="line">$hadoop jar Hadoop-1.0-SNAPSHOT.jar cn.wangbowen.mr.WordCount hdfs:&#x2F;&#x2F;s201&#x2F;user&#x2F;wbw&#x2F;mr&#x2F;word_count&#x2F; hdfs:&#x2F;&#x2F;s201&#x2F;user&#x2F;wbw&#x2F;mr&#x2F;word_count&#x2F;out</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打开WEB-UI（主机名:8088）最终会显示成功</p>
<p><a href="/postImages/MR7.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR7.png" class="lazyload"></a></p>
</li>
<li><p>查看结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;sfs]$hdfs dfs -cat &#x2F;user&#x2F;wbw&#x2F;mr&#x2F;word_count&#x2F;out&#x2F;part-r-00000</span><br><span class="line">apple	1</span><br><span class="line">hello	3</span><br><span class="line">tom	2</span><br><span class="line">world	2</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可能会遇到的问题</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Please check whether your etc&#x2F;hadoop&#x2F;mapred-site.xml contains the below configuration:</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME&#x3D;$&#123;full path of your hadoop distribution directory&#125;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME&#x3D;$&#123;full path of your hadoop distribution directory&#125;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME&#x3D;$&#123;full path of your hadoop distribution directory&#125;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></div>

<p>解决方法：按错误提示，在mapred-site.xml配置文件中添加hadoop根目录</p>
</li>
</ol>
<h3 id="2-4-Chain链式MR编程"><a href="#2-4-Chain链式MR编程" class="headerlink" title="2.4 Chain链式MR编程"></a>2.4 Chain链式MR编程</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>有时候一个MR程序，并不能解决我们的问题，因而需要多个MR程序配合使用，前一个MR的输出结果作为后一个MR程序的输入。又或者我们写完一个MR以后，过一段时间，需要增加一些条件，那我们还要重新对代码进行编码。这样工作量无疑大大增加了，因此，现在有一个ChainMapper和ChainReducer来帮我们处理这些问题，使MR程序可重用。</p>
<p>一个MR程序，是由MapTask和ReduceTask两个阶段组成。在MapTask阶段可以有&gt;=1个Mapper类，在ReduceTask阶段，可以由一个Reduce类+[&gt;=0个Mapper类]组成。因此，一个MR程序可以有如下顺序执行结构：[Mapper] –&gt; [Mapper] –&gt; [Mapper] –&gt; [Reduce] –&gt; [Mapper] –&gt; [Mapper]（但是，最基本的必须由一个Mapper+一个Reduce组成）这样就组成了一条链子样子的链式处理。同理，第一个Mapper的输出，可以作为第二Mapper的输入，第三个Mapper的输出可以作为Reduce的输入，Reduce的输出可以作为后面Mapper的输入，以此类推。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>需求：统计单词数量（要求长度大于等于5，且总数大于3）</p>
</li>
<li><p>数据准备：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apple apple apple apple apple </span><br><span class="line">pink pink pink pink pink </span><br><span class="line">hello hello hello</span><br></pre></td></tr></table></figure></div>

<p>可以看到apple符合要求，pink总数符合但是长度不符合，hello长度符合但是总数不合符，因此最终输出结果应该是《apple 5》</p>
</li>
<li><p>编写Mapper类</p>
<ul>
<li><p>WCChain（主类）</p>
<p>！！！特别要注意ChainMapper和ChainReducer调用，别复制太快了！！！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WCChain class</span></span><br><span class="line"><span class="comment"> * MR主类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 23:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WCChain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取运行参数(其中至少一个输入路径以及一个输出路径)</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] remainingArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span> (remainingArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Usage: WordCountChain &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;"</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建Job任务</span></span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"WordCountChain"</span>);</span><br><span class="line">        <span class="comment">// 设置Jar包运行的类</span></span><br><span class="line">        job.setJarByClass(WCChain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加MapperTasks(注意是ChainMapper调用！)</span></span><br><span class="line"><span class="comment">         * addMapper参数介绍：</span></span><br><span class="line"><span class="comment">         * #1 ：Job任务</span></span><br><span class="line"><span class="comment">         * #2 ：Mapper类</span></span><br><span class="line"><span class="comment">         * #3、4 ：输入数据K、V类型类</span></span><br><span class="line"><span class="comment">         * #5、6 ：输出数据K、V类型类</span></span><br><span class="line"><span class="comment">         * #7 ：配置文件（可以用上面的 conf）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ChainMapper.addMapper(job, Mapper1<span class="class">.<span class="keyword">class</span>, <span class="title">LongWritable</span>.<span class="title">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">conf</span>)</span>;</span><br><span class="line">        ChainMapper.addMapper(job, Mapper2<span class="class">.<span class="keyword">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">conf</span>)</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加ReduceTasks(注意都是ChainReducer调用！)</span></span><br><span class="line"><span class="comment">         * setReducer参数介绍：</span></span><br><span class="line"><span class="comment">         * #1 ：Job任务</span></span><br><span class="line"><span class="comment">         * #2 ：Reduce类</span></span><br><span class="line"><span class="comment">         * #3、4 ：输入数据K、V类型类</span></span><br><span class="line"><span class="comment">         * #5、6 ：输出数据K、V类型类</span></span><br><span class="line"><span class="comment">         * #7 ：配置文件（可以用上面的 conf）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ChainReducer.setReducer(job, Reduce1<span class="class">.<span class="keyword">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">conf</span>)</span>;</span><br><span class="line">        ChainReducer.addMapper(job, Mapper3<span class="class">.<span class="keyword">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">Text</span>.<span class="title">class</span>, <span class="title">IntWritable</span>.<span class="title">class</span>, <span class="title">conf</span>)</span>;</span><br><span class="line">        <span class="comment">// 指定原始数据存放在路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; remainingArgs.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(remainingArgs[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指定处理输出数据存放路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(remainingArgs[remainingArgs.length - <span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 将job提交给集群运行</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Mapper、Reduce类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper1 class</span></span><br><span class="line"><span class="comment"> * 第一个Mapper处理文本文件输入数据，输出所有K-V：单词-1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 23:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper1</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IntWritable SUM = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString();</span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(word), SUM);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper2 class</span></span><br><span class="line"><span class="comment"> * 第二个Mapper过滤长度&lt;5的单词</span></span><br><span class="line"><span class="comment"> * 输入为Mapper1的输出，即K-V：单词-1</span></span><br><span class="line"><span class="comment"> * 输出为K-V：单词-1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 23:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper2</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, IntWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key.toString().length() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            context.write(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reducer1 class</span></span><br><span class="line"><span class="comment"> * 这是MR唯一一个Reduce类，用来统计各单词总数</span></span><br><span class="line"><span class="comment"> * 输入为Mapper2的输入K-V: 单词-1</span></span><br><span class="line"><span class="comment"> * 输出为K-V: 单词-总数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 23:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce1</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            count += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        context.write(key, <span class="keyword">new</span> IntWritable(count));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper3 class</span></span><br><span class="line"><span class="comment"> * 第三个Mapper过滤总数小于等于3的单词</span></span><br><span class="line"><span class="comment"> * 输入为Reduce的输出，即K-V：单词-总数</span></span><br><span class="line"><span class="comment"> * 输出为K-V：符合要求的单词-总数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 23:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper3</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, IntWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.get() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            context.write(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>




</li>
</ul>
</li>
</ol>
<h2 id="三、MR工作流程"><a href="#三、MR工作流程" class="headerlink" title="三、MR工作流程"></a>三、MR工作流程</h2><h3 id="3-1-整体流程简介"><a href="#3-1-整体流程简介" class="headerlink" title="3.1 整体流程简介"></a>3.1 整体流程简介</h3><ol>
<li><p>MapReduce框架使用InputFormat模块做Map前的预处理，然后将输入文件分为逻辑上的多个InputSplit（只是一个逻辑概念，并没有实际切分。只是记录了要处理数据的位置和长度）</p>
</li>
<li><p>通过RecordReader根据InputSplit中的信息来处理具体记录，加载数据并转化为合适Map任务读取的键值对给Map任务</p>
</li>
<li><p>Map任务根据用户自定义的映射规则，输出一系列&lt;key,value&gt;作为中间结果</p>
</li>
<li><p>经过Shuffle（对Map的输出进行一定的分区、排序、合并、归并等操作），得到&lt;key,value-list&gt;形式的中间结果</p>
</li>
<li><p>Reduce以&lt;key,value-list&gt;中间结果作为输入，执行用户自定义的逻辑，输出结果给OutputFormat模块</p>
</li>
<li><p>OutputFormat模块会验证输出目录是否已经存在以及输出结果类型是否符合配置文件中的配置类型。都满足就会输出结果到分布式文件系统</p>
</li>
</ol>
<h3 id="3-2-job提交流程解析"><a href="#3-2-job提交流程解析" class="headerlink" title="3.2 job提交流程解析"></a>3.2 job提交流程解析</h3><h4 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h4><p>这里我们对2.2中的代码进行断点追踪来分析一下本地运行流程：</p>
<ol>
<li><p>创建外部Job(mapreduce.Job),设置配置信息</p>
<p>即为2.2中main方法里面的内容。</p>
</li>
</ol>
<ol start="2">
<li><p>通过jobsubmitter作业提交器将job.xml + split等文件写入临时目录</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%901.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%901.png" class="lazyload"></a></p>
<p>我们可以看到这里创建了一个临时目录，用来放提交任务临时文件。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%902.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%902.png" class="lazyload"></a></p>
<p>接着将编写的job信息拷贝和配置文件方法。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%903.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%903.png" class="lazyload"></a></p>
<p>创建提交任务文件。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%904.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%904.png" class="lazyload"></a></p>
<p>计算切片数量（map数量）,下一行是写入到conf对象。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%905.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%905.png" class="lazyload"></a></p>
<p>将配置信息写入到提交作业文件。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%906.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%906.png" class="lazyload"></a></p>
<p>打开临时文件目录，打开job.xml发现，程序里面给job.set都是给job.xml配置作业属性。同时目录下还有切片信息。</p>
</li>
</ol>
<ol start="3">
<li><p>通过jobSubmitter提交job给localJobRunner</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%907.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%907.png" class="lazyload"></a></p>
</li>
</ol>
<ol start="4">
<li><p>LocalJobRunner将外部Job 转换成成内部Job</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%908.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%908.png" class="lazyload"></a></p>
<p>这个job是内部类，在LocalJobRunner。如果是集群就是YARNRunner。所以在提交作业的时候，先把job转换成内部类。</p>
</li>
</ol>
<ol start="5">
<li><p>内部Job线程，开放分线程执行job</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%909.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%909.png" class="lazyload"></a></p>
<p>进入内部类job的构造函数，发现最底下有一个start函数。因此这个内部类是个线程类，找到它的run方法，打断点进入发现确实开启一个分线程。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9011.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9011.png" class="lazyload"></a></p>
<p>进入run函数中，发现这个变量就是用来存放MAP后的键值对。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9012.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9012.png" class="lazyload"></a></p>
<p>接着发现，这里可以看到mapRunnables为map的线程数，以及reduce任务数。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9014.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9014.png" class="lazyload"></a></p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9015.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9015.png" class="lazyload"></a></p>
<p>继续查看发现它又进行了，获取切片信息，获得map任务集合，以及运行map任务，以及之后的reduce任务。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9013.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9013.png" class="lazyload"></a></p>
<p>从结构上可以看到，Job内部类其实又有两个线程类。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9016.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9016.png" class="lazyload"></a></p>
<p>进入Map的runTask，可以看到这里又有一个submit，以及后面的debug值，发现这又开了一个线程，这其实就是上面结构图中MapTaskRunnable线程类。</p>
</li>
</ol>
<ol start="6">
<li><p>job执行线程分别计算Map和reduce任务信息，并通过线程池孵化新线程执行MR任务。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9017.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9017.png" class="lazyload"></a></p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9018.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9018.png" class="lazyload"></a></p>
<p>可以看到这里创建了Map任务对象和，以及船舰输出文件，map毕竟也是要将结果输出给reduce的。最后又执行了run方法。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9019.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9019.png" class="lazyload"></a></p>
<p>进入run后，发现有一个runNewMapper。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9020.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9020.png" class="lazyload"></a></p>
<p>进入runNewMapper。发现了上下文对象名（可以联想到自己写mapper的时候那个参数context），反射工具库类，以及这个mapper对象值是自己写的Map类名信息。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9021.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9021.png" class="lazyload"></a></p>
<p>最后这个mapper执行了run方法（通过线程池孵化新线程执行MR任务）。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9022.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9022.png" class="lazyload"></a></p>
<p>进入run方法。这里有3个过程，其中我们只编写了第二部分的内容，即自己的mapper类。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9023.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9023.png" class="lazyload"></a></p>
<p>继续打断点，发现程序进入到了我们自己写的方法里面了，可以看出我们写的代码逻辑到现在才进行运行。</p>
</li>
</ol>
<ol start="7">
<li><p>接下来reduce的过程也是类似的</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9024.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9024.png" class="lazyload"></a></p>
<p>这里有一些排序等操作。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9025.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9025.png" class="lazyload"></a></p>
<p>可以看到在执行reduce前有一个shuffle的操作。</p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9026.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9026.png" class="lazyload"></a></p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9027.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9027.png" class="lazyload"></a></p>
<p><a href="/postImages/MR%E8%A7%A3%E6%9E%9028.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MR%E8%A7%A3%E6%9E%9028.png" class="lazyload"></a></p>
<p>至此程序就结束了，然后输出结果。</p>
</li>
</ol>
<h4 id="YARN框架简介"><a href="#YARN框架简介" class="headerlink" title="YARN框架简介"></a>YARN框架简介</h4><p>用于资源调度，包含ResourceManager和NodeManager。</p>
<p>意义：让Hadoop变得更加通用，让很多的运算框架都能够在YARN集群上跑起来。只要让他们实现AppMaster接口就可以了。</p>
<p><a href="/postImages/yarn%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E5%9B%BE.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/yarn%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E5%9B%BE.png" class="lazyload"></a></p>
<h4 id="集群模式-1"><a href="#集群模式-1" class="headerlink" title="集群模式"></a>集群模式</h4><p>这里提供一份他人的详解，感觉讲的挺详细的（<a href="https://github.com/heibaiying/BigData-Notes/blob/master/notes/Hadoop-YARN.md）" target="_blank" rel="noopener">https://github.com/heibaiying/BigData-Notes/blob/master/notes/Hadoop-YARN.md）</a></p>
<p>job提交流程图：</p>
<a href="/postImages/JOB提交1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="/postImages/JOB提交1.png" class="lazyload"></a>

<p>job提交流程解析：</p>
<ol>
<li><p>当我们编写好MapReduce程序打成一个jar包，运行Main方法，其中有个job.waitforcompletion()会创建一个客户端实例RunJar。</p>
</li>
<li><p>这个RunJar会找ResourceManager通信，申请执行一个application应用（这里在客户端叫job，在yarn里叫application）。ResourceManager返回application相关资源提交的路径starting-dir（还记得本地模式下那个tmp开头的临时目录吗，就是这个）和为本application产生的applicationID（这步的主要目的就是拿到这个ID）。</p>
</li>
<li><p>RunJar把相应的jar包和配置文件提交到HDFS临时目录下（还记得本地模式下那个/tmp/…/job.xml还有切片信息等吗）。为什么要放在HDFS中？因为HDFS是共享系统，每个节点都能访问到里面的内容。</p>
<p><a href="/postImages/JOB%E6%8F%90%E4%BA%A42.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/JOB%E6%8F%90%E4%BA%A42.png" class="lazyload"></a></p>
<p>因为之前运行过一个MR程序，可以查看HDFS文件列表，发现确实有/tmp/…开头目录的文件信息。</p>
</li>
<li><p>最后, 通过调用 submitApplication() 来提交作业到ResourceManager。</p>
</li>
<li><p>ResourceManager会找到集群中一台NodeManager在其容器（container）中启动程序主进程（MRAppMaster）。并向ResourceManager注册，当程序运行完成后，会向ResourceManager注销自己，回收资源。</p>
</li>
<li><p>然后MRAppMaster会先去HDFS中检索资源。为什么要检索?HDFS中有切片信息，这代表了需要多少个并发执行的Map任务。</p>
</li>
<li><p>然后向ResourceManager询问分配资源列表（即，哪些节点可用。比如需要30个节点，那么ResourceManager就会给你这30个节点的信息）,接着就可以去联系这些节点的NodeManager。</p>
</li>
<li><p>然后这些NodeManager就会启动yarn子进程，yarn子进程因为拿到了切片信息，就可以去HDFS检索对应的资源。</p>
</li>
<li><p>拿到资源后就可以开启MapTask或者ReduceTask。</p>
</li>
</ol>
<h2 id="四、Shuffle机制（map后reduce前）"><a href="#四、Shuffle机制（map后reduce前）" class="headerlink" title="四、Shuffle机制（map后reduce前）"></a>四、Shuffle机制（map后reduce前）</h2><h3 id="4-1流程简介"><a href="#4-1流程简介" class="headerlink" title="4.1流程简介"></a>4.1流程简介</h3><p><a href="/postImages/shuffle.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/shuffle.png" class="lazyload"></a></p>
<h4 id="MapTask阶段"><a href="#MapTask阶段" class="headerlink" title="MapTask阶段"></a>MapTask阶段</h4><ol>
<li><p>输入数据和执行Map任务。</p>
<p>Map任务接受&lt;key,value&gt;作为输入，按一定规则以&lt;key,value&gt;输出。</p>
</li>
<li><p>写入缓存。</p>
<p>每个Map任务都会分配一个缓存，Map输出结果先写到缓存中，当缓存中积累一定数量的结果后才一次性写入磁盘。</p>
</li>
<li><p>溢写（分区、排序、合并）</p>
<p>缓存容量默认是100M（可以在io.sort.mb属性修改），随着任务的进行，缓存不断增大，当达到溢写比例0.8（io.sort.spill.percent属性）后，先将80M写入磁盘（即，一个后台线程把内容写到（spill）硬盘的指定目录（mapred.local.dir）下的新建的一个溢出写文件），20M空间继续提供Map结果写入。</p>
<p>但是，在溢写到磁盘前，缓存中的数据会先被分区。默认采用Hash函数对key哈希后再用Reduce任务数量进行取模。这样就可以把Map结果均匀分配给R个Reduce任务并行处理。</p>
<p>对于每个分区内的所有键值对，会根据key在内存中排序。然后进行可选的合并（如：两个&lt;”test”,1&gt;就会合并成&lt;”test”,2&gt;。一般用于累加、最大值等场景）</p>
<p>经过以上步骤，就可以写入磁盘了。</p>
</li>
<li><p>文件归并</p>
<p>每次溢写都会产生一个新的溢写文件，最终在Map任务全部结束之前，会对所有溢写文件中的数据进行归并成一个大的溢写文件（归并：两个&lt;”test”,1&gt;就会合并成&lt;”test”,{1,1}&gt;）    </p>
</li>
</ol>
<p><a href="/postImages/mapTask.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/mapTask.png" class="lazyload"></a></p>
<h4 id="ReduceTask阶段"><a href="#ReduceTask阶段" class="headerlink" title="ReduceTask阶段"></a>ReduceTask阶段</h4><ol>
<li><p>“领取”数据</p>
<p>Map端的Shuffle过程结束后，数据在Map的机器上，所以Map任务完成后会通知Reduce来领取数据到Reduce端（Reduce会从多个Map机器领回属于自己分区的数据，一个分区可能有多个不同的key）。</p>
</li>
<li><p>归并数据</p>
<p>归并发生在Reduce任务执行前，在领回的数据中，具有相同key的键值对会进行归并。</p>
</li>
<li><p>把数据输入给Reduce任务，并产生最终结果。</p>
</li>
</ol>
<h3 id="4-2-Partitioner分区"><a href="#4-2-Partitioner分区" class="headerlink" title="4.2 Partitioner分区"></a>4.2 Partitioner分区</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>我们知道，Map处理完数据，会往分区里面放，分区中不同区传给不同的reduce。而分区的个数是由reduce任务数决定的。Hadoop中自带了一个默认的分区类HashPartitioner，它继承了Partitioner类，提供了一个getPartition的方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashPartitioner</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashPartitioner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 按Key进行hash的分区函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(K key, V value, <span class="keyword">int</span> numReduceTasks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">2147483647</span>) % numReduceTasks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为什么要自定义分区函数？是为了解决数据倾斜（比如有3个reduce，第一个分区有98%的数据，第二个有2%，第三个0%，这样就造成了资源的不合理分配，浪费资源），合理的分配是有助于reduce计算的。</p>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><ol>
<li><p>定义分区类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * YearPartitioner class</span></span><br><span class="line"><span class="comment"> * 分区类</span></span><br><span class="line"><span class="comment"> * 根据年份分区</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 16:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">ComboKey</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(ComboKey comboKey, NullWritable nullWritable, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = comboKey.getYear();</span><br><span class="line">        <span class="keyword">return</span> year % i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>程序中配置使用分区类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//设置分区</span></span><br><span class="line">   job.setPartitionerClass(YearPartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 设置reduce任务数量（要和Partitioner分数数量保持一致，多了会产生空文件，少了会报错）</span></span><br><span class="line">   job.setNumReduceTasks(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-3-Combiner-合成（可选组件）"><a href="#4-3-Combiner-合成（可选组件）" class="headerlink" title="4.3 Combiner 合成（可选组件）"></a>4.3 Combiner 合成（可选组件）</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>继承了Reducer 任何的Reducer类都能被他使用，它并不是类，只有一个setCombinerClass方法。</p>
<p>作用相当于Map端的Reducer ，预先化简。为了减少网络带宽将Map端发出的的数据进行聚合 并不是所有的都可以用combiner </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCombinerClass</span><span class="params">(Class&lt;? extends Reducer&gt; cls)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ensureState(Job.JobState.DEFINE);</span><br><span class="line">    <span class="keyword">this</span>.conf.setClass(<span class="string">"mapreduce.job.combine.class"</span>, cls, Reducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="自定义-1"><a href="#自定义-1" class="headerlink" title="自定义"></a>自定义</h4><ol>
<li><p>定义一个类继承Reducer。</p>
</li>
<li><p>在主函数中调用方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">job.setCombinerClass(WcReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h3 id="4-4-排序对比器"><a href="#4-4-排序对比器" class="headerlink" title="4.4 排序对比器"></a>4.4 排序对比器</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>reduce前将Map传来的key-value对进行排序，可以自定义排序对比器。</p>
<h4 id="自定义-2"><a href="#自定义-2" class="headerlink" title="自定义"></a>自定义</h4><ol>
<li><p>定义对比器类（注意要有一个构造函数来注册）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ComboKeyComparator class</span></span><br><span class="line"><span class="comment"> * 利用这个排序对比器来进行对自定义类的排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 18:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComboKeyComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ComboKeyComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ComboKey<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因此ComboKey类实现了自己的比较方法，直接调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line">        ComboKey o1 = (ComboKey)a;</span><br><span class="line">        ComboKey o2 = (ComboKey)b;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>main函数中添加设置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置排序对比起</span></span><br><span class="line">job.setSortComparatorClass(ComboKeyComparator<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-5-分组"><a href="#4-5-分组" class="headerlink" title="4.5 分组"></a>4.5 分组</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>对于在同一个reduce中的key-value对，相同的key被分到一组，即&lt;key,&lt; value1,value2,…,valueN&gt;&gt;形式。这里可以自定义分组。</p>
<h4 id="自定义-3"><a href="#自定义-3" class="headerlink" title="自定义"></a>自定义</h4><ol>
<li><p>定义分组类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * YearGroupingComparator class</span></span><br><span class="line"><span class="comment"> * 分组对比器：用于将一个reduce中不同key进行分组，相同的key将</span></span><br><span class="line"><span class="comment"> * 其值都放到一个iterator中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 18:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearGroupingComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">YearGroupingComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ComboKey<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ComboKey o1 = (ComboKey)a;</span><br><span class="line">        ComboKey o2 = (ComboKey)b;</span><br><span class="line">        <span class="keyword">return</span> o1.getYear() - o2.getYear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在main函数中配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置分组对比器</span></span><br><span class="line">job.setGroupingComparatorClass(YearGroupingComparator<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="五、计数器"><a href="#五、计数器" class="headerlink" title="五、计数器"></a>五、计数器</h2><p>有时候我们需要在map和reduce的时候打印一些统计信息，但是将程序放到集群上运行时候，如果用sout来输出的话，是在不同机器上的logs文件下。因此我们需要一个计数器来进行统计。</p>
<ol>
<li><p>添加计数器代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getCounter(<span class="string">"m"</span>, <span class="string">"WCMapper.map"</span>).increment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>程序运行结果输出报告：</p>
<p><a href="/postImages/%E8%AE%A1%E6%95%B0%E5%99%A8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%AE%A1%E6%95%B0%E5%99%A8.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="六、序列化（自定义类）"><a href="#六、序列化（自定义类）" class="headerlink" title="六、序列化（自定义类）"></a>六、序列化（自定义类）</h2><p>有时候原本的数据结构不够用了（如下面的二次排序），这时就需要我们定义自己需要的结果来进行编程操作。注意事项如下：</p>
<ol>
<li>实现WritableComparable接口（相当于分别实现了Writable和Comparable接口）。</li>
<li>重写write、readFields序列化、但序列化方法，要注意顺序一致。</li>
<li>提供一个无参构造函数，用于反射。</li>
<li>重写compareTo方法，用于当把类当成key时的比较。</li>
<li>重写toString方法，当Reduce输出类型为自定义类时，可以以指定样式输出到文本文件。</li>
</ol>
<p>代码示例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ComboKey class</span></span><br><span class="line"><span class="comment"> * 自定义组合累类（用于充当key）</span></span><br><span class="line"><span class="comment"> * 相当于自定义序列化:</span></span><br><span class="line"><span class="comment"> *  实现WritableComparable接口，相当于分别实现了Writable和Comparable接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 16:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComboKey</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">ComboKey</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 年份</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="comment">// 温度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要提供一个无参构造函数，用于反射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComboKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComboKey</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">int</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较函数用于排序：</span></span><br><span class="line"><span class="comment">     * 如果年份相同，温度降序;如果温度相同，年份升序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ComboKey o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o.getYear() == <span class="keyword">this</span>.year) &#123;</span><br><span class="line">            <span class="keyword">return</span> o.getTemp() - <span class="keyword">this</span>.temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.year - o.getYear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeInt(<span class="keyword">this</span>.year);</span><br><span class="line">        dataOutput.writeInt(<span class="keyword">this</span>.temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * 注意：</span></span><br><span class="line"><span class="comment">     *      序列化和反序列化的顺序要一致</span></span><br><span class="line"><span class="comment">     *      要提供一个无参构造函数，用于反射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.year = dataInput.readInt();</span><br><span class="line">        <span class="keyword">this</span>.temp = dataInput.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="七、排序"><a href="#七、排序" class="headerlink" title="七、排序"></a>七、排序</h2><h3 id="7-1-全排序"><a href="#7-1-全排序" class="headerlink" title="7.1 全排序"></a>7.1 全排序</h3><p>全排序的实现方式：</p>
<ol>
<li><p>定义一个reduce (适合数据量少，存在数据倾斜问题)</p>
</li>
<li><p>自定义分区类（手动按照key的值划分分区，存在数据倾斜问题）</p>
</li>
<li><p>使用Hadoop提供的TotalOrderPartitioner + (对inputFormat)RandomSampler（采样器）</p>
<p>随机采样。抽取样本数，计算出区间值，将区间值写入分区文件，分区文件就是一个序列文件，这个序列文件只有key没有value(null)</p>
<p>代码示例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTempApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>,<span class="string">"file:///"</span>);</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">//设置job的各种属性</span></span><br><span class="line">        job.setJobName(<span class="string">"MaxTempApp"</span>);                        <span class="comment">//作业名称</span></span><br><span class="line">        job.setJarByClass(MaxTempApp<span class="class">.<span class="keyword">class</span>)</span>;                 <span class="comment">//搜索类</span></span><br><span class="line">        job.setInputFormatClass(SequenceFileInputFormat<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//设置输入格式</span></span><br><span class="line">        <span class="comment">//添加输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job,<span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">//设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        job.setMapperClass(MaxTempMapper<span class="class">.<span class="keyword">class</span>)</span>;             <span class="comment">//mapper类</span></span><br><span class="line">        job.setReducerClass(MaxTempReducer<span class="class">.<span class="keyword">class</span>)</span>;           <span class="comment">//reducer类</span></span><br><span class="line">        job.setMapOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;        <span class="comment">//</span></span><br><span class="line">        job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;      <span class="comment">//</span></span><br><span class="line">        job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;         <span class="comment">//</span></span><br><span class="line">        <span class="comment">// -------------------------------------------------------------------        </span></span><br><span class="line">        <span class="comment">// 创建随机采样器对象</span></span><br><span class="line">        <span class="comment">// freq:每个key被选中的概率</span></span><br><span class="line">        <span class="comment">// numSapmple:抽取样本的总数</span></span><br><span class="line">        <span class="comment">// maxSplitSampled:最大采样切片数</span></span><br><span class="line">        InputSampler.Sampler&lt;IntWritable, IntWritable&gt; sampler =</span><br><span class="line">                <span class="keyword">new</span> InputSampler.RandomSampler&lt;IntWritable, IntWritable&gt;(<span class="number">1</span>, <span class="number">6000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 将sample数据写入分区文件.</span></span><br><span class="line">        TotalOrderPartitioner.setPartitionFile(conf,<span class="keyword">new</span> Path(<span class="string">"file:///d:/mr/par.lst"</span>));</span><br><span class="line">        <span class="comment">// 设置全排序分区类</span></span><br><span class="line">        job.setPartitionerClass(TotalOrderPartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setNumReduceTasks(<span class="number">3</span>);                           <span class="comment">//reduce个数</span></span><br><span class="line">        InputSampler.writePartitionFile(job, sampler);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//job.waitForCompletion(true);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注意事项：</p>
<ol>
<li>TotalOrderPartitioner        //全排序分区类,读取外部生成的分区文件确定区间。</li>
<li>使用时采样代码在最后端,否则会出现错误。</li>
<li>分区文件设置，设置的job的配置对象，不要是之前的conf.<br>TotalOrderPartitioner.setPartitionFile(job.getConfiguration(),new Path(“d:/mr/par.lst”));</li>
<li>输入格式最好要序列文件，如果采用文本输入格式，采样的是偏移量那将没有意义</li>
</ol>
</li>
</ol>
<h3 id="7-2-倒排序"><a href="#7-2-倒排序" class="headerlink" title="7.2 倒排序"></a>7.2 倒排序</h3><p>K-V对调</p>
<h3 id="7-3-二次排序"><a href="#7-3-二次排序" class="headerlink" title="7.3 二次排序"></a>7.3 二次排序</h3><p>编程步骤：</p>
<ol start="0">
<li><p>数据准备</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2000 12</span><br><span class="line">2007 11</span><br><span class="line">2002 20</span><br><span class="line">2000 15</span><br><span class="line">2001 10</span><br><span class="line">2002 10</span><br><span class="line">2003 20</span><br><span class="line">2004 11</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>需求：需要对value排序</p>
</li>
<li><p>自定义key（代码序列化章节）</p>
</li>
<li><p>自定义分区类,按照年份分区（代码shuffle章节）</p>
</li>
<li><p>定义Key排序对比器（代码shuffle章节）</p>
</li>
<li><p>编写Mapper、Reduce、Main类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * YearTopTemp class</span></span><br><span class="line"><span class="comment"> * 每年最高温度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/21 16:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearTopTemp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取运行参数(其中至少一个输入路径以及一个输出路径)</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] remainingArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span> (remainingArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Usage: YearTopTemp &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;"</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建Job任务</span></span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"YearTopTemp"</span>);</span><br><span class="line">        <span class="comment">// 设置Jar包运行的类</span></span><br><span class="line">        job.setJarByClass(YearTopTemp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置Map和Reduce类</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(MyReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置reduce输出的键值对类型(这里其实map和reduce同时设置了)</span></span><br><span class="line">        job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置map输出的键值对类型(如果map和reduce输出键值对类型一样，下面两个就不用设置)</span></span><br><span class="line">        job.setMapOutputKeyClass(ComboKey<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 指定原始数据存放在路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; remainingArgs.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(remainingArgs[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 指定处理输出数据存放路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(remainingArgs[remainingArgs.length - <span class="number">1</span>]));</span><br><span class="line">        <span class="comment">//设置分区</span></span><br><span class="line">        job.setPartitionerClass(YearPartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setNumReduceTasks(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 设置排序对比器</span></span><br><span class="line">        job.setSortComparatorClass(ComboKeyComparator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置分组对比器</span></span><br><span class="line">        job.setGroupingComparatorClass(YearGroupingComparator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 将job提交给集群运行</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">ComboKey</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String line = value.toString();</span><br><span class="line">            String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            context.write(<span class="keyword">new</span> ComboKey(Integer.parseInt(words[<span class="number">0</span>]),Integer.parseInt(words[<span class="number">1</span>])), NullWritable.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reduce类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReduce</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">ComboKey</span>, <span class="title">NullWritable</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(ComboKey key, Iterable&lt;NullWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> IntWritable(key.getYear()), <span class="keyword">new</span> IntWritable(key.getTemp()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop学习笔记（二）HDFS</title>
    <url>/2020/02/13/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89HDFS/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记（二）HDFS"><a href="#Hadoop学习笔记（二）HDFS" class="headerlink" title="Hadoop学习笔记（二）HDFS"></a>Hadoop学习笔记（二）HDFS</h1><a id="more"></a>

<h2 id="一、HDFS相关概念"><a href="#一、HDFS相关概念" class="headerlink" title="一、HDFS相关概念"></a>一、HDFS相关概念</h2><h3 id="1-1-块"><a href="#1-1-块" class="headerlink" title="1.1 块"></a>1.1 块</h3><p>在HDFS中文件的储存是以块为单位存储，默认大小为128M。在DHFS中，文件的上传后将文件切块分别存储在不同的DataNode上。</p>
<p>【因此HDFS不适合存放大量的小文件】</p>
<h3 id="1-2-元数据"><a href="#1-2-元数据" class="headerlink" title="1.2 元数据"></a>1.2 元数据</h3><p>数据格式：FileName（文件路径，只是逻辑地址，实际不存在）,replicas（副本数量）,clock-ids（文件块的ID以及分布在哪些DataNode上）,id2host（对应DataNode的地址）…</p>
<h3 id="1-3-名称节点（NameNode）"><a href="#1-3-名称节点（NameNode）" class="headerlink" title="1.3 名称节点（NameNode）"></a>1.3 名称节点（NameNode）</h3><p> NameNode负责管理分布式文件系统的命名空间，不参与数据的存储和读取，只记录元数据信息。</p>
<p>在NameNode中有两个核心的数据结构：FsImage（镜像，用来维护文件系统树以及元数据信息）和Editlog（日志，用来记录文件的一些操作）。</p>
<p>工作原理：当DHFS启动的时候，会先将FsImage的内容加载到内存中然后将EditLog的内容合并后内存中的元数据就保持最新的状态，同时将EditLog清空。</p>
<h3 id="1-4-数据节点（DataNode）"><a href="#1-4-数据节点（DataNode）" class="headerlink" title="1.4 数据节点（DataNode）"></a>1.4 数据节点（DataNode）</h3><p>DataNode是分布式文件系统HDFS的工作节点，负责数据的存储和读取。</p>
<h3 id="1-5-第二名称节点（SecondaryNameNode）"><a href="#1-5-第二名称节点（SecondaryNameNode）" class="headerlink" title="1.5 第二名称节点（SecondaryNameNode）"></a>1.5 第二名称节点（SecondaryNameNode）</h3><p>在NameNode运行期间，HDFS会在不断的发生更新操作。这些操作会直接写入到EditLog中，因此该文件会逐渐变大，在重启名称节点的时候，合并操作就会变慢，影响启动速度。因此每隔一段时间（默认是3600秒）或者EditLog达到一定大小的时候（默认是64M），会通知NameNode进行合并操作。同时，该机制也可以当作故障恢复的”检查点“。</p>
<p>工作原理：首先FsImage会暂时将日志写入一个新建的EditLog.new中，然后第二名称节点将名称节点中的FsImage和EditLog文件拉到本地后载入内存中进行合并操作，然后将合并后最新的FsImage发送给名称节点，名称节点用新的FsImage替换旧的FsImage，最后将EditLog.new重命名为EditLog</p>
<p>单独配置第二名称节点的位置：进入hdfs-site.xml修改字段值dfs.namenode.secondary.http-address为相应主机:端口。</p>
<h2 id="二、HDFS存储原理"><a href="#二、HDFS存储原理" class="headerlink" title="二、HDFS存储原理"></a>二、HDFS存储原理</h2><h3 id="2-1-数据的冗余"><a href="#2-1-数据的冗余" class="headerlink" title="2.1 数据的冗余"></a>2.1 数据的冗余</h3><p>为了保证系统的容错性和可用性，HDFS采用了多副本方式来存储。</p>
<h3 id="2-2-数据存储机制"><a href="#2-2-数据存储机制" class="headerlink" title="2.2 数据存储机制"></a>2.2 数据存储机制</h3><h4 id="数据的存放（机架感知）"><a href="#数据的存放（机架感知）" class="headerlink" title="数据的存放（机架感知）"></a>数据的存放（机架感知）</h4><p>一个HDFS集群通常有多个机架，机架间的通信通过交换机和路由器，而机架内部间的通信不需要。HDFS默认冗余复制因子是3。文件写入操作的时候，如果在集群内部，则把第一个副本放在发起写操作请求的数据节点上，如果是在集群外部，则从集群内部选一个最优状态的数据节点来存放。第二个副本放在与第一个副本不同的机架上。第三个副本放在和第一个副本相同的机架上。如果还有更多的副本，随机选择数据节点进行存储。</p>
<h4 id="数据的复制"><a href="#数据的复制" class="headerlink" title="数据的复制"></a>数据的复制</h4><p>HDFS的数据采用了流水线复制的策略。用户向HDFS中写入一个文件的时候，会先把文件写入到本地，并被分割成若干个块，每个块依次进行复制（假设第一个块写入完成后，会向第二个数据节点写入，接着向第三个数据节点写入。当第三个数据节点写入完成后，返回成功信息给第二个数据节点，第二个数据节点返回成功信息给第一个数据节点，第一个数据节点返回成功信息给NameNode，至此复制完成。！如果中途某数据节点写入失败，会另找一个数据节点进行写入），全部块完成后，文件写入完成。</p>
<h3 id="2-3-数据错误与恢复"><a href="#2-3-数据错误与恢复" class="headerlink" title="2.3 数据错误与恢复"></a>2.3 数据错误与恢复</h3><ol>
<li><p>名称节点出错</p>
<p>名称节点存储的是元数据，而其中的FsImage或者EditLog文件损坏，那么整个HDFS将不可用。Hadoop采用两种有两种机制来确保名称节点安全：第一种，同步名称节点上的信息到其他文件系统；第二种，运行第二名称节点，进行补救。但是可能会有数据丢失。</p>
</li>
<li><p>数据节点出错</p>
<p>在运行过程中，如果某数据节点宕机了，那么该文件就不完整了。因此，每个数据节点会向名称节点发送”心跳包“来报告自己的状态。如果发生故障，名称节点会获悉并判断数据块副本数量是否小于冗余因子，来复制新的副本。</p>
</li>
<li><p>数据出错</p>
<p>在网络传输中，有可能发生数据错误。或者，人为误操作把某文件给删除了，这样文件就不完整了。在客户端在读取到数据后，会采用md5和shal对数据块进行校验，以确保获取到正确的信息。</p>
</li>
</ol>
<h2 id="三、HDFS常用命令"><a href="#三、HDFS常用命令" class="headerlink" title="三、HDFS常用命令"></a>三、HDFS常用命令</h2><p>命令说明：hadoop fs 等价于 hdfs dfs。</p>
<ul>
<li>hadoop fs ：查看指令列表</li>
<li>hadoop fs -ls  显示当前目录结构， [-R] 递归显示目录结构</li>
<li>hadoop fs -mkdir 创建目录， [-p] 创建父目录</li>
<li>hadoop fs -rm   删除文件，[-R] 递归删除目录和文件</li>
<li>hadoop fs -put  [localsrc] [dst]  从本地加载文件到HDFS</li>
<li>hadoop fs -get  [dst] [localsrc]  从HDFS导出文件到本地</li>
<li>hadoop fs -copyFromLocal [localsrc] [dst]  从本地加载文件到HDFS，与put一致</li>
<li>hadoop fs -copyToLocal [dst] [localsrc]  从HDFS导出文件到本地，与get一致</li>
<li>hadoop fs -test -e  检测目录和文件是否存在，存在返回值$?为0，不存在返回1</li>
<li>hadoop fs -text  查看文件内容</li>
<li>hadoop fs -du  统计目录下各文件大小，单位字节。-du -s 汇总目录下文件大小，-du -h 显示单位</li>
<li>hadoop fs -tail  显示文件末尾</li>
<li>hadoop fs -cp [src] [dst] 从源目录复制文件到目标目录</li>
<li>hadoop fs -mv [src] [dst] 从源目录移动文件到目标目录</li>
<li>hadoop fs -appendToFile [src] [dst] 将源文件追加到目标文件末尾（不支持中间插入）</li>
</ul>
<h2 id="四、JAVA客户端API编写"><a href="#四、JAVA客户端API编写" class="headerlink" title="四、JAVA客户端API编写"></a>四、JAVA客户端API编写</h2><p>详细代码见GitHub</p>
<ul>
<li><p>pom.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置hadoop版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hadoop.3.version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">hadoop.3.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-hs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-jobclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-shuffle<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><p>HdfsUtils.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HdfsUtils class</span></span><br><span class="line"><span class="comment"> * HDFS常用操作工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/14 22:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HDFS_PATH = <span class="string">"hdfs://192.168.174.201:8020"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HDFS_USER = <span class="string">"wbw"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FileSystem fileSystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第三个参数是用户权限</span></span><br><span class="line">            fileSystem = FileSystem.get(URI.create(HDFS_PATH), conf, HDFS_USER);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path  目录路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      是否创建成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSystem.mkdirs(<span class="keyword">new</span> Path(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src   源路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dst   目标路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFromLocalFile</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        fileSystem.copyFromLocalFile(<span class="keyword">new</span> Path(src), <span class="keyword">new</span> Path(dst));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dst</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyToLocalFile</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        fileSystem.copyToLocalFile(<span class="keyword">new</span> Path(src), <span class="keyword">new</span> Path(dst));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path  文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b     是否递归删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      是否删除文件成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(String path, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSystem.delete(<span class="keyword">new</span> Path(path), b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件或目录是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path  文件或目录路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSystem.exists(<span class="keyword">new</span> Path(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path  文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      文件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">open</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FSDataInputStream fis = fileSystem.open(<span class="keyword">new</span> Path(path));</span><br><span class="line">        ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        IOUtils.copy(fis, bout, <span class="number">1024</span>);</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bout.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件重命名(移动)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldPath   旧路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPath   新路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>          是否操作成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">rename</span><span class="params">(String oldPath, String newPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileSystem.rename(<span class="keyword">new</span> Path(oldPath), <span class="keyword">new</span> Path(newPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看目录下的所有文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path  文件目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b     是否递归查看</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">(String path, Boolean b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt; iterator = fileSystem.listFiles(<span class="keyword">new</span> Path(path), b);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        listFiles(path, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h2 id="五、日志文件"><a href="#五、日志文件" class="headerlink" title="五、日志文件"></a>五、日志文件</h2><p>日志文件里面记录了HDFS的各种信息，现在我们来对日志文件进行解析一下。打开Hadoop临时文件目录查看文件。其中edits就是编辑日志，fsimage就是镜像文件，而edits_inprogress则是HDFS正在运行使用的日志。</p>
<p><a href="/postImages/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" class="lazyload"></a></p>
<h3 id="5-1-镜像文件"><a href="#5-1-镜像文件" class="headerlink" title="5.1 镜像文件"></a>5.1 镜像文件</h3><p>首先我们来看一下当前HDFS文件结构：</p>
<p><a href="/postImages/HDFS%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/HDFS%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" class="lazyload"></a></p>
<p>查看镜像文件命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs oiv -i fsimage_0000000000000000036 -o a.txt -p XML</span><br><span class="line"></span><br><span class="line">-i: 镜像文件路径</span><br><span class="line">-o: 将内容输出到指定路径</span><br><span class="line">-p: 以指定解析，这里选XML格式</span><br></pre></td></tr></table></figure></div>

<p>查看 a.txt 内容（这里推荐cat内容后，复制到IDEA下，方便阅览。这里仅列出部分节点内容，同时可以打开WEB-UI来进行信息对照）：</p>
<ul>
<li><p>目录信息节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>16385<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>DIRECTORY<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目录名（这里为根目录所以为空） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间戳 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1581692427585<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 权限 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span>&gt;</span>wbw:supergroup:0755<span class="tag">&lt;/<span class="name">permission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nsquota</span>&gt;</span>9223372036854775807<span class="tag">&lt;/<span class="name">nsquota</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dsquota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">dsquota</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>16389<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>DIRECTORY<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1581694636967<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span>&gt;</span>wbw:supergroup:0755<span class="tag">&lt;/<span class="name">permission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nsquota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">nsquota</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dsquota</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">dsquota</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>文件信息节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>16391<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>FILE<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>b.txt<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 副本数（文件夹没有副本数） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">replication</span>&gt;</span>3<span class="tag">&lt;/<span class="name">replication</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间戳 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mtime</span>&gt;</span>1581692458378<span class="tag">&lt;/<span class="name">mtime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atime</span>&gt;</span>1581692458090<span class="tag">&lt;/<span class="name">atime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">preferredBlockSize</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">preferredBlockSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span>&gt;</span>wbw:supergroup:0644<span class="tag">&lt;/<span class="name">permission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blocks</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">block</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 块ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>1073741826<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">genstamp</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">genstamp</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 字节数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">numBytes</span>&gt;</span>11<span class="tag">&lt;/<span class="name">numBytes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blocks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">storagePolicyId</span>&gt;</span>0<span class="tag">&lt;/<span class="name">storagePolicyId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">inode</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>目录树（维护HDFS目录结构）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">INodeDirectorySection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 根目录ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span>&gt;</span>16385<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 子目录/文件（这里可以对照上面的目录节点ID，发现是user子目录） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span>16389<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span>&gt;</span>16389<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span>16393<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span>16392<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span>16390<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span>&gt;</span>16392<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span>16391<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">INodeDirectorySection</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h3 id="5-2-编辑日志"><a href="#5-2-编辑日志" class="headerlink" title="5.2 编辑日志"></a>5.2 编辑日志</h3><p>查看编辑日志命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs oev -i edits_0000000000000000042-0000000000000000043 -o b.txt -p XML</span><br><span class="line"></span><br><span class="line">-i: 镜像文件路径</span><br><span class="line">-o: 将内容输出到指定路径</span><br><span class="line">-p: 以指定解析，这里选XML格式</span><br></pre></td></tr></table></figure></div>

<p>操作信息节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RECORD</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OPCODE</span>&gt;</span>OP_MKDIR<span class="tag">&lt;/<span class="name">OPCODE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DATA</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TXID</span>&gt;</span>7<span class="tag">&lt;/<span class="name">TXID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LENGTH</span>&gt;</span>0<span class="tag">&lt;/<span class="name">LENGTH</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">INODEID</span>&gt;</span>16386<span class="tag">&lt;/<span class="name">INODEID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PATH</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">PATH</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TIMESTAMP</span>&gt;</span>1581691491684<span class="tag">&lt;/<span class="name">TIMESTAMP</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">USERNAME</span>&gt;</span>wbw<span class="tag">&lt;/<span class="name">USERNAME</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">GROUPNAME</span>&gt;</span>supergroup<span class="tag">&lt;/<span class="name">GROUPNAME</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MODE</span>&gt;</span>493<span class="tag">&lt;/<span class="name">MODE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">PERMISSION_STATUS</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DATA</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RECORD</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="5-3-日志滚动"><a href="#5-3-日志滚动" class="headerlink" title="5.3 日志滚动"></a>5.3 日志滚动</h3><p>打开WEB-UI的“Startup Progress”菜单，从图上可以看出HDFS启动后，显示加载了fsimage然后再加载edits，整个操作在安全模式下进行：</p>
<p><a href="/postImages/HDFS%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%811.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/HDFS%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%811.png" class="lazyload"></a></p>
<p><a href="/postImages/HDFS%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%812.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/HDFS%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%812.png" class="lazyload"></a></p>
<h4 id="安全模式（read-only）"><a href="#安全模式（read-only）" class="headerlink" title="安全模式（read-only）"></a>安全模式（read-only）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hdfs dfsadmin -safemode  enter		&#x2F;&#x2F;进入（进入后无法进行删除等操作）</span><br><span class="line">$&gt;hdfs dfsadmin -safemode  get			&#x2F;&#x2F;查看</span><br><span class="line">$&gt;hdfs dfsadmin -safemode  leave		&#x2F;&#x2F;退出</span><br><span class="line">$&gt;hdfs dfsadmin -safemode  wait			&#x2F;&#x2F;等待</span><br></pre></td></tr></table></figure></div>



<h4 id="保存名字空间（手动滚动）"><a href="#保存名字空间（手动滚动）" class="headerlink" title="保存名字空间（手动滚动）"></a>保存名字空间（手动滚动）</h4><p>HDFS在启动的时候，会自动进行滚动。但是我们也可以手动对其进行滚动操作。</p>
<p>手动滚动前，编号是46：</p>
<p><a href="/postImages/%E6%BB%9A%E5%8A%A81.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%BB%9A%E5%8A%A81.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入安全模式（滚动操作只能在安全模式下进行）：</span><br><span class="line">$&gt;hdfs dfsadmin -safemode enter</span><br><span class="line">手动滚动：</span><br><span class="line">$&gt;hdfs dfsamdin -saveNamespace</span><br><span class="line">推出安全模式</span><br><span class="line">$&gt;hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure></div>

<p>手动滚动后，编号是48：</p>
<p><a href="/postImages/%E6%BB%9A%E5%8A%A82.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%BB%9A%E5%8A%A82.png" class="lazyload"></a></p>
<p>对比上面2图，可以发现：</p>
<ol>
<li>edits文件多了一个46-47，原本是44-45</li>
<li>fsimage多了一个47，少了43（fsimage一般保留2个，用于滚动）</li>
<li>同时运行时日志变成48</li>
</ol>
<h2 id="六、配额管理"><a href="#六、配额管理" class="headerlink" title="六、配额管理"></a>六、配额管理</h2><p>HDFS可以对目录数量和可用空间大小进行限制。</p>
<h3 id="6-1-目录配额"><a href="#6-1-目录配额" class="headerlink" title="6.1 目录配额"></a>6.1 目录配额</h3><h4 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-setQuota &lt;quota&gt; &lt;dirname&gt;...&lt;dirname&gt;: Set the quota &lt;quota&gt; for each directory &lt;dirName&gt;.</span><br><span class="line">		The directory quota is a long integer that puts a hard limit</span><br><span class="line">		on the number of names in the directory tree</span><br><span class="line">		For each directory, attempt to set the quota. An error will be reported if</span><br><span class="line">		1. quota is not a positive integer, or</span><br><span class="line">		2. User is not an administrator, or</span><br><span class="line">		3. The directory does not exist or is a file.</span><br><span class="line">		Note: A quota of 1 would force the directory to remain empty.</span><br></pre></td></tr></table></figure></div>

<p>可以看到该命令会限制被限制目录下的文件数量（包括文件和文件夹嵌套），如果设置1，表示空目录，即自身占1个数量。</p>
<h4 id="执行命名"><a href="#执行命名" class="headerlink" title="执行命名"></a>执行命名</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs dfsadmin -setQuota 3 &#x2F;user&#x2F;wbw</span><br><span class="line">$hdfs dfs -put quota1.txt &#x2F;user&#x2F;wbw&#x2F;</span><br><span class="line">$hdfs dfs -put quota2.txt &#x2F;user&#x2F;wbw&#x2F;</span><br><span class="line">$hdfs dfs -put quota3.txt &#x2F;user&#x2F;wbw&#x2F;</span><br><span class="line">put: The NameSpace quota (directories and files) of directory &#x2F;user&#x2F;wbw is exceeded: quota&#x3D;3 file count&#x3D;4</span><br></pre></td></tr></table></figure></div>



<h4 id="清除配额"><a href="#清除配额" class="headerlink" title="清除配额"></a>清除配额</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs dfsadmin -clrQuota &lt;dirname&gt;...&lt;dirname&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="6-2-空间配额"><a href="#6-2-空间配额" class="headerlink" title="6.2 空间配额"></a>6.2 空间配额</h3><h4 id="命令介绍-1"><a href="#命令介绍-1" class="headerlink" title="命令介绍"></a>命令介绍</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hdfs dfsadmin -setSpaceQuota &lt;quota&gt; &lt;dirname&gt;</span><br></pre></td></tr></table></figure></div>

<p>注意：副本为3的1GB文件将消耗3GB的配额。同时还可设置 quota 的单位(e.g. 50t is 50TB, 5m is 5MB, 3p is 3PB).，默认是字节。</p>
<h4 id="清除配额-1"><a href="#清除配额-1" class="headerlink" title="清除配额"></a>清除配额</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hdfs dfsadmin -clrSpaceQuota &lt;dirname&gt;...&lt;dirname&gt;</span><br></pre></td></tr></table></figure></div>



<h2 id="七、快照管理"><a href="#七、快照管理" class="headerlink" title="七、快照管理"></a>七、快照管理</h2><h3 id="7-1-描述"><a href="#7-1-描述" class="headerlink" title="7.1 描述"></a>7.1 描述</h3><p>迅速对文件(夹)进行备份。不产生新数据文件（即源文件和快照对应文件的存储块ID是相同的）。</p>
<p>默认是禁用快照，要想进行快照，要先启用。</p>
<h3 id="7-2-命令"><a href="#7-2-命令" class="headerlink" title="7.2 命令"></a>7.2 命令</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hdfs dfsadmin -allowSnapshot dir1								&#x2F;&#x2F;在dir1启用快照</span><br><span class="line">$&gt;hdfs dfsadmin -disallowSnapshot dir1							&#x2F;&#x2F;在dir1禁用快照</span><br><span class="line">$&gt;hdfs dfs -createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]		&#x2F;&#x2F;创建快照</span><br><span class="line">$&gt;hdfs dfs -renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;	&#x2F;&#x2F;重命名</span><br><span class="line">$&gt;hdfs dfs -deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;			&#x2F;&#x2F;删除快照</span><br></pre></td></tr></table></figure></div>



<h3 id="7-3-效果"><a href="#7-3-效果" class="headerlink" title="7.3 效果"></a>7.3 效果</h3><p>执行如下命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$hdfs dfsadmin -allowSnapshot &#x2F;user&#x2F;wbw</span><br><span class="line">Allowing snapshot on &#x2F;user&#x2F;wbw succeeded</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$hdfs dfs -createSnapshot &#x2F;user&#x2F;wbw ss1</span><br><span class="line">Created snapshot &#x2F;user&#x2F;wbw&#x2F;.snapshot&#x2F;ss1</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$echo hello &gt; tmp.txt</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$ls</span><br><span class="line">downloads  hadoop  tmp.txt</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$hdfs dfs -appendToFile tmp.txt &#x2F;user&#x2F;wbw&#x2F;quota1.txt</span><br></pre></td></tr></table></figure></div>

<p>可以看到快照会在该目录下新建文件，如果此时修改源文件，那么快照的内容是不会变的（如图）：</p>
<p><a href="/postImages/%E5%BF%AB%E7%85%A71.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%BF%AB%E7%85%A71.png" class="lazyload"></a></p>
<p><a href="/postImages/%E5%BF%AB%E7%85%A72.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%BF%AB%E7%85%A72.png" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop学习笔记（五）HA</title>
    <url>/2020/02/26/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89HA/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记（五）HA"><a href="#Hadoop学习笔记（五）HA" class="headerlink" title="Hadoop学习笔记（五）HA"></a>Hadoop学习笔记（五）HA</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>high availability（HA, 高可用)。之前我们的NameNode只有一个节点，这就容易造成单点故障，即NameNode一旦出现问题，整个集群将不可用。因此HA就显得重要了。它的特点：</p>
<ol>
<li>拥有两个名称节点，分别处于active（激活态）、standby（待命）。</li>
<li>与客户端进行交互的只有处于active，standby不参与。</li>
<li>两个节点都和 Journal Node（JN，存放编辑日志的节点）守护进程构成组的进行通信。</li>
<li>同一时刻，只能有一个处于active。</li>
<li>脑裂：即两个节点都是激活态（这是非常严重的）。为了防止脑裂,JNs只允许同一时刻只有一个节点向其写数据。容灾发生的时候，成为active的节点的namenode接管向jn写入的工作。</li>
</ol>
<h2 id="二、硬件资源"><a href="#二、硬件资源" class="headerlink" title="二、硬件资源"></a>二、硬件资源</h2><ol>
<li><p>两个名称节点硬件配置要相同</p>
</li>
<li><p>JN节点：轻量级进程，至少3个节点，允许挂掉的节点数为（n - 2 ）/ 2。</p>
<p>note：因为有了JN，不再需要运行辅助名称节点。</p>
</li>
</ol>
<h2 id="三、部署HA"><a href="#三、部署HA" class="headerlink" title="三、部署HA"></a>三、部署HA</h2><h3 id="3-1-前期准备"><a href="#3-1-前期准备" class="headerlink" title="3.1 前期准备"></a>3.1 前期准备</h3><p>因为需要两个节点作为NameNode（而目前的规划是：名称节点 s201，数据节点 s202,s203,s204，辅助名称节点s206），我们知道在HA下，是不需要辅助名称节点的。因此，将s205作为另一台NameNode。</p>
<p>目前只有s201可以SSH到其余所有节点，而s205同样也需要。</p>
<ol>
<li><p>s205生成SSH</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>把公钥发送到s201</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s205 &#x2F;home&#x2F;wbw&#x2F;.ssh]$scp ~&#x2F;.ssh&#x2F;id_rsa.pub wbw@s201:&#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;id_rsa.pub.s205</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在s201上将公钥分发到所有节点上，并追加到列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;.ssh]$xsync.sh id_rsa.pub.s205</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;.ssh]$xcall.sh &quot;cat &#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;id_rsa.pub.s205 &gt;&gt; &#x2F;home&#x2F;wbw&#x2F;.ssh&#x2F;authorized_keys&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>验证s201和s205是否可以SSH所有节点</p>
</li>
<li><p>记得把s201上的黑白名单也拷过去</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$scp dfs.hosts wbw@s205:&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;dfs.hosts</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$scp dfs.hosts.exclude wbw@s205:&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;dfs.hosts.exclude</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-2-配置XML（HDFS）"><a href="#3-2-配置XML（HDFS）" class="headerlink" title="3.2 配置XML（HDFS）"></a>3.2 配置XML（HDFS）</h3><ol>
<li><p>在s201上，复制一份完全分布式full的配置，取名为ha</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$cp -r full ha</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在ha中修改hdfs-site.xml配置文件信息（主要说明谁是NN谁是JN）</p>
<ul>
<li><p>配置nameservice</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.ha.namenodes.[nameservice ID]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- myucluster下的名称节点两个id(只能有2个) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.namenode.rpc-address.[nameservice ID].[name node ID] </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置每个nn的rpc地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s205:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.namenode.http-address.[nameservice ID].[name node ID]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置每个nn的webui端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s205:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.namenode.shared.edits.dir</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 名称节点共享编辑目录,即JN节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://s202:8485;s203:8485;s204:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.client.failover.proxy.provider.[nameservice ID]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- java类，client使用它判断哪个节点是激活态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.ha.fencing.methods</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 脚本列表或者java类，在容灾保护激活态的nn. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        sshfence</span><br><span class="line">        shell(/bin/true)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dfs.journalnode.edits.dir</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置JN存放edit的本地路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/hadoop/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>在ha中修改core-site.xml配置文件信息（主要说明谁是NN谁是JN）</p>
<ul>
<li><p>配置hdfs文件系统名称服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>最后将ha分发到所有节点上，并且把hadoop连接到ha</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$xsync.sh ha</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$xcall.sh &quot;ln -sfT &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;ha &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop&quot;</span><br><span class="line">查看是否成功</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc]$xcall.sh &quot;ls -al &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;&quot;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-3-数据迁移"><a href="#3-3-数据迁移" class="headerlink" title="3.3 数据迁移"></a>3.3 数据迁移</h3><ol>
<li><p>停掉所有Hadoop进程</p>
</li>
<li><p>在JN节点（s202,s203,s204）上分别启动JN进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw]$hadoop-daemon.sh start journalnode</span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw]$hadoop-daemon.sh start journalnode</span><br><span class="line">[wbw@s204 &#x2F;home&#x2F;wbw]$hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/HA1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/HA1.png" class="lazyload"></a></p>
</li>
<li><p>启动jn之后，在两个NN之间进行disk元数据同步</p>
<ul>
<li><p>如果是全新集群，先format文件系统,只需要在一个nn上执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure></div>

<p>如果之前有数据，但是不想要了，想要一个全新的。那么就直接删除所有节点的日志和本地数据。然后执行该命令。（即全新，保证两个NN内容都是空的）</p>
</li>
<li><p>如果将非HA集群转换成HA集群，复制原NameNode的metadata到另一个nn</p>
<ol>
<li><p>到s201将元数据信息复制到s205</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$scp -r &#x2F;home&#x2F;wbw&#x2F;hadoop&#x2F;dfs wbw@s205:&#x2F;home&#x2F;wbw&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在新的nn(未格式化的nn)【这里为s205】上运行一下命令，实现待命状态引导。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要s201的namenode为启动状态,提示是否格式化,选择N</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$hadoop-daemon.sh start namenode</span><br><span class="line">[wbw@s205 &#x2F;home&#x2F;wbw]$hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在一个NN上执行以下命令，完成edit日志到jn节点的传输。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$hdfs namenode -initializeSharedEdits</span><br><span class="line"># 查看s202,s203，s204是否有edit数据.</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
</li>
</ul>
</li>
<li><p>启动所有节点</p>
<ul>
<li><p>在s201</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hadoop-daemon.sh start namenode		&#x2F;&#x2F;启动名称节点</span><br><span class="line">$&gt;hadoop-daemons.sh start datanode		&#x2F;&#x2F;启动所有数据节点</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在s205</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hadoop-daemon.sh start namenode		&#x2F;&#x2F;启动名称节点</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>查看web-UI（如果zookeeper没有配置，那么s201,s205将都出现standby）</p>
</li>
</ol>
<h2 id="四、管理命令"><a href="#四、管理命令" class="headerlink" title="四、管理命令"></a>四、管理命令</h2><p>假如你没有配置zookeeper，这时候如果查看WEB-UI发现2个都是standby状态，说明不能自动切换现在，还需要ZK才可以自动。现在只能手动切换</p>
<h3 id="4-1-切换激活态"><a href="#4-1-切换激活态" class="headerlink" title="4.1 切换激活态"></a>4.1 切换激活态</h3><p>$&gt;hdfs haadmin -transitionToActive nn1</p>
<h3 id="4-2-切换待命态"><a href="#4-2-切换待命态" class="headerlink" title="4.2 切换待命态"></a>4.2 切换待命态</h3><p>$&gt;hdfs haadmin -transitionToStandby nn1</p>
<h3 id="4-3-强行激活"><a href="#4-3-强行激活" class="headerlink" title="4.3 强行激活"></a>4.3 强行激活</h3><p>会出现2个active很危险！！！</p>
<p>$&gt;hdfs haadmin -transitionToActive –forceactive nn2</p>
<h3 id="4-4-模拟容灾"><a href="#4-4-模拟容灾" class="headerlink" title="4.4 模拟容灾"></a>4.4 模拟容灾</h3><p>模拟容灾演示,从nn1切换到nn2</p>
<p>$&gt;hdfs haadmin -failover nn1 nn2</p>
<h2 id="五、HA自动容灾"><a href="#五、HA自动容灾" class="headerlink" title="五、HA自动容灾"></a>五、HA自动容灾</h2><p>如果要实现自动容灾，那么请移步”ZooKeeper学习笔记“文章，先给集群装上zookeeper然后进行相应配置。</p>
<p>【NOTE】如果你的zookeeper不够干净，即使用操作过。那么先进行清理操作：删除zookeeper数据目录中的版本信息verson目录。然后启动ZK集群。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 之前有对集群操作过，所以进行数据清理</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$rm -r version-2&#x2F;</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$rm -r version-2&#x2F;</span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$rm -r version-2&#x2F;</span><br><span class="line"># 开启所有ZK节点服务，查看内容是否清理干净。这里我用之前的测试类JAVAAPI来查看</span><br><span class="line">&#x2F;</span><br><span class="line">&#x2F;zookeeper</span><br><span class="line">&#x2F;zookeeper&#x2F;quota</span><br></pre></td></tr></table></figure></div>



<h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>自动容灾引入两个组件，zk quarum + zk容灾控制器(ZKFC)。</p>
<p>运行NN的主机还要运行ZKFC进程，主要负责: </p>
<pre><code>1. 健康监控
2. session管理
3. 选举</code></pre><h3 id="5-2-HDFS自动容灾"><a href="#5-2-HDFS自动容灾" class="headerlink" title="5.2 HDFS自动容灾"></a>5.2 HDFS自动容灾</h3><ol>
<li><p>停掉所有进程</p>
</li>
<li><p>修改hdfs-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[wbw@s201 /soft/hadoop/etc/ha]$vi hdfs-site.xml</span><br><span class="line"># 添加如下内容</span><br><span class="line"><span class="comment">&lt;!-- 启动自动容灾 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改core-site.xml（我的zk集群规划为s201,s202,s203）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 添加新内容</span><br><span class="line"><span class="comment">&lt;!-- 指定zk连接地址，s生产环境一般用IP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201:2181,s202:2181,s203:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发以上两个文件到所有节点</p>
</li>
<li><p>登录其中一台NN（s201），在ZK中初始化HA状态。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动hdfs进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$start-dfs.sh</span><br><span class="line"></span><br><span class="line">Starting namenodes on [s201 s205]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting journal nodes [s202 s204 s203]</span><br><span class="line">Starting ZK Failover Controllers on NN hosts [s201 s205]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看zookeeper会发现，多了以下内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;hadoop-ha</span><br><span class="line">&#x2F;hadoop-ha&#x2F;mycluster</span><br><span class="line">&#x2F;hadoop-ha&#x2F;mycluster&#x2F;ActiveBreadCrumb</span><br><span class="line">&#x2F;hadoop-ha&#x2F;mycluster&#x2F;ActiveStandbyElectorLock</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看WEB-UI，可以看到可以自动切换成active了</p>
<p><a href="/postImages/AUTOHA1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/AUTOHA1.png" class="lazyload"></a></p>
<p><a href="/postImages/AUTOHA2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/AUTOHA2.png" class="lazyload"></a></p>
</li>
<li><p>测试自动容灾（当前active在s201，则kill -9 掉s201的nn）</p>
<p><a href="/postImages/AUTOHA3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/AUTOHA3.png" class="lazyload"></a></p>
<p>可以看到可以实现自动容灾了。</p>
</li>
</ol>
<h3 id="5-3-RM自动容灾"><a href="#5-3-RM自动容灾" class="headerlink" title="5.3 RM自动容灾"></a>5.3 RM自动容灾</h3><p>resourcemanager的自动容灾也是需要zk来实现</p>
<ol>
<li><p>配置yarn-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[wbw@s201 /soft/hadoop/etc/ha]$vi yarn-site.xml</span><br><span class="line"># 添加如下内容</span><br><span class="line"><span class="comment">&lt;!-- 开启yarn的HA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置名字ID --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置RM节点地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s205<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置RM，WEB-UI端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s205:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置ZK集群 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>s201:2181,s202:2181,s203:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发到所有节点</p>
</li>
<li><p>启动yarn</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$start-yarn.sh</span><br><span class="line"></span><br><span class="line">Starting resourcemanagers on [ s201 s205]</span><br><span class="line">Starting nodemanagers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>管理命令查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;ha]$yarn rmadmin -getServiceState rm1</span><br><span class="line">standby</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;ha]$yarn rmadmin -getServiceState rm2</span><br><span class="line">active</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>WEB-UI查看（IP:8088 –&gt; Aboute）</p>
<p><a href="/postImages/AUTOHA4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/AUTOHA4.png" class="lazyload"></a></p>
<p><a href="/postImages/AUTOHA5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/AUTOHA5.png" class="lazyload"></a></p>
</li>
<li><p>模拟容灾</p>
<ul>
<li><p>首先检查JPS是否2个节点上的RM进程都开启，如果没有，则进入相应节点上启动。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动单个RM节点</span><br><span class="line">$yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>杀掉active的RM进程（这里是s205）</p>
</li>
<li><p>查看状态</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;ha]$yarn rmadmin -getServiceState rm1</span><br><span class="line">active</span><br></pre></td></tr></table></figure></div>

<p>自动容灾成功。</p>
</li>
</ul>
</li>
</ol>
<h3 id="5-4-集群总结"><a href="#5-4-集群总结" class="headerlink" title="5.4 集群总结"></a>5.4 集群总结</h3><p>自此，应该可以说所有的相关设置都已经完成了。现在来总结下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;ha]$xcall.sh jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2128 NameNode</span><br><span class="line">3412 Jps</span><br><span class="line">1913 DFSZKFailoverController</span><br><span class="line">1340 QuorumPeerMain</span><br><span class="line">2638 ResourceManager</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1728 NodeManager</span><br><span class="line">1419 DataNode</span><br><span class="line">1948 Jps</span><br><span class="line">1309 QuorumPeerMain</span><br><span class="line">1485 JournalNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1296 QuorumPeerMain</span><br><span class="line">1398 DataNode</span><br><span class="line">1465 JournalNode</span><br><span class="line">1707 NodeManager</span><br><span class="line">1934 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1861 Jps</span><br><span class="line">1337 DataNode</span><br><span class="line">1403 JournalNode</span><br><span class="line">1643 NodeManager</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s205 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1332 NameNode</span><br><span class="line">1396 DFSZKFailoverController</span><br><span class="line">2180 Jps</span><br><span class="line">2123 ResourceManager</span><br></pre></td></tr></table></figure></div>

<h4 id="集群规划情况"><a href="#集群规划情况" class="headerlink" title="集群规划情况"></a>集群规划情况</h4><p>HDFS</p>
<ul>
<li>NameNode：s201、s205</li>
<li>DateNode：s202、s203、s204</li>
</ul>
<p>Yarn</p>
<ul>
<li>ResourceManager：s201、s205</li>
<li>NodeManager：s202、s203、s204</li>
</ul>
<p>ZooKeeper</p>
<ul>
<li>DFSZKFailoverController(ZKFC)：s201、s205</li>
<li>QuorumPeerMain：s201、s202、s203</li>
</ul>
<p>HA</p>
<ul>
<li>JournalNode：s202、s203、s204</li>
</ul>
<h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$zkServer.sh start</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw]$zkServer.sh start</span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw]$zkServer.sh start</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$start-dfs.sh</span><br><span class="line">Starting namenodes on [s201 s205]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting journal nodes [s202 s204 s203]</span><br><span class="line">Starting ZK Failover Controllers on NN hosts [s201 s205]</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$start-yarn.sh</span><br><span class="line">Starting resourcemanagers on [ s201 s205]</span><br><span class="line">Starting nodemanagers</span><br></pre></td></tr></table></figure></div>

<h4 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$stop-yarn.sh</span><br><span class="line">Stopping nodemanagers</span><br><span class="line">Stopping resourcemanagers on [ s201 s205]</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$stop-dfs.sh</span><br><span class="line">Stopping namenodes on [s201 s205]</span><br><span class="line">Stopping datanodes</span><br><span class="line">Stopping journal nodes [s202 s204 s203]</span><br><span class="line">Stopping ZK Failover Controllers on NN hosts [s201 s205]</span><br><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$zkServer.sh stop</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw]$zkServer.sh stop</span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw]$zkServer.sh stop</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>HA</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop学习笔记（四）数据的输入与输出</title>
    <url>/2020/02/24/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记（四）数据的输入与输出"><a href="#Hadoop学习笔记（四）数据的输入与输出" class="headerlink" title="Hadoop学习笔记（四）数据的输入与输出"></a>Hadoop学习笔记（四）数据的输入与输出</h1><p>先来看一张流程图：</p>
<p><a href="/postImages/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F1.png" class="lazyload"></a></p>
<p>我们可以看到在MR前后还有一些关于文件输入与输出的内容。首先是InputFormat用来接受输入文件，并对其进行切片。然后通过RecordReader对这些切片进行读取数据，产生KV对再传给MAP来处理。</p>
<h2 id="一、压缩和解压缩"><a href="#一、压缩和解压缩" class="headerlink" title="一、压缩和解压缩"></a>一、压缩和解压缩</h2><p>在分析split切片的时候，有看到一个“可压缩”关键字。其实，在进行切片的时候，会先判断这个文件是否是可压缩的，那么这个压缩有什么用？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否可以切割代码片段</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isSplitable(job, path)) &#123;</span><br><span class="line">    <span class="keyword">long</span> blockSize = file.getBlockSize();</span><br><span class="line">    <span class="keyword">long</span> splitSize = <span class="keyword">this</span>.computeSplitSize(blockSize, minSize, maxSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> bytesRemaining;</span><br><span class="line">    <span class="keyword">int</span> blkIndex;</span><br><span class="line">    <span class="keyword">for</span>(bytesRemaining = length; (<span class="keyword">double</span>)bytesRemaining / (<span class="keyword">double</span>)splitSize &gt; <span class="number">1.1</span>D; bytesRemaining -= splitSize) &#123;</span><br><span class="line">        blkIndex = <span class="keyword">this</span>.getBlockIndex(blkLocations, length - bytesRemaining);</span><br><span class="line">        splits.add(<span class="keyword">this</span>.makeSplit(path, length - bytesRemaining, splitSize, blkLocations[blkIndex].getHosts(), blkLocations[blkIndex].getCachedHosts()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bytesRemaining != <span class="number">0L</span>) &#123;</span><br><span class="line">        blkIndex = <span class="keyword">this</span>.getBlockIndex(blkLocations, length - bytesRemaining);</span><br><span class="line">        splits.add(<span class="keyword">this</span>.makeSplit(path, length - bytesRemaining, bytesRemaining, blkLocations[blkIndex].getHosts(), blkLocations[blkIndex].getCachedHosts()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOG.isDebugEnabled() &amp;&amp; length &gt; Math.min(file.getBlockSize(), minSize)) &#123;</span><br><span class="line">        LOG.debug(<span class="string">"File is not splittable so no parallelization is possible: "</span> + file.getPath());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-1-进行压缩的原因"><a href="#1-1-进行压缩的原因" class="headerlink" title="1.1 进行压缩的原因"></a>1.1 进行压缩的原因</h3><ol>
<li><p>通过压缩来减少文件传输量的大小，把网络带宽的压力转移给了CPU（因为需要解压、解压缩）。</p>
</li>
<li><p>很多元数据，而且又不经常用，那么就可以进行压缩后再存储，节省磁盘空间。</p>
</li>
</ol>
<h3 id="1-2-安装snappy压缩库-centos7-【未成功】"><a href="#1-2-安装snappy压缩库-centos7-【未成功】" class="headerlink" title="1.2 安装snappy压缩库(centos7)【未成功】"></a>1.2 安装snappy压缩库(centos7)【未成功】</h3><p>如果安装不了snappy可以试试下面的LZO。(反正我是没有成功)</p>
<p>步骤参考：<a href="https://blog.csdn.net/qq_27078095/article/details/56865443【在hadoop2.X集群中安装压缩工具snappy（主要用于hbase）】" target="_blank" rel="noopener">https://blog.csdn.net/qq_27078095/article/details/56865443【在hadoop2.X集群中安装压缩工具snappy（主要用于hbase）】</a></p>
<ol>
<li><p>安装支持环境</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install gcc gcc-c++ libtool cmake zlib-devel maven</span><br><span class="line">（如果maven很慢参考手动安装）</span><br></pre></td></tr></table></figure></div>

<p>安装MAVEN</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.51cto.com&#x2F;13581826&#x2F;2093965</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>下载基础安装包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop-2.6.0-cdh5.9.0-src.tar.gz（下载地址：http:&#x2F;&#x2F;archive.cloudera.com&#x2F;cdh5&#x2F;cdh&#x2F;5&#x2F;hadoop-2.6.0-cdh5.9.0-src.tar.gz，也可下载二进制包，内包含src源码：hadoop-2.6.0-cdh5.9.0-tar.gz）</span><br><span class="line"></span><br><span class="line">snappy1.1.1.tar.gz（下载地址：http:&#x2F;&#x2F;pkgs.fedoraproject.org&#x2F;repo&#x2F;pkgs&#x2F;snappy&#x2F;snappy-1.1.1.tar.gz&#x2F;8887e3b7253b22a31f5486bca3cbc1c2&#x2F;snappy-1.1.1.tar.gz）</span><br><span class="line"></span><br><span class="line">protobuf-2.5.0.tar.gz（下载地址：https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;protobuf&#x2F;releases&#x2F;tag&#x2F;v2.5.0 建议选择2.5.0版本，不支持最新版本）</span><br></pre></td></tr></table></figure></div>
</li>
<li><pre><code>下载地址
https://launchpad.net/ubuntu/+source/snappy/1.1.4-1
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 安装snappy</span><br></pre></td></tr></table></figure></div>
$tar -zxvf snappy-1.1.1.tar.gz
$cd snappy-1.1.1
$./configure
$make
$sudo make install
$ll /usr/local/lib/ | grep snappy    #查看snappy是否安装完成
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 安装protobuf（可能有点久）</span><br></pre></td></tr></table></figure></div>
$tar -zxvf protobuf-2.5.0.tar.gz
$cd protobuf-2.5.0
$./configure
$make
$sudo make install
$protoc --version        #验证安装
libprotoc 2.5.0
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. 编译生成hadoop-native-Libraries（包括snappy）【据说很慢！原作者花了20小时？】</span><br></pre></td></tr></table></figure></div>
$tar -zxvf hadoop-2.6.0-cdh5.9.0-src.tar.gz
$cd hadoop-2.6.0-cdh5.9.0
$mvn package -DskipTests -Pdist,native -Dtar -Dsnappy.lib=/usr/local/lib -Dbundle.snappy
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">编译成功后，snappy的so文件会生成在如下目录：</span><br></pre></td></tr></table></figure></div>
hadoop-2.6.0-cdh5.9.0/hadoop-dist/target/hadoop-2.6.0-cdh5.9.0/lib/native
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">将此目录下的文件拷贝到hadoop集群中的hadoop下的lib&#x2F;native目录没有则新建，各节点均需拷贝。</span><br><span class="line"></span><br><span class="line">修改配置文件：</span><br></pre></td></tr></table></figure></div>
$cat core-site.xml
&lt;property&gt;
        &lt;name&gt;io.compression.codecs&lt;/name&gt;
        &lt;value&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/value&gt;
&lt;/property&gt;
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">测试是否安装成功:</span><br></pre></td></tr></table></figure></div>
$ hadoop checknative -a
hadoop:  true ...../hadoop-2.6.0-cdh5.9.0/lib/native/libhadoop.so
zlib:    true /usr/local/lib/libz.so.1
snappy:  true ...../hadoop-2.6.0-cdh5.9.0/lib/native/libsnappy.so.1
lz4:     true revision:10301
bzip2:   false 
openssl: true /lib64/libcrypto.so
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">### 1.3 安装LZO库文件</span><br><span class="line"></span><br><span class="line">如果上面的snappy安装不了，可以试试LZO。但是Hadoop中没有LZO的类，所以我们要手动安装。</span><br><span class="line"></span><br><span class="line">1. 修改项目pom文件</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;xml</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.anarres.lzo&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;lzo-hadoop&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div></code></pre></li>
<li><p>在centos上安装lzo库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo yum -y install lzo</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用mvn命令下载工件中的所有依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入pom.xml所在目录，运行cmd：</span><br><span class="line">mvn -DoutputDirectory&#x3D;.&#x2F;lib -DgroupId&#x3D;XXX -DartifactId&#x3D;模块 -Dversion&#x3D;版本 dependency:copy-dependencies</span><br><span class="line"></span><br><span class="line">比如我自己的：</span><br><span class="line">mvn -DoutputDirectory&#x3D;.&#x2F;lib -DgroupId&#x3D;cn.wangbowen -DartifactId&#x3D;Hadoop -Dversion&#x3D;1.0-SNAPSHOT dependency:copy-dependencies</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在项目lib下会生成项目依赖所有的第三方jar</p>
</li>
<li><p>找出lzo-hadoop.jar + lzo-core.jar复制到hadoop的响应目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp lzo-core-1.0.0.jar &#x2F;soft&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;</span><br><span class="line">$cp lzo-hadoop-1.0.0.jar &#x2F;soft&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="1-4-代码示例"><a href="#1-4-代码示例" class="headerlink" title="1.4 代码示例"></a>1.4 代码示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.hdfs.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ReflectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CompressUtils class</span></span><br><span class="line"><span class="comment"> * 压缩解压缩工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/19 16:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompressUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要压缩的文件路径[D:\tmp\a.txt]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZIP_IN_FILE_PATH = <span class="string">"/home/wbw/tmp/a.txt"</span>;</span><br><span class="line">    <span class="comment">// 压缩文件输出路径（不加后缀名）[D:\tmp\b]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZIP_OUT_FILE_PATH = <span class="string">"/home/wbw/tmp/b"</span>;</span><br><span class="line">    <span class="comment">// 需要解压的文件路径[D:\tmp\b]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNZIP_IN_FILE_PATH = <span class="string">"/home/wbw/tmp/b"</span>;</span><br><span class="line">    <span class="comment">// 输出解压文件路径（不加后缀名）[D:\tmp\c]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNZIP_OUT_FILE_PATH = <span class="string">"/home/wbw/tmp/c"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class[] zipClasses = &#123;</span><br><span class="line">                DeflateCodec<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">GzipCodec</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">BZip2Codec</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">Lz4Codec</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                //<span class="title">SnappyCodec</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">                <span class="title">com</span>.<span class="title">hadoop</span>.<span class="title">compression</span>.<span class="title">lzo</span>.<span class="title">LzoCodec</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">        &#125;</span>;</span><br><span class="line">        System.out.println(<span class="string">"=========== ZIP ==========="</span>);</span><br><span class="line">        <span class="keyword">for</span>(Class c : zipClasses)&#123;</span><br><span class="line">            zip(c);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"========== UNZIP =========="</span>);</span><br><span class="line">        <span class="keyword">for</span>(Class c : zipClasses)&#123;</span><br><span class="line">            unzip(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">(Class codecClass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 实例化对象</span></span><br><span class="line">        CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(codecClass, <span class="keyword">new</span> Configuration());</span><br><span class="line">        <span class="comment">// 创建文件输出流,得到默认扩展名</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(ZIP_OUT_FILE_PATH + codec.getDefaultExtension());</span><br><span class="line">        <span class="comment">// 得到压缩流Output</span></span><br><span class="line">        CompressionOutputStream zipOut = codec.createOutputStream(fos);</span><br><span class="line">        IOUtils.copyBytes(<span class="keyword">new</span> FileInputStream(ZIP_IN_FILE_PATH), zipOut, <span class="number">1024</span>);</span><br><span class="line">        zipOut.close();</span><br><span class="line">        System.out.println(<span class="string">"Zip["</span> + codecClass.getSimpleName() + <span class="string">"]: "</span> + (System.currentTimeMillis() - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unzip</span><span class="params">(Class codecClass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 实例化对象</span></span><br><span class="line">        CompressionCodec codec = (CompressionCodec)ReflectionUtils.newInstance(codecClass, <span class="keyword">new</span> Configuration());</span><br><span class="line">        <span class="comment">// 创建文件输入流,得到默认扩展名</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(UNZIP_IN_FILE_PATH + codec.getDefaultExtension());</span><br><span class="line">        <span class="comment">// 得到压缩流Input</span></span><br><span class="line">        CompressionInputStream zipIn = codec.createInputStream(fis);</span><br><span class="line">        IOUtils.copyBytes(zipIn,<span class="keyword">new</span> FileOutputStream(UNZIP_OUT_FILE_PATH + codec.getDefaultExtension() + <span class="string">".txt"</span>), <span class="number">1024</span>);</span><br><span class="line">        zipIn.close();</span><br><span class="line">        System.out.println(<span class="string">"UnZip["</span> + codecClass.getSimpleName() + <span class="string">"]: "</span> + (System.currentTimeMillis() - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ZIP &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-02-19 21:40:02,200 INFO zlib.ZlibFactory: Successfully loaded &amp; initialized native-zlib library</span><br><span class="line">2020-02-19 21:40:02,278 INFO compress.CodecPool: Got brand-new compressor [.deflate]</span><br><span class="line">Zip[DeflateCodec]: 541ms</span><br><span class="line">2020-02-19 21:40:02,446 INFO compress.CodecPool: Got brand-new compressor [.gz]</span><br><span class="line">Zip[GzipCodec]: 173ms</span><br><span class="line">2020-02-19 21:40:02,626 WARN bzip2.Bzip2Factory: Failed to load&#x2F;initialize native-bzip2 library system-native, will use pure-Java version</span><br><span class="line">2020-02-19 21:40:02,627 INFO compress.CodecPool: Got brand-new compressor [.bz2]</span><br><span class="line">Zip[BZip2Codec]: 9194ms</span><br><span class="line">2020-02-19 21:40:11,828 INFO compress.CodecPool: Got brand-new compressor [.lz4]</span><br><span class="line">Zip[Lz4Codec]: 136ms</span><br><span class="line">Zip[LzoCodec]: 232ms</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; UNZIP &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-02-19 21:40:12,119 INFO compress.CodecPool: Got brand-new decompressor [.deflate]</span><br><span class="line">UnZip[DeflateCodec]: 122ms</span><br><span class="line">2020-02-19 21:40:12,241 INFO compress.CodecPool: Got brand-new decompressor [.gz]</span><br><span class="line">UnZip[GzipCodec]: 80ms</span><br><span class="line">2020-02-19 21:40:12,356 INFO compress.CodecPool: Got brand-new decompressor [.bz2]</span><br><span class="line">UnZip[BZip2Codec]: 1200ms</span><br><span class="line">2020-02-19 21:40:13,531 INFO compress.CodecPool: Got brand-new decompressor [.lz4]</span><br><span class="line">UnZip[Lz4Codec]: 77ms</span><br><span class="line">UnZip[LzoCodec]: 150ms</span><br></pre></td></tr></table></figure></div>



<h2 id="二、SequenceFile序列文件"><a href="#二、SequenceFile序列文件" class="headerlink" title="二、SequenceFile序列文件"></a>二、SequenceFile序列文件</h2><h3 id="2-1-SquenceFile简介"><a href="#2-1-SquenceFile简介" class="headerlink" title="2.1 SquenceFile简介"></a>2.1 SquenceFile简介</h3><ul>
<li>sequenceFile文件是Hadoop用来存储“二进制”形式的[Key,Value]对而设计的一种平面文件(Flat File)。</li>
<li>可以把SequenceFile当做是一个容器，把所有的文件打包到SequenceFile类中可以高效的对小文件进行存储和处理。</li>
<li>SequenceFile文件并不按照其存储的Key进行排序存储，SequenceFile的内部类Writer提供了append功能。</li>
<li>SequenceFile中的Key和Value可以是任意类型Writable或者是自定义Writable。</li>
</ul>
<h3 id="2-2-同步标识"><a href="#2-2-同步标识" class="headerlink" title="2.2 同步标识"></a>2.2 同步标识</h3><p>同步标识，用于快速定位到记录的边界。同时因为有同步点，因此可切割（splitable）。</p>
<p>每条Record（记录）以键值对的方式进行存储，用来表示它的字符数组可以一次解析成：记录的长度、Key的长度、Key值和value值，并且Value值的结构取决于该记录是否被压缩。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">reader.sync(pos);	<span class="comment">//定位到pos之后的第一个同步点</span></span><br><span class="line">writer.sync();		<span class="comment">//写入同步点</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-文件格式"><a href="#2-3-文件格式" class="headerlink" title="2.3 文件格式"></a>2.3 文件格式</h3><p>​        顺序文件由文件头和随后的一条或多条记录组成，顺序文件的前三个字节为SEQ(顺序文件代码),紧随其后的一个字节表示顺序文件的版本号。文件头还包括其他字段,例如键和值类的名称、数据压缩细节、用户定义的元数据以及同步标识。如前所述,同步标识用于在读取文件时能够从任意位置开始识别记录边界。每个文件都有一个随机生成的同步标识,其值存储在文件头中。同步标识位于顺序文件中的记录与记录之间。同步标识的额外存储开销要求小于1%,所以没有必要在每条记录末尾添加该标识(特别是比较短的记录)</p>
<p>​        注意生成的文件不可查看，会乱码，但是可以通过：hdfs dfs -text filepath 来查看内容。</p>
<h3 id="2-4-压缩方式"><a href="#2-4-压缩方式" class="headerlink" title="2.4 压缩方式"></a>2.4 压缩方式</h3><ul>
<li>不压缩：</li>
<li>record压缩：只压缩value</li>
<li>块压缩：按照多个record形成一个block</li>
</ul>
<p>推荐：<a href="https://blog.csdn.net/qq_33813365/article/details/82864241" target="_blank" rel="noopener">https://blog.csdn.net/qq_33813365/article/details/82864241</a></p>
<h3 id="2-5-代码示例"><a href="#2-5-代码示例" class="headerlink" title="2.5 代码示例"></a>2.5 代码示例</h3><p>单元测试前置代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileSystem fs;</span><br><span class="line">    <span class="keyword">private</span> Configuration conf;</span><br><span class="line">    <span class="keyword">private</span> Path filePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">"fs.defaultFS"</span>, <span class="string">"file:///"</span>);</span><br><span class="line">        fs = FileSystem.get(conf);</span><br><span class="line">        filePath = <span class="keyword">new</span> Path(<span class="string">"d:/tmp/seq/1.seq"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试写入操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, filePath, IntWritable<span class="class">.<span class="keyword">class</span>, <span class="title">Text</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 写入操作</span></span><br><span class="line">        writer.append(<span class="keyword">new</span> IntWritable(i), <span class="keyword">new</span> Text(<span class="string">"tom"</span> + i));</span><br><span class="line">        <span class="comment">//每条记录后添加一个同步点</span></span><br><span class="line">        writer.sync();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        writer.append(<span class="keyword">new</span> IntWritable(i), <span class="keyword">new</span> Text(<span class="string">"tom"</span> + i));</span><br><span class="line">        <span class="comment">// 隔一个添加一个同步点</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            writer.sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="写操作（压缩）"><a href="#写操作（压缩）" class="headerlink" title="写操作（压缩）"></a>写操作（压缩）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试写入操作（压缩）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteGzip</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 多了2个参数（一个是方式，一个是压缩类）</span></span><br><span class="line">    SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, filePath, IntWritable<span class="class">.<span class="keyword">class</span>, <span class="title">Text</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                                                           <span class="title">SequenceFile</span>.<span class="title">CompressionType</span>.<span class="title">RECORD</span>, <span class="title">new</span> <span class="title">GzipCodec</span>())</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        writer.append(<span class="keyword">new</span> IntWritable(i), <span class="keyword">new</span> Text(<span class="string">"tom"</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="读操作1（key-value）"><a href="#读操作1（key-value）" class="headerlink" title="读操作1（key, value）"></a>读操作1（key, value）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试读操作</span></span><br><span class="line"><span class="comment"> * 方式一：通过 reader.next(key, value)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SequenceFile.Reader reader = <span class="keyword">new</span> SequenceFile.Reader(fs, filePath, conf);</span><br><span class="line">    IntWritable key = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    Text value = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (reader.next(key, value)) &#123;</span><br><span class="line">        System.out.println(key.get() + <span class="string">":"</span> + value.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="读操作2（key）"><a href="#读操作2（key）" class="headerlink" title="读操作2（key）"></a>读操作2（key）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试读操作</span></span><br><span class="line"><span class="comment"> * 方式二：通过 reader.next(key)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SequenceFile.Reader reader = <span class="keyword">new</span> SequenceFile.Reader(fs, filePath, conf);</span><br><span class="line">    IntWritable key = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    Text value = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">while</span> (reader.next(key)) &#123;</span><br><span class="line">        reader.getCurrentValue(value);</span><br><span class="line">        System.out.println(key.get() + <span class="string">":"</span> + value.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="读操作3（seek）"><a href="#读操作3（seek）" class="headerlink" title="读操作3（seek）"></a>读操作3（seek）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试读操作</span></span><br><span class="line"><span class="comment"> * 方式三：通过 reader.seek(pos)</span></span><br><span class="line"><span class="comment"> * 先通过方式一，调用reader.getPosition()获取每条记录的偏移量。</span></span><br><span class="line"><span class="comment"> * （本次测试偏移量为：153,198,243,288,333,378,423,448,493,518）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SequenceFile.Reader reader = <span class="keyword">new</span> SequenceFile.Reader(fs, filePath, conf);</span><br><span class="line">    IntWritable key = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    Text value = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="comment">// 243为记录起始位置：运行结果成功！</span></span><br><span class="line">    reader.seek(<span class="number">243</span>);</span><br><span class="line">    reader.next(key, value);</span><br><span class="line">    System.out.println(value.toString());</span><br><span class="line">    <span class="comment">// 245为记录中间位置：运行结果失败，抛出异常！</span></span><br><span class="line">    reader.seek(<span class="number">245</span>);</span><br><span class="line">    reader.next(key, value);</span><br><span class="line"></span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>由上面代码可以看出，seek()定位操作，只能刚好定位到一条记录的起始位置，不然调用next()时候会抛异常。</p>
<p>同时，可以看到前面中间偏移量间隔是45字节，后面有部分是25字节。应该是检查点占了20字节。</p>
<h4 id="读操作4（sync）"><a href="#读操作4（sync）" class="headerlink" title="读操作4（sync）"></a>读操作4（sync）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试读操作</span></span><br><span class="line"><span class="comment"> * 方式四：通过 reader.sync(pos)</span></span><br><span class="line"><span class="comment"> * 先通过方式一，调用reader.getPosition()获取每条记录的偏移量。</span></span><br><span class="line"><span class="comment"> * （本次测试偏移量为：153,198,243,288,333,378,423,448,493,518）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SequenceFile.Reader reader = <span class="keyword">new</span> SequenceFile.Reader(fs, filePath, conf);</span><br><span class="line">    IntWritable key = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    Text value = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="comment">// 155为偏移量中间位置，结果不会报错</span></span><br><span class="line">    reader.sync(<span class="number">155</span>);</span><br><span class="line">    reader.next(key, value);</span><br><span class="line">    System.out.println(value.toString());</span><br><span class="line"></span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="三、MapFile"><a href="#三、MapFile" class="headerlink" title="三、MapFile"></a>三、MapFile</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>一个MapFile可以通过SequenceFile的地址，进行分类查找的格式。</p>
<p>使用这个格式的优点在于：</p>
<ul>
<li><p>与SequenceFile只生成一个文件不同，MapFile生成一个目录，目录下有index和data文件,都是序列文件。</p>
<p><a href="/postImages/MapFile.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/MapFile.png" class="lazyload"></a><br>可以看到index文件里面左边的是记录的索引，右边的代表数据在data文件的位置。</p>
</li>
<li><p>首先会将SequenceFile中的地址都加载入内存，并且进行了key升序写入(可重复)。</p>
</li>
<li><p>index文件划分key区间,用于快速定位，从而提供更快的数据查找。</p>
</li>
<li><p>索引模型按128个键建立的（可以看到上面图中左边一列以128递增），可以通过io.map.index.interval来修改</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>文件不支持复写操作，不能向已存在的SequenceFile(MapFile)追加存储记录</li>
<li>当write流不关闭的时候，没有办法构造read流。也就是在执行文件写操作的时候，该文件是不可读取的 </li>
</ul>
<h3 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h3><ul>
<li>MapFile和SequenceFile使用一样只要把类名替换，把输出路径由具体文件名改为目录就行。</li>
<li>查看文件内容也是要命令（hdfs dfs -text filepath）</li>
</ul>
<h2 id="四、MR程序文件输入输出格式"><a href="#四、MR程序文件输入输出格式" class="headerlink" title="四、MR程序文件输入输出格式"></a>四、MR程序文件输入输出格式</h2><h3 id="4-1-设置单文件格式输入输出类型"><a href="#4-1-设置单文件格式输入输出类型" class="headerlink" title="4.1 设置单文件格式输入输出类型"></a>4.1 设置单文件格式输入输出类型</h3><p>介绍了多种文件输入类型后，我们知道输入和输出可以有不同的格式。其中我们拿文件格式SequenceFile来举例：</p>
<ol>
<li><p>首先我们修改之前的单词计数程序，增加指定格式文件输入输出</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置文件输入/输出格式</span></span><br><span class="line">job.setInputFormatClass(TextInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setOutputFormatClass(SequenceFileOutputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>然后运行程序，将输出文件放到HDFS上查看</p>
<p><a href="/postImages/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F2.png" class="lazyload"></a></p>
<p>可以发现，输出改为SequenceFile后，用普通的-cat无法查看，而-text可以</p>
</li>
</ol>
<h3 id="4-2-MultipleInputs多文件格式数据输入源"><a href="#4-2-MultipleInputs多文件格式数据输入源" class="headerlink" title="4.2 MultipleInputs多文件格式数据输入源"></a>4.2 MultipleInputs多文件格式数据输入源</h3><p>如果输入数据文件有多种混合类型，可以用MultipleInputs.addInputPath()进行操作。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个输入</span></span><br><span class="line">MultipleInputs.addInputPath(job,<span class="keyword">new</span> Path(<span class="string">"file:///d:/mr/txt"</span>),TextInputFormat<span class="class">.<span class="keyword">class</span>, <span class="title">WCTextMapper</span>.<span class="title">class</span>)</span>;</span><br><span class="line">MultipleInputs.addInputPath(job,<span class="keyword">new</span> Path(<span class="string">"file:///d:/mr/seq"</span>), SequenceFileInputFormat<span class="class">.<span class="keyword">class</span>,<span class="title">WCSeqMapper</span>.<span class="title">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



<h2 id="五、数据输入文件的处理"><a href="#五、数据输入文件的处理" class="headerlink" title="五、数据输入文件的处理"></a>五、数据输入文件的处理</h2><h3 id="5-1-InputFormat"><a href="#5-1-InputFormat" class="headerlink" title="5.1 InputFormat"></a>5.1 InputFormat</h3><ol>
<li><p>获取切片集合</p>
</li>
<li><p>子类都要重写方法isSplittable()</p>
</li>
<li><p>负责创建RecordReader对象</p>
<p><a href="/postImages/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE2.png" class="lazyload"></a></p>
<p>可以看到对于不同类型的InputFormat其都有自己的Reader。</p>
</li>
<li><p>设置IO路径</p>
</li>
</ol>
<h3 id="5-2-Split切片"><a href="#5-2-Split切片" class="headerlink" title="5.2 Split切片"></a>5.2 Split切片</h3><ol>
<li><p>我们根据上次的JOB提交分析，可以留意到在job提交过程中有一个方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maps = <span class="keyword">this</span>.writeSplits(job, submitJobDir);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单步调试进入该方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">writeSplits</span><span class="params">(JobContext job, Path jobSubmitDir)</span> <span class="keyword">throws</span> IOException, InterruptedException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 得到配置信息</span></span><br><span class="line">    JobConf jConf = (JobConf)job.getConfiguration();</span><br><span class="line">    <span class="keyword">int</span> maps;</span><br><span class="line">    <span class="comment">// 获取一个新的map</span></span><br><span class="line">    <span class="keyword">if</span> (jConf.getUseNewMapper()) &#123;</span><br><span class="line">        maps = <span class="keyword">this</span>.writeNewSplits(job, jobSubmitDir);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maps = <span class="keyword">this</span>.writeOldSplits(jConf, jobSubmitDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单步进入this.writeNewSplits方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T extends InputSplit&gt; <span class="function"><span class="keyword">int</span> <span class="title">writeNewSplits</span><span class="params">(JobContext job, Path jobSubmitDir)</span> <span class="keyword">throws</span> IOException, InterruptedException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Configuration conf = job.getConfiguration();</span><br><span class="line">    InputFormat&lt;?, ?&gt; input = (InputFormat)ReflectionUtils.newInstance(job.getInputFormatClass(), conf);</span><br><span class="line">    <span class="comment">// 这里有一个获取切片的方法，返回一个切片集合</span></span><br><span class="line">    <span class="comment">// InputSplit（输入切片）：代表了要被单个map处理的数据，每一个map()操作只处理一个输入切片。</span></span><br><span class="line">    List&lt;InputSplit&gt; splits = input.getSplits(job);</span><br><span class="line">    T[] array = (InputSplit[])((InputSplit[])splits.toArray(<span class="keyword">new</span> InputSplit[splits.size()]));</span><br><span class="line">    Arrays.sort(array, <span class="keyword">new</span> JobSubmitter.SplitComparator());</span><br><span class="line">    JobSplitWriter.createSplitFiles(jobSubmitDir, conf, jobSubmitDir.getFileSystem(conf), array);</span><br><span class="line">    <span class="keyword">return</span> array.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>单步进入input.getSplits方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;InputSplit&gt; <span class="title">getSplits</span><span class="params">(JobContext job)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    StopWatch sw = (<span class="keyword">new</span> StopWatch()).start();</span><br><span class="line">    <span class="comment">// this.getFormatMinSplitSize()获取格式化切片最小大小，返回的是一个固定的值：1L</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    public static long getMinSplitSize(JobContext job) &#123;</span></span><br><span class="line"><span class="comment">        return job.getConfiguration().getLong("mapreduce.input.fileinputformat.split.minsize", 1L);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    可以看到如果没有配置“mapreduce.input.fileinputformat.split.minsize”属性，默认值1L。</span></span><br><span class="line"><span class="comment">    去集群上查看一下（输入命令后发现，返回的是0）：</span></span><br><span class="line"><span class="comment">    [wbw@s201 /home/wbw]$hdfs getconf -confKey mapreduce.input.fileinputformat.split.minsize</span></span><br><span class="line"><span class="comment">	0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 所以minSize一定 &gt;=1</span></span><br><span class="line">    <span class="keyword">long</span> minSize = Math.max(<span class="keyword">this</span>.getFormatMinSplitSize(), getMinSplitSize(job));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static long getMaxSplitSize(JobContext context) &#123;</span></span><br><span class="line"><span class="comment">        return context.getConfiguration().getLong("mapreduce.input.fileinputformat.split.maxsize", 9223372036854775807L);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    去集群上查看一下（发现没有，那么取默认值9223372036854775807L）：</span></span><br><span class="line"><span class="comment">    [wbw@s201 /home/wbw]$hdfs getconf -confKey mapreduce.input.fileinputformat.split.maxsize</span></span><br><span class="line"><span class="comment">	Configuration mapreduce.input.fileinputformat.split.maxsize is missing.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 所以maxSize一定 &lt;= Long.Max</span></span><br><span class="line">    <span class="keyword">long</span> maxSize = getMaxSplitSize(job);</span><br><span class="line">    List&lt;InputSplit&gt; splits = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    List&lt;FileStatus&gt; files = <span class="keyword">this</span>.listStatus(job);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                    FileStatus file;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!var10.hasNext()) &#123;</span><br><span class="line">                            <span class="comment">// ...</span></span><br><span class="line">                            <span class="keyword">return</span> splits;</span><br><span class="line">                        &#125;</span><br><span class="line">                        file = (FileStatus)var10.next();</span><br><span class="line">                    &#125; <span class="keyword">while</span>(ignoreDirs &amp;&amp; file.isDirectory());</span><br><span class="line"></span><br><span class="line">                    Path path = file.getPath();</span><br><span class="line">                    <span class="keyword">long</span> length = file.getLen();</span><br><span class="line">                <span class="keyword">if</span> (length != <span class="number">0L</span>) &#123;</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                    <span class="comment">// isSplitable:如果是压缩文件，那么不可以切</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.isSplitable(job, path)) &#123;</span><br><span class="line">                        <span class="comment">// 获取block块大小</span></span><br><span class="line">                        <span class="keyword">long</span> blockSize = file.getBlockSize();</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">protected long computeSplitSize(long blockSize, long minSize, long maxSize) &#123;</span></span><br><span class="line"><span class="comment">        return Math.max(minSize, Math.min(maxSize, blockSize));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="comment">// 计算切片大小：即在块大小、最大（小）切片中取中间值</span></span><br><span class="line">                        <span class="keyword">long</span> splitSize = <span class="keyword">this</span>.computeSplitSize(blockSize, minSize, maxSize);</span><br><span class="line">						<span class="comment">// ...</span></span><br><span class="line">                        splits.add(<span class="keyword">this</span>.makeSplit(path, <span class="number">0L</span>, length, blkLocations[<span class="number">0</span>].getHosts(), blkLocations[<span class="number">0</span>].getCachedHosts()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    splits.add(<span class="keyword">this</span>.makeSplit(path, <span class="number">0L</span>, length, <span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>我们修改一下words.txt内容(查看属性，发现有49个字节。其中45个字母，有4个是回车换行)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world tom			15 + 2（\r\n）</span><br><span class="line">tom hello world			15 + 2</span><br><span class="line">world tom hello			15</span><br></pre></td></tr></table></figure></div>

<p>再修改WordCount类，手动添加指定切片大小（一个块默认128M取中间值后，所以切片大小应该是13）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置最大最小切片</span></span><br><span class="line">FileInputFormat.setMaxInputSplitSize(job, <span class="number">13L</span>);</span><br><span class="line">FileInputFormat.setMinInputSplitSize(job, <span class="number">1L</span>);</span><br></pre></td></tr></table></figure></div>

<p>接着重新debug程序：</p>
<p><a href="/postImages/split1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split1.png" class="lazyload"></a></p>
<p>可以看到，文件被切成了4片，每一片大小13。但是如果切13个字节的话，一行文本就被断掉了，数据就有问题了。</p>
<p><a href="/postImages/split2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split2.png" class="lazyload"></a></p>
<p><a href="/postImages/split3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split3.png" class="lazyload"></a></p>
<p><a href="/postImages/split4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/split4.png" class="lazyload"></a></p>
<p>可以看到实际上，并没有，依然是一行一条。这就涉及到RecordReader阅读器了。</p>
</li>
</ol>
<h3 id="5-3-RecordReader读取法则"><a href="#5-3-RecordReader读取法则" class="headerlink" title="5.3 RecordReader读取法则"></a>5.3 RecordReader读取法则</h3><p>InputSplit描述了数据块的切分方式，RecordReader类则是实际用来加载split分片数据，并把数据转换为适合Mapper类里面map()方法处理的&lt;key, value&gt;形式。</p>
<p>接着 3.3 我们打断点，一步一步进入最后发现到了一个LineRecordReader类中的this.in.readLine方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Mapper&lt;KEYIN, VALUEIN, KEYOUT, VALUEOUT&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setup(context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*断点*/</span> <span class="keyword">while</span>(context.nextKeyValue()) &#123;</span><br><span class="line">		     <span class="keyword">this</span>.map(context.getCurrentKey(), context.getCurrentValue(), context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 打断点后发现，如果nextKeyValue返回的是false就会执行cleanup</span></span><br><span class="line">        <span class="keyword">this</span>.cleanup(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">截取自：https://blog.51cto.com/luchunli/1718322</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">LineRecordReader类由一个FileSplit构造出来，start是这个FileSplit的起始位置，pos是当前读取分片的位置，end是分片结束位置，in是打开的一个读取这个分片的输入流，它是使用这个FileSplit对应的文件名来打开的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineRecordReader</span> <span class="keyword">extends</span> <span class="title">RecordReader</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(InputSplit genericSplit,TaskAttemptContext context)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 接收split（FileSplit对象）分片，并通过分片解析出：</span></span><br><span class="line">        <span class="comment">//     分片起始位置：start = split.getStart();</span></span><br><span class="line">        <span class="comment">//     结束位置：end = start + split.getLength();</span></span><br><span class="line">        <span class="comment">//     文件位置：在HDFS上的绝对路径final Path file = split.getPath();</span></span><br><span class="line">        <span class="comment">// 2. 获取文件的输入流</span></span><br><span class="line">        <span class="comment">//     通过FileSystem获取文件，并获取输入流 fileIn = fs.open(file);</span></span><br><span class="line">        <span class="comment">// 3. 判定是否为压缩文件，并获取压缩格式</span></span><br><span class="line">        <span class="comment">//     CompressionCodec codec = new CompressionCodecFactory(job).getCodec(file);</span></span><br><span class="line">        <span class="comment">// 4. 计算行偏移量（原始解释如下）</span></span><br><span class="line">        <span class="comment">//     If this is not the first split, we always throw away first record</span></span><br><span class="line">        <span class="comment">//     because we always (except the last split) read one extra line in</span></span><br><span class="line">        <span class="comment">//     next() method.</span></span><br><span class="line">        <span class="keyword">if</span> (start != <span class="number">0</span>) &#123;</span><br><span class="line">            start += in.readLine(<span class="keyword">new</span> Text(), <span class="number">0</span>, maxBytesToConsume(start));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.pos = start;       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 最主要的方法就是nextKeyvalue()方法，由它获取分片上的下一个K-V 对。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextKeyValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// key--&gt;这里为map task中map()函数的key</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = <span class="keyword">new</span> LongWritable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取的是行偏移量</span></span><br><span class="line">        <span class="keyword">this</span>.key.set(<span class="keyword">this</span>.pos);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="keyword">new</span> Text();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> newSize = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 功能：多读取一些数据，补充完整的一行</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">this</span>.getFilePosition() &lt;= <span class="keyword">this</span>.end || <span class="keyword">this</span>.in.needAdditionalRecordAfterSplit()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.pos == <span class="number">0L</span>) &#123;</span><br><span class="line">                newSize = <span class="keyword">this</span>.skipUtfByteOrderMark();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 判定split是否已经读取解析完成，如果未完成的话就读取一行数据</span></span><br><span class="line">                <span class="comment">// 通过org.apache.hadoop.util.LineReader的readCustomLine或readDefaultLine读取</span></span><br><span class="line">                <span class="comment">// 如果指定了行分隔符则调用readCustomLine；</span></span><br><span class="line">                <span class="comment">// 否则默认通过回车换行作为分隔符调用readDefaultLine</span></span><br><span class="line">                newSize = <span class="keyword">this</span>.in.readLine(<span class="keyword">this</span>.value, <span class="keyword">this</span>.maxLineLength, <span class="keyword">this</span>.maxBytesToConsume(<span class="keyword">this</span>.pos));</span><br><span class="line">                <span class="comment">// 偏移量加，上个读取的行的长度，作为下一行的偏移量</span></span><br><span class="line">                <span class="keyword">this</span>.pos += (<span class="keyword">long</span>)newSize;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newSize == <span class="number">0</span> || newSize &lt; <span class="keyword">this</span>.maxLineLength) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LOG.info(<span class="string">"Skipped line of size "</span> + newSize + <span class="string">" at pos "</span> + (<span class="keyword">this</span>.pos - (<span class="keyword">long</span>)newSize));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.value = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结论：</p>
<ul>
<li>网友1(<a href="https://www.cnblogs.com/qincan4Q/p/9807877.html)：" target="_blank" rel="noopener">https://www.cnblogs.com/qincan4Q/p/9807877.html)：</a></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里有个很重要的类Recordreader，inputformat到map中间有一个reader，你切片可以这样定义（就是代码定义的13），但是reader要去读数据，他会首先判断读取的位置是不是行首，若是，则会一直读到回车换行；若不是行首，它会从下一行开始读。这就是为什么我们第二个切片内容会是一个完整的行内容，而不是从第一行的 om 开始读。</span><br><span class="line"></span><br><span class="line">所以我们虽然有四个切片，但是我们只有前三个split有数据，最后一个split是空的，因为我们只有三行数据，依照reader的读取数据法则，到最后一个split的时候我们已近没有数据可读了。</span><br><span class="line"></span><br><span class="line">这里我们可能会问，split和reader这到底听谁的？或者他们俩的功能感觉差不多？</span><br><span class="line"></span><br><span class="line">假设split的大小是128M，我们读了n行数据，在第n行读了一半，如果不读剩下的，会丢数据，这里可能会说，下一个切片把数据读走再分析，但是在并发情况下，切片很大可能在不同节点上运行的，怎么把这两个数据对接在一起再分析。所以这时候就需要reader了，就算我们split值满了，我们还是要把这行读完。（reader是一行一行的把数据发给mapper的）</span><br><span class="line"></span><br><span class="line">切片是定义大方向的，而这个reader是处理细节，让你不丢失数据，或者数据不错乱。</span><br></pre></td></tr></table></figure></div>

<ul>
<li>网友2(<a href="https://blog.csdn.net/chengyuan2789/article/details/100839252)：" target="_blank" rel="noopener">https://blog.csdn.net/chengyuan2789/article/details/100839252)：</a></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那么一行数据，可能在不同的splits中，也可能在不同的block中。</span><br><span class="line"></span><br><span class="line">在不同的block中呢，这个有fileIn对象帮我们处理的了，主要是读取read到缓冲区，属于物理上的问题，不是考虑的地方。</span><br><span class="line"></span><br><span class="line">处于不同的split呢？这个情况有些问题，因为不同的split就是不同的划分，并且由不同的map task执行。</span><br><span class="line"></span><br><span class="line">那么我们recordreader如何解决这个问题呢？</span><br><span class="line"></span><br><span class="line">解决办法便是，突破split的start和end限制。</span><br><span class="line"></span><br><span class="line">linerecordreader的解决办法：</span><br><span class="line"></span><br><span class="line">只要start指向的位置不是文件的第一行，则默认的过滤掉一行（start位置可能是一行中的某一个位置，比如本例子切片定义的13，即第一行t&#x2F;om之间）。</span><br><span class="line"></span><br><span class="line">在nextKeyvalue方法中，多读取一些数据，补充完整的一行。</span><br><span class="line"></span><br><span class="line">OK，通过过滤掉一行，和多读取一行，就能保证被split分隔的一行，能够完成的读取，同时也不会重复处理一些数据。因为，所有的mapTask的linerecordreader都遵循这个方法。</span><br></pre></td></tr></table></figure></div>



<h2 id="六、数据库读取与写入"><a href="#六、数据库读取与写入" class="headerlink" title="六、数据库读取与写入"></a>六、数据库读取与写入</h2><p>数据的输入不仅仅可以从常用的TextInputFormat进行，还可以直接从数据库中读取和写入。</p>
<h3 id="6-1-数据库准备"><a href="#6-1-数据库准备" class="headerlink" title="6.1 数据库准备"></a>6.1 数据库准备</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> big4 ;</span><br><span class="line"><span class="keyword">use</span> big4 ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> words(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment , <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) , txt <span class="built_in">varchar</span>(<span class="number">255</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> words(<span class="keyword">name</span>,txt) <span class="keyword">values</span>(<span class="string">'tomas'</span>,<span class="string">'hello world tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> words(txt) <span class="keyword">values</span>(<span class="string">'hello tom world'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> words(txt) <span class="keyword">values</span>(<span class="string">'world hello tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> words(txt) <span class="keyword">values</span>(<span class="string">'world tom hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stats(word <span class="built_in">varchar</span>(<span class="number">50</span>),wordCount <span class="built_in">int</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="6-2-自定义数据对象类"><a href="#6-2-自定义数据对象类" class="headerlink" title="6.2 自定义数据对象类"></a>6.2 自定义数据对象类</h3><p>首先我们回顾一下jdbc程序的读取/写入操作，关键是setXxx()方法和getXxx()方法。</p>
<ul>
<li><p>jdbc写操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">Connection conn = DriverMananger.getConnection(<span class="string">"jdbc:mysql://localhost:3306/big4"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">PreparedStatement ppst = conn.preparedStatement(<span class="string">"insert into test(id,name,age) values(?,?,?)"</span>);</span><br><span class="line"><span class="comment">//绑定参数</span></span><br><span class="line">ppst.setInteger(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">ppst.setInteger(<span class="number">2</span>,<span class="string">"tom"</span>);</span><br><span class="line">ppst.setInteger(<span class="number">3</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">ppst.executeUpdate();</span><br><span class="line">ppst.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>jdbc读操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">Connection conn = DriverMananger.getConnection(<span class="string">"jdbc:mysql://localhost:3306/big4"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">ppst = conn.preparedStatement(<span class="string">"select id,name from test "</span>);</span><br><span class="line">ResultSet rs = ppst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">    String name = rs.getInt(<span class="string">"name"</span>);</span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<p>然后，我们开始编写自定义数据对象类：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyDBWritable class</span></span><br><span class="line"><span class="comment"> * 自定义数据对象类</span></span><br><span class="line"><span class="comment"> * 实现DBWritable接口：由JDBC可以知道将数据读取/写入到数据库的时候，需要对预处理</span></span><br><span class="line"><span class="comment"> *      进行setXxx()，对返回的结果集进行getXxx()来吧数据写入到SQL语句，或者将返</span></span><br><span class="line"><span class="comment"> *      回结果写入对象。</span></span><br><span class="line"><span class="comment"> * 实现Writable接口：即上一章中的Hadoop中的序列化，来适配MR程序的输入输出。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/24 18:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDBWritable</span> <span class="keyword">implements</span> <span class="title">DBWritable</span>, <span class="title">Writable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读表所需参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String txt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写表所需参数</span></span><br><span class="line">    <span class="keyword">private</span> String word;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> wordCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDBWritable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 省略get/set方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MR</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        dataOutput.writeInt(id);</span><br><span class="line">        dataOutput.writeUTF(name);</span><br><span class="line">        dataOutput.writeUTF(txt);</span><br><span class="line">        dataOutput.writeUTF(word);</span><br><span class="line">        dataOutput.writeInt(wordCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        id = dataInput.readInt();</span><br><span class="line">        name = dataInput.readUTF();</span><br><span class="line">        txt = dataInput.readUTF();</span><br><span class="line">        word = dataInput.readUTF();</span><br><span class="line">        wordCount = dataInput.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DB</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据库的只有2个参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 这里注意顺序！</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, word);</span><br><span class="line">        preparedStatement.setInt(<span class="number">2</span>, wordCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库中读取数据，仅需3个参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        id = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">        name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">        txt = resultSet.getString(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="6-3-编写Mapper和Reducer"><a href="#6-3-编写Mapper和Reducer" class="headerlink" title="6.3 编写Mapper和Reducer"></a>6.3 编写Mapper和Reducer</h3><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WCMapper class</span></span><br><span class="line"><span class="comment"> * 这里的输入KV类型是从数据库读取的，以LongWritable为key,自定义类为value</span></span><br><span class="line"><span class="comment"> * 注意这里的value，已经是将数据库中取到的记录封装到对象中了</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/24 18:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WCMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">MyDBWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable SUM = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, MyDBWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 数据库字段txt为文本内容</span></span><br><span class="line">        String line = value.getTxt();</span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(word), SUM);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WCReader class</span></span><br><span class="line"><span class="comment"> * 这里注意一点，通过对源码的跟踪发现：这里输出的value是泛型，且没有地方用到</span></span><br><span class="line"><span class="comment"> * 也就是说这个值是没有用的，因此用NullWritable，而Key就是我们的自定类，最后</span></span><br><span class="line"><span class="comment"> * 会将我们的自定义类，根据重写的write写入数据库。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/24 21:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WCReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">MyDBWritable</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        MyDBWritable rs = <span class="keyword">new</span> MyDBWritable();</span><br><span class="line">        rs.setWord(key.toString());</span><br><span class="line">        rs.setWordCount(count);</span><br><span class="line">        context.write(rs, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="6-4-编写App启动类"><a href="#6-4-编写App启动类" class="headerlink" title="6.4 编写App启动类"></a>6.4 编写App启动类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DBWCApp class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/24 21:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBWCApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line">        <span class="comment">// 设置JOB属性</span></span><br><span class="line">        job.setJobName(<span class="string">"DBWCApp"</span>);</span><br><span class="line">        job.setJarByClass(DBWCApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 配置数据库连接信息</span></span><br><span class="line">        String driverClass = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/big4"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"root"</span>;</span><br><span class="line">        <span class="comment">// 将数据库配置写入job的配置属性中</span></span><br><span class="line">        DBConfiguration.configureDB(job.getConfiguration(), driverClass, url, username, password);</span><br><span class="line">        <span class="comment">// 设置数据输入，参数介绍：</span></span><br><span class="line">        <span class="comment">// 1、2：作业、和自定义类（因为里面重写了数据库读出和写入的函数）</span></span><br><span class="line">        <span class="comment">// 3：数据库查询语句</span></span><br><span class="line">        <span class="comment">// 4：表记录数（根据这个数量来计算切片数量）</span></span><br><span class="line">        DBInputFormat.setInput(job, MyDBWritable<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">                "select id,name,txt from words", "select count(*) from words");</span><br><span class="line">        <span class="comment">// 设置数据输出，参数介绍：</span></span><br><span class="line">        <span class="comment">// 1：作业</span></span><br><span class="line">        <span class="comment">// 2：数据输出表名</span></span><br><span class="line">        <span class="comment">// 3：字段名（要和自定义类重写的write方法字段顺序一致）</span></span><br><span class="line">        DBOutputFormat.setOutput(job, <span class="string">"stats"</span>, <span class="string">"word"</span>, <span class="string">"wordCount"</span>);</span><br><span class="line">        <span class="comment">// 设置Map、Reduce</span></span><br><span class="line">        job.setMapperClass(WCMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setReducerClass(WCReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 设置输出KV类型</span></span><br><span class="line">        job.setOutputKeyClass(MyDBWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 提交作业</span></span><br><span class="line">        job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="6-5-添加pom依赖"><a href="#6-5-添加pom依赖" class="headerlink" title="6.5 添加pom依赖"></a>6.5 添加pom依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="6-6-本地运行"><a href="#6-6-本地运行" class="headerlink" title="6.6 本地运行"></a>6.6 本地运行</h3><p><a href="/postImages/DB1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB1.png" class="lazyload"></a></p>
<p>数据写入成功。</p>
<h3 id="6-7-集群运行"><a href="#6-7-集群运行" class="headerlink" title="6.7 集群运行"></a>6.7 集群运行</h3><ol>
<li><p>因为我们程序用到了mysql驱动类，而Hadoop中没有！所以我们要利用之前的方法，把mysql-connector-java-X.X.X.jar包放到Hadoop的lib目录下。【可以参照1.3内容】</p>
</li>
<li><p>分发jar包到所有节点的lib目录下，因为不知道程序实际运行在哪个节点上。</p>
</li>
<li><p>修改程序中的mysql的url地址，改成本地IP。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入cmd命令界面，输入ipconfig,找到IPV4地址，如我的：192.168.174.1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>清空数据库输出表内容。</p>
</li>
<li><p>利用MAVEN打jar包上传。</p>
</li>
<li><p>启动集群，运行jar包。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop jar Hadoop-1.0-SNAPSHOT.jar cn.wangbowen.mr.db.DBWCApp</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可能会报错不被允许连接数据库，这时候要对本地数据库进行一些设置：</p>
<p>可以参考 <a href="https://blog.csdn.net/yang5726685/article/details/52529082" target="_blank" rel="noopener">https://blog.csdn.net/yang5726685/article/details/52529082</a></p>
</li>
<li><p>查看WEB-UI 8088端口，发现有一个作业正常运行，等一会查看数据库。发现数据和本地的效果一致。</p>
<p><a href="/postImages/DB2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB2.png" class="lazyload"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop学习笔记（一）前期准备</title>
    <url>/2020/02/13/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E9%9B%B6%EF%BC%89%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="Hadoop学习笔记（一）前期准备"><a href="#Hadoop学习笔记（一）前期准备" class="headerlink" title="Hadoop学习笔记（一）前期准备"></a>Hadoop学习笔记（一）前期准备</h1><h2 id="一、前期准备介绍"><a href="#一、前期准备介绍" class="headerlink" title="一、前期准备介绍"></a>一、前期准备介绍</h2><p>Hadoop开发的时候，可能需要一些辅助的操作来减少工作量。因此这个栏目是持续更新，来进行推荐操作的总结。不影响一些操作和后续文章内容不匹配等的问题。</p>
<h2 id="二、Linux操作篇"><a href="#二、Linux操作篇" class="headerlink" title="二、Linux操作篇"></a>二、Linux操作篇</h2><h3 id="2-1-SSH"><a href="#2-1-SSH" class="headerlink" title="2.1 SSH"></a>2.1 SSH</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成密钥对:</span><br><span class="line">$&gt;ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">添加认证文件:</span><br><span class="line">$&gt;cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">权限设置,文件和文件夹权限 除了自己之外，别人不可写:</span><br><span class="line">$&gt;chmod 700 ~&#x2F;.ssh</span><br><span class="line">$&gt;chmod 644 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-命令行提示符显示完整路径"><a href="#2-2-命令行提示符显示完整路径" class="headerlink" title="2.2 命令行提示符显示完整路径"></a>2.2 命令行提示符显示完整路径</h3><ol>
<li><p>编辑profile文件，添加环境变量PS1</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#x2F;etc&#x2F;profile]</span><br><span class="line">export PS1&#x3D;&#39;[\u@\h &#96;pwd&#96;]\$&#39;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>更新配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="2-3-创建共享文件夹"><a href="#2-3-创建共享文件夹" class="headerlink" title="2.3 创建共享文件夹"></a>2.3 创建共享文件夹</h3><p>有时候需要频繁的从本地往虚拟机上传输文件，虽然有XFTP，但是创建一个共享文件夹或许更方便。</p>
<h2 id="三、脚本篇"><a href="#三、脚本篇" class="headerlink" title="三、脚本篇"></a>三、脚本篇</h2><p>​        当拥有一个完全分布式集群后，需要在不同的机器上分别进行操作，而有时候，这些操作命令又是一样的，因此为了避免每次都要用SSH登录到其他机器上后进行重复的操作，编写一个脚本来执行命令，往往是最佳的选择。</p>
<h3 id="3-1-编写批量执行命令脚本"><a href="#3-1-编写批量执行命令脚本" class="headerlink" title="3.1 编写批量执行命令脚本"></a>3.1 编写批量执行命令脚本</h3><ol>
<li><p>创建一个脚本文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$touch xcall.sh</span><br><span class="line">   # 将脚本标记为可执行文件</span><br><span class="line">$chmod a+x xcall.sh</span><br><span class="line">   # 编辑内容</span><br><span class="line">$vi xcall.sh</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>xcall.sh添加以下内容（表示通过SSH对所有主机进行命令操作）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">params=$@</span><br><span class="line">i=201</span><br><span class="line">for (( i = 201 ; i &lt;= 204 ; i = $i + 1 )) ; do</span><br><span class="line">	echo ============= s$i ==============</span><br><span class="line">	ssh s$i "$params"</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>执行脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.&#x2F;xcall.sh + 命令</span><br></pre></td></tr></table></figure></div>

<p>如，在各机器上打印主机名：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$xcall.sh hostname</span><br><span class="line"></span><br><span class="line">打印结果：</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">s201</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">s202</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">s203</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">s204</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-2-编写批量复制文件脚本"><a href="#3-2-编写批量复制文件脚本" class="headerlink" title="3.2 编写批量复制文件脚本"></a>3.2 编写批量复制文件脚本</h3><p>​        其实复制文件的命令可以直接用 scp 来处理，但是该命令有个问题，就是不能拷贝软连接（$ln -s xxx yyy）,用该命令拷贝过去后，链接会变成目录。因此，我们需要一个新的软件来进行拷贝。当然在拷贝没有链接的情况下，也是可以直接用 scp 的。</p>
<ol>
<li><p>安装rsync（注意：需要在拷贝与被拷贝双方机子上都安装）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo yum install rsync</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>创建脚本文件(xsync.sh)并编写内容</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [[ $# -lt 1 ]] ; then echo no params ; exit ; fi</span><br><span class="line"></span><br><span class="line">p=$1</span><br><span class="line">dir=`dirname $p`</span><br><span class="line">filename=`basename $p`</span><br><span class="line">cd $dir</span><br><span class="line">fullpath=`pwd -P .`</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line">for (( i = 202 ; i &lt;= 204 ; i = $i + 1 )) ; do</span><br><span class="line">    echo ============= s$i ==============</span><br><span class="line">    rsync -lr $p $&#123;user&#125;@s$i:$fullpath</span><br><span class="line">done ;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>执行命令</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop]$xsync.sh etc</span><br></pre></td></tr></table></figure></div>

<p>这样就把etc文件夹复制到了，其余机子上的同路径下。</p>
</li>
</ol>
<h3 id="3-3-脚本推荐存放位置"><a href="#3-3-脚本推荐存放位置" class="headerlink" title="3.3 脚本推荐存放位置"></a>3.3 脚本推荐存放位置</h3><p>推荐将脚本文件放置/usr/local/bin/目录下便于管理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo mv xcall.sh /usr/<span class="built_in">local</span>/bin/</span></span><br></pre></td></tr></table></figure></div>



<h3 id="3-4-拥有ROOT权限的脚本"><a href="#3-4-拥有ROOT权限的脚本" class="headerlink" title="3.4 拥有ROOT权限的脚本"></a>3.4 拥有ROOT权限的脚本</h3><ol>
<li><p>有的命令需要在root权限下操作因此，可以给root也加一个免密登录。（如果需要root权限的操作，就切换到ROOT用户下进行SSH命令操作）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$su</span><br><span class="line">#ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">#cd &#x2F;root&#x2F;.ssh&#x2F;</span><br><span class="line">#cat id_rsa.pub &gt; authorized_keys</span><br><span class="line">#ssh localhost	(测试SSH本机)</span><br><span class="line">最后分发：</span><br><span class="line">1.首先切到root用户，将&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub文件先发给s202-s204的wbw用户下</span><br><span class="line">2.s202-s204的wbw用户下，先切到root用户，然后将id_rsa.pub文件追加到authorized_keys</span><br><span class="line">cat &#x2F;home&#x2F;wbw&#x2F;id_rsa.pub &gt;&gt; &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-5-使用脚本执行其他机器上的jps命令"><a href="#3-5-使用脚本执行其他机器上的jps命令" class="headerlink" title="3.5 使用脚本执行其他机器上的jps命令"></a>3.5 使用脚本执行其他机器上的jps命令</h3><p>如果要用上诉脚本执行xcall.sh jps查看所有机器进程(Centos7下需要进行一些操作)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;usr&#x2F;local]$which jps</span><br><span class="line">&#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps</span><br><span class="line">[wbw@s201 &#x2F;usr&#x2F;local]$xcall.sh &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps</span><br><span class="line"></span><br><span class="line">或者创建一个软连接，然后用xsync.sh脚本文件拷贝到其余机器上。(需要ROOT下的SSH)</span><br><span class="line">1.切换到root用户</span><br><span class="line">$&gt;su root</span><br><span class="line">2.创建符号连接</span><br><span class="line">$&gt;xcall.sh &quot;ln -sfT &#x2F;soft&#x2F;jdk&#x2F;bin&#x2F;jps &#x2F;usr&#x2F;local&#x2F;bin&#x2F;jps&quot;</span><br><span class="line">3.修改jps符号连接的owner</span><br><span class="line">$&gt;xcall.sh &quot;chown -h wbw:wbw &#x2F;usr&#x2F;local&#x2F;bin&#x2F;jps&quot;</span><br><span class="line">4.查看所有主机上的java进程</span><br><span class="line">$&gt;xcall.sh jps</span><br></pre></td></tr></table></figure></div>



<h2 id="四、开发篇"><a href="#四、开发篇" class="headerlink" title="四、开发篇"></a>四、开发篇</h2><h3 id="4-1-远程调试（JAVA-IDEA）"><a href="#4-1-远程调试（JAVA-IDEA）" class="headerlink" title="4.1 远程调试（JAVA+IDEA）"></a>4.1 远程调试（JAVA+IDEA）</h3><p>有时候需要在集群上调试代码，因此，先安装Hadoop，利用Hadoop进行远程调试 ！</p>
<ol>
<li><p>设置服务器端java vm的-agentlib:jdwp选项（这个端口可以根据自己设定，IDEA里面默认是5005）</p>
<ul>
<li><p>windwos</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set JAVA_OPTS&#x3D;%JAVA_OPTS% -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,address&#x3D;5005,server&#x3D;y,suspend&#x3D;n</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>linux（推荐）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_CLIENT_OPTS&#x3D;-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,address&#x3D;5005,server&#x3D;y,suspend&#x3D;y</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>编写测试程序打jar包，上传到服务器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.remote;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Demo class</span></span><br><span class="line"><span class="comment"> * 这是一个用来测试远程调试功能的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/18 22:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"RemoteTest &gt;&gt; Step 1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"RemoteTest &gt;&gt; Step 2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"RemoteTest &gt;&gt; Step 3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"RemoteTest &gt;&gt; Step 4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在服务器端启动java程序，server会暂挂在5005端口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;tmp]$hadoop jar RemoteDemo.jar cn.wangbowen.remote.Demo</span><br><span class="line">Listening for transport dt_socket at address: 5005</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>回到IDEA进行配置</p>
<p><a href="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%951.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%951.png" class="lazyload"></a></p>
<p><a href="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%952.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%952.png" class="lazyload"></a></p>
<p><a href="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%953.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%953.png" class="lazyload"></a></p>
</li>
<li><p>开始调试</p>
<p><a href="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%954.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%954.png" class="lazyload"></a></p>
<p>在需要的地方打断点，然后点击DEBUG</p>
<p><a href="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%955.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%955.png" class="lazyload"></a></p>
<p>点击单步执行</p>
<p><a href="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%956.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%956.png" class="lazyload"></a></p>
<p>查看终端信息，发现打印出了内容</p>
</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用入门</title>
    <url>/2020/02/22/Hexo%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Hexo使用入门"><a href="#Hexo使用入门" class="headerlink" title="Hexo使用入门"></a>Hexo使用入门</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><ol>
<li><p>nodejs安装教程：<a href="https://www.jianshu.com/p/657d58a149d0" target="_blank" rel="noopener">https://www.jianshu.com/p/657d58a149d0</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意上面的坑：创建链接的时候目标路径有错！后面的路径，不要漏了local。</span><br><span class="line">ln -s ....&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>git安装：yum -y install git</p>
</li>
<li><p>安装hexo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo&#x2F;bin</span><br><span class="line">.&#x2F;hexo -version</span><br><span class="line"></span><br><span class="line"># 添加环境变量，在任何地方可以执行hexo命令</span><br><span class="line">sudo vim &#x2F;etc&#x2F;profile</span><br><span class="line"># 末尾添加</span><br><span class="line">export HEXO_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;hexo</span><br><span class="line">export PATH&#x3D;$PATH:$HEXO_HOME&#x2F;bin</span><br><span class="line"># 刷新配置</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"># 进入任意目录测试</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建一个目录存放hexo文件，并进行初始化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir blog		# 名字随意</span><br><span class="line">cd blog</span><br><span class="line">hexo init		# 初始化</span><br></pre></td></tr></table></figure></div>

<p>提示：如果上面的命令有问题，推荐看“Linux基础操作”文章解决。</p>
</li>
</ol>
<h2 id="三、Hexo命令集"><a href="#三、Hexo命令集" class="headerlink" title="三、Hexo命令集"></a>三、Hexo命令集</h2><h3 id="2-1-启动命令"><a href="#2-1-启动命令" class="headerlink" title="2.1 启动命令"></a>2.1 启动命令</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server (简写 hexo s)</span><br></pre></td></tr></table></figure></div>

<p>默认启动4000端口，公网的小伙伴记得配置安全组打开4000端口。一般用于预览效果。</p>
<h3 id="2-2-创建文章"><a href="#2-2-创建文章" class="headerlink" title="2.2 创建文章"></a>2.2 创建文章</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;这是文章标题&quot;（简写hexo n）</span><br></pre></td></tr></table></figure></div>

<p>然后会显示文件生成路径：（_posts目录下就是用来存放文章的）</p>
<p>INFO  Created: ~/blog/source/_posts/这是文章标题.md</p>
<p>查看文件内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 这是文章标题</span><br><span class="line">date: 2020-02-22 20:40:01</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>

<p>文章采用Markdown语法来编辑。</p>
<p>提示：推荐使用下面我写的文章生成器来在本地生成，编写完成后上传到_posts目录下。</p>
<h3 id="3-3-生成博客"><a href="#3-3-生成博客" class="headerlink" title="3.3 生成博客"></a>3.3 生成博客</h3><p>进入博客目录blog文件夹下后，执行以下命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean		# 清理旧文件（如果只是在原有基础下添加新文章，可以不用执行）</span><br><span class="line">hexo g			# 生成新文件</span><br></pre></td></tr></table></figure></div>

<p>可以直接设置生成到nginx的web目录下，这样就可以不用启动服务直接访问了。</p>
<h2 id="四、修改博客样式"><a href="#四、修改博客样式" class="headerlink" title="四、修改博客样式"></a>四、修改博客样式</h2><h3 id="4-1-切换主题"><a href="#4-1-切换主题" class="headerlink" title="4.1 切换主题"></a>4.1 切换主题</h3><ol>
<li><p>下载主题（icarus主题为例）</p>
<p>主题下载github：<a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">https://github.com/ppoffice/hexo-theme-icarus</a></p>
<p>推荐先下载ZIP到本地，解压后再传到服务器。</p>
<p>将解压内容放到hexo博客根目录下的blog/themes/icarus/下</p>
<p><a href="/postImages/%E4%B8%BB%E9%A2%981.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E4%B8%BB%E9%A2%981.png" class="lazyload"></a></p>
</li>
<li><p>修改博客根目录下的 _config.yml配置文件。将主题改为icarus：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: icarus</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重新生成博客</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo hexo clean</span><br><span class="line">sudo hexo g</span><br><span class="line">sudu hexo s</span><br></pre></td></tr></table></figure></div>

<p>可能会报错，说找不到依赖。cd到博客根目录下执行（npm i cheerio -S）</p>
</li>
<li><p>其他主题（Butterfly）</p>
<p><a href="https://jerryc.me/posts/21cfbf15/#安裝" target="_blank" rel="noopener">https://jerryc.me/posts/21cfbf15/#%E5%AE%89%E8%A3%9D</a></p>
</li>
</ol>
<h3 id="4-2-修改信息"><a href="#4-2-修改信息" class="headerlink" title="4.2 修改信息"></a>4.2 修改信息</h3><p>去官网看吧，慢慢来。（推荐Butterfly文档比较全，上面那个链接）</p>
<h3 id="4-3-使用程序自动生成文章头"><a href="#4-3-使用程序自动生成文章头" class="headerlink" title="4.3 使用程序自动生成文章头"></a>4.3 使用程序自动生成文章头</h3><p>如果你用的是Butterfly主题，那么推荐我写的一个程序来生成文章模板：</p>
<p>地址：<a href="http://wangbowen.cn/soft/hexo/HexoArticleBuilderForButterfly.exe">http://wangbowen.cn/soft/hexo/HexoArticleBuilderForButterfly.exe</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 这是标题</span><br><span class="line">date: 2020-2-24 0:09:29</span><br><span class="line">updated: 2020-2-24 0:09:29</span><br><span class="line">categories: </span><br><span class="line">- [分类1, 分类2]</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">cover: &#39;&#x2F;postImages&#x2F;分类2.jpg&#39;</span><br><span class="line">comments: true</span><br><span class="line">top: false</span><br><span class="line">toc: true</span><br><span class="line">toc_number: false</span><br><span class="line">---</span><br><span class="line">[TOC]</span><br><span class="line"># 这是标题</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%901.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%901.png" class="lazyload"></a></p>
<p><a href="/postImages/%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%902.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%902.png" class="lazyload"></a></p>
<p><a href="/postImages/%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%903.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%96%87%E7%AB%A0%E7%94%9F%E6%88%903.png" class="lazyload"></a></p>
<h2 id="五、后台运行与关闭"><a href="#五、后台运行与关闭" class="headerlink" title="五、后台运行与关闭"></a>五、后台运行与关闭</h2><ol>
<li><p>让线程后台运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nohup hexo s &amp;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看当前端口占用情况，找到4000端口的PID</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo netstat -lntp</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>杀掉进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo kill -9 PID</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="六、添加搜索功能"><a href="#六、添加搜索功能" class="headerlink" title="六、添加搜索功能"></a>六、添加搜索功能</h2><p><a href="https://www.liu.app/2018/08/10/Hexo/为Hexo增加algolia搜索功能/" target="_blank" rel="noopener">https://www.liu.app/2018/08/10/Hexo/%E4%B8%BAHexo%E5%A2%9E%E5%8A%A0algolia%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</a></p>
<p><a href="https://www.dazhuanlan.com/2020/02/01/5e3472eacf544/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/02/01/5e3472eacf544/</a></p>
<p>hexo algolia</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive学习笔记</title>
    <url>/2020/02/27/Hive%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Hive学习笔记"><a href="#Hive学习笔记" class="headerlink" title="Hive学习笔记"></a>Hive学习笔记</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Hive 是一个构建在 Hadoop 之上的数据仓库，它可以将结构化的数据文件映射成表，并提供类 SQL 查询功能，用于查询的 SQL 语句会被转化为 MapReduce 作业，然后提交到 Hadoop 上运行。</p>
<p><strong>特点</strong>：</p>
<ol>
<li>简单、容易上手 (提供了类似 sql 的查询语言 hql)，使得精通 sql 但是不了解 Java 编程的人也能很好地进行大数据分析；</li>
<li>灵活性高，可以自定义用户函数 (UDF) 和存储格式；</li>
<li>为超大的数据集设计的计算和存储能力，集群扩展容易;</li>
<li>统一的元数据管理，可与 presto／impala／sparksql 等共享数据；</li>
<li>执行延迟高，不适合做数据的实时处理，但适合做海量数据的离线处理；</li>
<li>不是关系型数据库。</li>
</ol>
<p><a href="/postImages/hive1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/hive1.png" class="lazyload"></a></p>
<h2 id="二、安装配置"><a href="#二、安装配置" class="headerlink" title="二、安装配置"></a>二、安装配置</h2><ol>
<li><p>下载解压hive包（这里我是3的版本）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf apache-hive-3.1.2-bin.tar.gz</span><br><span class="line">$mv apache-hive-3.1.2-bin &#x2F;soft&#x2F;</span><br><span class="line">$ln -s apache-hive-3.1.2-bin hive</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hive</span><br><span class="line">export HIVE_HOME&#x3D;&#x2F;soft&#x2F;hive</span><br><span class="line">export PATH&#x3D;$PATH:$HIVE_HOME&#x2F;bin</span><br><span class="line"># 配置生效</span><br><span class="line">$source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>复制mysql驱动程序到hive的lib目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp mysql-connector-java-5.1.38.jar &#x2F;soft&#x2F;hive&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置hive-env.sh</p>
<p>在hive下的conf目录下，找到hive-env.sh.template，并复制一份重命名为hive-env.sh</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure></div>

<p>编辑hive-env.sh，修改配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hadoop安装目录</span><br><span class="line">HADOOP_HOME&#x3D;&#x2F;soft&#x2F;hadoop</span><br><span class="line"># HIVE配置文件目录</span><br><span class="line">export HIVE_CONF_DIR&#x3D;&#x2F;soft&#x2F;hive&#x2F;conf</span><br><span class="line"># HIVE库文件目录</span><br><span class="line">export HIVE_AUX_JARS_PATH&#x3D;&#x2F;soft&#x2F;hive&#x2F;lib</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置hive-site.xml</p>
<p>在hive下的conf目录下，找到hive-default.xml.template，并复制一份重命名为hive-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure></div>

<p>然后对如下内容进行修改：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库的账户、密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接的MYSQL数据库，IP是我自己的本机WIN10。记得去创一个hive的数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://192.168.203.1:3306/hive?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.local.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Local scratch space for Hive jobs<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置下载资源目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.downloaded.resources.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/hive/downloads<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Temporary local directory for added resources in the remote file system.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置查询日志目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/hive/querylog<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Location of Hive run time structured log file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.logging.operation.log.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/hive/server2_log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Top level directory where operation logs are stored if logging functionality is enabled<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提示信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether to print the names of the columns in query output.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether to include the current database in the Hive prompt.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建hive数据库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hive;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化hive的元数据(表结构)到mysql中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure></div>

<p>这时候报错：</p>
<p><a href="/postImages/%E9%83%A8%E7%BD%B21.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%83%A8%E7%BD%B21.png" class="lazyload"></a></p>
<p>发现是hive-site.xml第3215行错误，定位到错误的地方：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi hive-site.xml +3215</span><br></pre></td></tr></table></figure></div>

<p>发现是注释    description 中的内容，有一个for&amp;#8的东西，将后面的&amp;…;删除即可。然后重新执行初始化命令。</p>
<p>最后查看MYSQL发现多了很多表。</p>
</li>
<li><p>启动Hive(要先启动HDFS)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>注意事项（别人写的，如果有问题可以试试）</p>
<ul>
<li><p>hive-site.xml中 mysql的驱动名称为com.mysql.cj.jdbc.Driver</p>
</li>
<li><p>xml文档中javax.jdo.option.ConnectionURL中&amp;要用&amp;替代,一定要指定字符集,时区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;hive?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;GMT</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>我已经提前对数据库的root用户进行授权</p>
</li>
</ul>
</li>
</ol>
<h2 id="三、HiveQL命令"><a href="#三、HiveQL命令" class="headerlink" title="三、HiveQL命令"></a>三、HiveQL命令</h2><p>在hive中的命令和MySQL基本上是一致的。有一点要注意， 数据是存在HDFS上的，HIVE只是用来做一个映射，他的元数据是放在MySQL上的（自带的不好用只能单线程不用）。</p>
<h3 id="3-1-基本命令"><a href="#3-1-基本命令" class="headerlink" title="3.1 基本命令"></a>3.1 基本命令</h3><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive --version</span><br></pre></td></tr></table></figure></div>

<h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive --help</span><br></pre></td></tr></table></figure></div>

<h4 id="启动HIVE"><a href="#启动HIVE" class="headerlink" title="启动HIVE"></a>启动HIVE</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive</span><br></pre></td></tr></table></figure></div>

<p>相当于开启了一个服务hive –service cli。但是不能并行。</p>
<h4 id="退出HIVE"><a href="#退出HIVE" class="headerlink" title="退出HIVE"></a>退出HIVE</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive &gt;exit;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-数据库相关"><a href="#3-2-数据库相关" class="headerlink" title="3.2 数据库相关"></a>3.2 数据库相关</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; create database mydb;</span><br></pre></td></tr></table></figure></div>

<h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; use mydb;</span><br></pre></td></tr></table></figure></div>

<h4 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; show databases;</span><br></pre></td></tr></table></figure></div>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (default)&gt; drop database mydb;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-表相关"><a href="#3-3-表相关" class="headerlink" title="3.3 表相关"></a>3.3 表相关</h3><p>在hive中表分为两种：</p>
<ul>
<li>托管表：删除表时，数据也删除了。（默认，即将数据也托管给Hive）</li>
<li>外部表：删除表时，数据不删除。(只是维护一个目录结构)</li>
</ul>
<h4 id="查看库中所有表"><a href="#查看库中所有表" class="headerlink" title="查看库中所有表"></a>查看库中所有表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;show tables in mydb;</span><br></pre></td></tr></table></figure></div>

<h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;CREATE [EXTERNAL] TABLE IF NOT EXISTS t1(id int,name string,age int) [COMMENT &#39;xx&#39;] ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39; lines terminated by &#39;\n&#39; STORED AS TEXTFILE;</span><br></pre></td></tr></table></figure></div>

<p>EXTERNAL（可选）：外部表</p>
<p>COMMENT：注释</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY：</p>
<p>lines terminated by：</p>
<p>STORED AS TEXTFILE：文本文件存储</p>
<p><a href="/postImages/cmd1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd1.png" class="lazyload"></a></p>
<p>通过hive (mydb)&gt; dfs -lsr /; 即在hive中执行查看HDFS命令，执行速度会大大提高。同时，也可以看到在hive中创建的内容在hdfs上的情况。</p>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;drop table t;</span><br></pre></td></tr></table></figure></div>

<h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><ol>
<li><p>使用insert（不推荐）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; insert into t1 values(1,&#39;tom&#39;,10);</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd2.png" class="lazyload"></a></p>
<p>insert操作走MR程序，所以过程非常慢，实际开发中一般不会进行该操作。可能会促发内存不足异常，解决方法在下面。</p>
</li>
<li><p>使用load</p>
<ul>
<li><p>从本地上传文件</p>
<p><a href="/postImages/cmd3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd3.png" class="lazyload"></a></p>
<p>先在本地创建一个文本文件（这里不小心多了两行空行，记录有两条NULL）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; load data local inpath &#39;&#x2F;home&#x2F;wbw&#x2F;tmp&#x2F;data1.txt&#39; into table t1;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>从HDFS移动文件</p>
<p>先将刚创建的文本文件上传到hdfs。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; load data inpath &#39;&#x2F;user&#x2F;wbw&#x2F;data1.txt&#39; [overwrite] into table t1;</span><br></pre></td></tr></table></figure></div>

<p>overwrite（可选）：覆盖</p>
</li>
</ul>
</li>
</ol>
<p>查看HDFS文件：</p>
<p><a href="/postImages/cmd6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd6.png" class="lazyload"></a></p>
<p><a href="/postImages/cmd7.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd7.png" class="lazyload"></a></p>
<p><a href="/postImages/cmd8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd8.png" class="lazyload"></a></p>
<p>可以看到文件并不是放在一起的，而是没进行一次操作，都会新增一个文件。</p>
<h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; desc [formatted] t1;</span><br></pre></td></tr></table></figure></div>

<p>不带formatted（简略版）：</p>
<p><a href="/postImages/cmd4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd4.png" class="lazyload"></a></p>
<p>带formatted（详细版）：</p>
<p><a href="/postImages/cmd5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd5.png" class="lazyload"></a></p>
<h4 id="查看表数据"><a href="#查看表数据" class="headerlink" title="查看表数据"></a>查看表数据</h4><ul>
<li>select count(*) from t1;    （走MR）</li>
<li>select id,name from t1;    （不走MR）</li>
<li>select * from t1 order by id desc;   （走MR）</li>
</ul>
<p>说明只要有设计到聚合相关的，都会走MR程序。</p>
<h4 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h4><ul>
<li><p>携带数据和表结构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; create table t2 as select * from t1;</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd9.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd9.png" class="lazyload"></a></p>
</li>
<li><p>不带数据，仅表结构</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; create table t3 like t1;</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd10.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd10.png" class="lazyload"></a></p>
</li>
</ul>
<h4 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h4><ol>
<li><p>创建分区表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; create table t4(id int,name string,age int) PARTITIONED BY (Year INT,Month INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39;;</span><br></pre></td></tr></table></figure></div>

<p>PARTITIONED BY (Year INT,Month INT)：分区字段</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’：分隔符</p>
</li>
<li><p>添加分区，创建目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; alter table t4 add partition(year&#x3D;2020,month&#x3D;12);</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd11.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd11.png" class="lazyload"></a></p>
<p>可以看到，分区的目录结构。其实就是在HDFS上多了几层条件目录。</p>
</li>
<li><p>显示表的分区信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; show partitions t4;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>加载数据到分区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; load data local inpath &#39;&#x2F;home&#x2F;wbw&#x2F;tmp&#x2F;data1.txt&#39; into table t4 partition(year&#x3D;2020,month&#x3D;11);</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd12.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd12.png" class="lazyload"></a></p>
<p><a href="/postImages/cmd13.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd13.png" class="lazyload"></a></p>
<p>这时候查看表内容，发现多了两个字段？其实是目录，没有字段。。。但是可以用where条件分区查看。</p>
</li>
<li><p>删除分区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; ALTER TABLE t4 DROP IF EXISTS PARTITION (year&#x3D;2014, month&#x3D;11);</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd14.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd14.png" class="lazyload"></a></p>
<p>可以看到只剩下一个month=12的分区了</p>
</li>
<li><p>动态分区</p>
<p>动态分区模式:</p>
<ul>
<li><p>strict：严格模式，插入时至少指定一个静态分区</p>
</li>
<li><p>nonstrict：非严格模式，可以不指定静态分区。</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.设置非严格模式</span><br><span class="line">$hive&gt;set hive.exec.dynamic.partition.mode&#x3D;nonstrict;</span><br><span class="line">&#x2F;&#x2F; 2.向分区表添加数据（因为Hive中一般不进行insert操作，如果要添加都是Load）</span><br><span class="line">$hive&gt;INSERT [OVERWRITE] TABLE &lt;employees&gt; PARTITION (&lt;country&gt;, &lt;state&gt;) SELECT ..., se.cnty, se.st FROM staged_employees se WHERE se.cnty &#x3D; &#39;US&#39;;</span><br><span class="line">解析：</span><br><span class="line">前提是有一个分区表，里面有country和state为分区字段。其次，select查询结果里面有该分区字段。</span><br><span class="line">将后面select查询结果，添加到employees表中，以country和state为分区字段。</span><br></pre></td></tr></table></figure></div>





</li>
</ol>
<h4 id="桶表"><a href="#桶表" class="headerlink" title="桶表"></a>桶表</h4><p>即hash算法，可以获得更快的查询速度。</p>
<ol>
<li><p>创建桶表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; create table t5(id int,name string,age int) CLUSTERED BY (id) INTO 3 BUCKETS ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39;;</span><br></pre></td></tr></table></figure></div>

<p>CLUSTERED BY (id) INTO 3 BUCKETS：根据id分3个桶</p>
</li>
</ol>
<p>   Q:如何确定桶的数量？</p>
<p>   A:评估数据量，保证每个桶的数据量block的2倍大小。</p>
<ol start="2">
<li><p>添加数据</p>
<ul>
<li><p>查询插入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; insert into t5 select id,name,age from t4;</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd15.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd15.png" class="lazyload"></a></p>
<p><a href="/postImages/cmd16.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd16.png" class="lazyload"></a></p>
</li>
<li><p>加载数据（为什么我是走MR的？）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; load data inpath &#39;&#x2F;user&#x2F;wbw&#x2F;data1.txt&#39; into table t5;</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd17.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd17.png" class="lazyload"></a></p>
<p><a href="/postImages/cmd18.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd18.png" class="lazyload"></a></p>
<p>可以看到每次添加数据都会产生一个新文件。</p>
</li>
</ul>
</li>
</ol>
<h4 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; EXPORT TABLE t5 TO &#39;&#x2F;user&#x2F;wbw&#x2F;export&#39;;</span><br></pre></td></tr></table></figure></div>

<p><a href="/postImages/cmd19.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/cmd19.png" class="lazyload"></a></p>
<h3 id="3-4-查询操作"><a href="#3-4-查询操作" class="headerlink" title="3.4 查询操作"></a>3.4 查询操作</h3><h4 id="order全排序"><a href="#order全排序" class="headerlink" title="order全排序"></a>order全排序</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; select * from t5 order by age;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">t5.id	t5.name	t5.age</span><br><span class="line">1	tom	11</span><br><span class="line">1	tom	11</span><br><span class="line">2	tom	12</span><br><span class="line">2	tom	12</span><br><span class="line">3	tom	13</span><br><span class="line">3	tom	13</span><br><span class="line">4	tom	14</span><br><span class="line">4	tom	14</span><br><span class="line">5	tom	15</span><br><span class="line">5	tom	15</span><br></pre></td></tr></table></figure></div>

<h4 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h4><p>map端排序，本地有序。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; select * from t5 sort by age;</span><br></pre></td></tr></table></figure></div>

<p>结果同上order排序</p>
<h4 id="DISTRIBUTE-BY分区"><a href="#DISTRIBUTE-BY分区" class="headerlink" title="DISTRIBUTE BY分区"></a>DISTRIBUTE BY分区</h4><p>类似于mysql的group by,进行分区操作。注意顺序.（先分区再排序）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; select id,age from t5 distribute by age sort by age desc;</span><br><span class="line">备注：</span><br><span class="line">cluster by &#x3D;&#x3D;&#x3D;&gt;  distribute by cid sort by age</span><br><span class="line">上面的语句可以等价的</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OK</span><br><span class="line">id	age</span><br><span class="line">5	15</span><br><span class="line">5	15</span><br><span class="line">4	14</span><br><span class="line">4	14</span><br><span class="line">3	13</span><br><span class="line">3	13</span><br><span class="line">2	12</span><br><span class="line">2	12</span><br><span class="line">1	11</span><br><span class="line">1	11</span><br></pre></td></tr></table></figure></div>

<h3 id="3-5-函数"><a href="#3-5-函数" class="headerlink" title="3.5 函数"></a>3.5 函数</h3><h4 id="Tab函数列表"><a href="#Tab函数列表" class="headerlink" title="Tab函数列表"></a>Tab函数列表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;(Tab键)</span><br></pre></td></tr></table></figure></div>

<h4 id="concat连接"><a href="#concat连接" class="headerlink" title="concat连接"></a>concat连接</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; select concat(&#39;tom&#39;,100);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">tom100</span><br></pre></td></tr></table></figure></div>

<h4 id="数据库、用户信息"><a href="#数据库、用户信息" class="headerlink" title="数据库、用户信息"></a>数据库、用户信息</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive (mydb)&gt; select current_database(),current_user() ;</span><br><span class="line">OK</span><br><span class="line">_c0	_c1</span><br><span class="line">mydb	wbw</span><br></pre></td></tr></table></figure></div>

<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;select cid,count(*) c ,max(price)  from orders group by cid having c &gt; 1 ;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-6-UDF用户自定义函数"><a href="#3-6-UDF用户自定义函数" class="headerlink" title="3.6 UDF用户自定义函数"></a>3.6 UDF用户自定义函数</h3><ol>
<li><p>导入pom依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建类，继承UDF</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.Description;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义hive函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Description</span>(name = <span class="string">"myadd"</span>,</span><br><span class="line">             value = <span class="string">"myadd(int a , int b) ==&gt; return a + b "</span>,</span><br><span class="line">             extended = <span class="string">"Example:\n"</span></span><br><span class="line">             + <span class="string">" myadd(1,1) ==&gt; 2 \n"</span></span><br><span class="line">             + <span class="string">" myadd(1,2,3) ==&gt; 6;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddUDF</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evaluate</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evaluate</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b , <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打成jar包</p>
</li>
<li><p>添加jar包到hive的类路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;cp &#x2F;xxx&#x2F;HiveDemo.jar &#x2F;soft&#x2F;hive&#x2F;lib</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重进入hive</p>
</li>
<li><p>创建临时函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TEMPORARY FUNCTION myadd AS &#39;XXX.XXX.XXX.XXX.AddUDF&#39;;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在查询中使用自定义函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;select myadd(1,2);</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="四、JDBC访问Hive"><a href="#四、JDBC访问Hive" class="headerlink" title="四、JDBC访问Hive"></a>四、JDBC访问Hive</h2><h3 id="4-1-远程jdbc方式连接"><a href="#4-1-远程jdbc方式连接" class="headerlink" title="4.1 远程jdbc方式连接"></a>4.1 远程jdbc方式连接</h3><ol>
<li><p>启动hiveserver2服务器，监听端口10000</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;hive --service hiveserver2 &amp;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过beeline命令行连接到hiveserver2</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入beeline命令行(于hive --service beeline)</span><br><span class="line">$&gt;beeline		</span><br><span class="line"># 查看帮助</span><br><span class="line">$beeline&gt;!help	</span><br><span class="line"># 退出</span><br><span class="line">$beeline&gt;!quit			</span><br><span class="line"># 连接到hive数据</span><br><span class="line">$beeline&gt;!connect jdbc:hive2:&#x2F;&#x2F;localhost:10000&#x2F;mydb2</span><br><span class="line">$beeline&gt;show databases ;</span><br><span class="line">$beeline&gt;use mydb2 ;</span><br><span class="line"># 显式表</span><br><span class="line">$beeline&gt;show tables;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h3 id="4-2-Hive-jdbc驱动程序"><a href="#4-2-Hive-jdbc驱动程序" class="headerlink" title="4.2 Hive-jdbc驱动程序"></a>4.2 Hive-jdbc驱动程序</h3><ol>
<li><p>添加依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写JAVA</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App class</span></span><br><span class="line"><span class="comment"> * Hive-JDBC连接操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/3 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"org.apache.hive.jdbc.HiveDriver"</span>);</span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:hive2://192.168.174.201:10000/mydb"</span>, <span class="string">"wbw"</span>, <span class="string">"Bow1024"</span>);</span><br><span class="line">        Statement statement = conn.createStatement();</span><br><span class="line">        ResultSet rs = statement.executeQuery(<span class="string">"select id,name,age from t5"</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getInt(<span class="number">1</span>) + <span class="string">","</span> + rs.getString(<span class="number">2</span>));;</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打印结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3,tom</span><br><span class="line">3,tom</span><br><span class="line">4,tom</span><br><span class="line">1,tom</span><br><span class="line">4,tom</span><br><span class="line">1,tom</span><br><span class="line">5,tom</span><br><span class="line">2,tom</span><br><span class="line">5,tom</span><br><span class="line">2,tom</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p>使用事务要求：</p>
<ol>
<li>所有事务自动提交。</li>
<li>只支持orc格式。</li>
<li>使用bucket表。<ol start="4">
<li>配置hive参数，使其支持事务。</li>
</ol>
</li>
</ol>
<h3 id="5-1-配置属性"><a href="#5-1-配置属性" class="headerlink" title="5.1 配置属性"></a>5.1 配置属性</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;SET hive.support.concurrency &#x3D; true;				</span><br><span class="line">$hive&gt;SET hive.enforce.bucketing &#x3D; true;					</span><br><span class="line">$hive&gt;SET hive.exec.dynamic.partition.mode &#x3D; nonstrict;	</span><br><span class="line">$hive&gt;SET hive.txn.manager &#x3D; org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class="line">$hive&gt;SET hive.compactor.initiator.on &#x3D; true;</span><br><span class="line">$hive&gt;SET hive.compactor.worker.threads &#x3D; 1;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-2-使用事务性操作"><a href="#5-2-使用事务性操作" class="headerlink" title="5.2 使用事务性操作"></a>5.2 使用事务性操作</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;CREATE TABLE tx(id int,name string,age int) CLUSTERED BY (id) INTO 3 BUCKETS ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39; stored as orc TBLPROPERTIES (&#39;transactional&#39;&#x3D;&#39;true&#39;);</span><br><span class="line"></span><br><span class="line">解析:</span><br><span class="line">之前都一样，后面要加上下面的内容！</span><br><span class="line">stored as orc 和 TBLPROPERTIES (&#39;transactional&#39;&#x3D;&#39;true&#39;);</span><br></pre></td></tr></table></figure></div>



<h2 id="六、视图"><a href="#六、视图" class="headerlink" title="六、视图"></a>六、视图</h2><p>和MySQL一样，视图只是表的关系映射，实际上是不存在的表。</p>
<h3 id="6-1-创建视图"><a href="#6-1-创建视图" class="headerlink" title="6.1 创建视图"></a>6.1 创建视图</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;create view v1 as select a.id aid,a.name ,b.id bid , b.order from customers a left outer join default.tt b on a.id &#x3D; b.cid ;</span><br></pre></td></tr></table></figure></div>



<h3 id="6-2-查看视图"><a href="#6-2-查看视图" class="headerlink" title="6.2 查看视图"></a>6.2 查看视图</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;select * from v1 ;</span><br></pre></td></tr></table></figure></div>



<h2 id="七、调优"><a href="#七、调优" class="headerlink" title="七、调优"></a>七、调优</h2><h3 id="7-1-explain"><a href="#7-1-explain" class="headerlink" title="7.1 explain"></a>7.1 explain</h3><p>使用explain查看查询计划</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive&gt;explain [extended] select count(*) from customers ;</span><br><span class="line">hive&gt;explain select t.name , count(*) from (select a.name ,b.id,b.orderno from customers a ,orders b where a.id &#x3D; b.cid) t group by t.name ;</span><br></pre></td></tr></table></figure></div>

<p>extended：更详细</p>
<h3 id="7-2-limit"><a href="#7-2-limit" class="headerlink" title="7.2 limit"></a>7.2 limit</h3><p>设置limit优化测，避免全部查询</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive&gt;set hive.limit.optimize.enable&#x3D;true</span><br></pre></td></tr></table></figure></div>



<h3 id="7-3-严格模式"><a href="#7-3-严格模式" class="headerlink" title="7.3 严格模式"></a>7.3 严格模式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;set hive.mapred.mode&#x3D;strict</span><br></pre></td></tr></table></figure></div>

<p>开启后的限制：</p>
<ol>
<li>分区表必须指定分区进行查询</li>
<li>order by时必须使用limit子句。</li>
<li>不允许笛卡尔积.</li>
</ol>
<h3 id="7-4-设置MR的数量"><a href="#7-4-设置MR的数量" class="headerlink" title="7.4 设置MR的数量"></a>7.4 设置MR的数量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置reducetask的字节数。</span><br><span class="line">$hive&gt;set hive.exec.reducers.bytes.per.reducer&#x3D;750000000	</span><br><span class="line">&#x2F;&#x2F; 设置reduce task的最大任务数</span><br><span class="line">$hive&gt;set hive.exec.reducers.max&#x3D;0					</span><br><span class="line">&#x2F;&#x2F; 设置reducetask个数。</span><br><span class="line">$hive&gt;set mapreduce.job.reduces&#x3D;0</span><br></pre></td></tr></table></figure></div>



<h3 id="7-5-JVM重用"><a href="#7-5-JVM重用" class="headerlink" title="7.5 JVM重用"></a>7.5 JVM重用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;set mapreduce.job.jvm.numtasks&#x3D;1		&#x2F;&#x2F;-1没有限制，使用大量小文件。</span><br></pre></td></tr></table></figure></div>



<h3 id="7-6-数据倾斜"><a href="#7-6-数据倾斜" class="headerlink" title="7.6 数据倾斜"></a>7.6 数据倾斜</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hive&gt;SET hive.optimize.skewjoin&#x3D;true;</span><br><span class="line">$hive&gt;SET hive.skewjoin.key&#x3D;100000;</span><br><span class="line">$hive&gt;SET hive.groupby.skewindata&#x3D;true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE mydb.doc(line string) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39; ;</span><br><span class="line"></span><br><span class="line">select t.word,count(*) from (select explode(split(line,&#39; &#39;)) word from doc ) t group by t.word ;</span><br></pre></td></tr></table></figure></div>



<h2 id="八、问题汇总"><a href="#八、问题汇总" class="headerlink" title="八、问题汇总"></a>八、问题汇总</h2><h3 id="8-1-虚拟内存不足"><a href="#8-1-虚拟内存不足" class="headerlink" title="8.1 虚拟内存不足"></a>8.1 虚拟内存不足</h3><p><a href="https://blog.csdn.net/weixin_33725722/article/details/92442061" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33725722/article/details/92442061</a></p>
<p>当进行计算的操作时候，可能发生内存不足的情况，如上面的表插入insert时候。</p>
<h3 id="8-2-JDBC-Hive连接不上"><a href="#8-2-JDBC-Hive连接不上" class="headerlink" title="8.2 JDBC-Hive连接不上"></a>8.2 JDBC-Hive连接不上</h3><p>Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:10000/mydb;: Failed to open new session: java.lang.RuntimeException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.authorize.AuthorizationException): User: wbw is not allowed to impersonate root (state=08S01,code=0)</p>
<p>解决方法：</p>
<p><a href="https://blog.csdn.net/finejade1027/article/details/91637283" target="_blank" rel="noopener">https://blog.csdn.net/finejade1027/article/details/91637283</a></p>
<p>User: wbw is not allowed to impersonate root .</p>
<p>hadoop.proxyuser.root.hosts配置项名称中root部分为报错User:* 中的用户名部分，根据需要修改。如这里的wbw，那就要修改成wbw。所有节点都要改！然后重新连接后，用户名输入wbw</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在core-site.xml添加如下内容后，重启Hadoop  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.wbw.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.wbw.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="九、注意事项"><a href="#九、注意事项" class="headerlink" title="九、注意事项"></a>九、注意事项</h2><p>如果配置hadoop HA之前，搭建了Hive的话，再HA之后，需要调整路径信息。</p>
<p>主要是修改mysql中的dbs,tbls等相关表。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（基本程序设计结构）</title>
    <url>/2020/05/11/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（基本程序设计结构）"><a href="#JAVA核心技术卷I（基本程序设计结构）" class="headerlink" title="JAVA核心技术卷I（基本程序设计结构）"></a>JAVA核心技术卷I（基本程序设计结构）</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1-1-整形"><a href="#1-1-整形" class="headerlink" title="1.1 整形"></a>1.1 整形</h3><p><strong>分类</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>4字节</td>
<td>-2 147 483 648 ~ 2 147 483 647（10位，刚刚超过20亿）</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>-32 768 ~ 32 767</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>-9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807（19位）</td>
</tr>
<tr>
<td>byte</td>
<td>1字节</td>
<td>-128 ~ 127</td>
</tr>
</tbody></table>
<ul>
<li><p>其中<strong>byte</strong>和<strong>short</strong>主要用于特定场合（如，底层文件处理，或者存储空间宝贵时的大数组）</p>
</li>
<li><p>长整型数值有一个后缀L或l</p>
</li>
<li><p>十六进制：0x开头</p>
</li>
<li><p>八进制：0开头（最好不要用，会混淆）</p>
</li>
<li><p>二进制：0b开头（JAVA7之后）</p>
</li>
</ul>
<h3 id="1-2-浮点类型"><a href="#1-2-浮点类型" class="headerlink" title="1.2 浮点类型"></a>1.2 浮点类型</h3><p><strong>分类</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>大约±3.402 823 47E+38F（有效位数6~7位）</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>大约±1.797 693 134 862 315 70E+308（有效位数15位）</td>
</tr>
</tbody></table>
<ul>
<li>float类型数值有一个后缀F或f，没有的默认为double</li>
<li>NaN：不是一个数字。可以用如下方式判断 <code>if (Double.isNaN(x))</code></li>
<li>浮点数不适合用于无法接受舍入误差的金融计算，可以用 <code>BigDecimal</code></li>
</ul>
<h3 id="1-3-char-类型"><a href="#1-3-char-类型" class="headerlink" title="1.3 char 类型"></a>1.3 char 类型</h3><p>char 在java中是2个字节。java采用unicode，2个字节（16位）来表示一个字符。</p>
<p>强烈建议不要再程序中使用char类型，除非确实需要处理UTF-16代码单元。最好将字符串作为抽象数据类型处理。P48</p>
<h3 id="1-4-boolean-类型"><a href="#1-4-boolean-类型" class="headerlink" title="1.4 boolean 类型"></a>1.4 boolean 类型</h3><p>占1字节。</p>
<p>整型值和布尔值不能互转。</p>
<h2 id="二、变量与常量"><a href="#二、变量与常量" class="headerlink" title="二、变量与常量"></a>二、变量与常量</h2><ul>
<li>final 定义常量</li>
</ul>
<h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="3-1-四则运算"><a href="#3-1-四则运算" class="headerlink" title="3.1 四则运算"></a>3.1 四则运算</h3><ul>
<li><p>整数被0除会产生一个 <code>异常</code>，浮点数被0除会得到 <code>无穷大</code> 或 <code>NaN</code></p>
</li>
<li><p>求余操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-<span class="number">3</span> % <span class="number">2</span>	<span class="comment">// 结果-1</span></span><br><span class="line">Math.floorMod(-<span class="number">3</span> , <span class="number">2</span>)	<span class="comment">// 结果为1</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h3 id="3-2-位运算"><a href="#3-2-位运算" class="headerlink" title="3.2 位运算"></a>3.2 位运算</h3><ul>
<li><code>&gt;&gt;&gt;</code> 高位补0，没有 <code>&lt;&lt;&lt;</code> 操作符</li>
<li>位移运算右操作数要模32运算（long类型64），比如 <code>1 &gt;&gt; 35</code> 等同于 <code>1 &gt;&gt; 3</code>  </li>
</ul>
<h2 id="四、字符串"><a href="#四、字符串" class="headerlink" title="四、字符串"></a>四、字符串</h2><h3 id="4-1-子串"><a href="#4-1-子串" class="headerlink" title="4.1 子串"></a>4.1 子串</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"Hello"</span>;</span><br><span class="line">str.substring(<span class="number">0</span>, <span class="number">3</span>);	<span class="comment">// 左闭右开区间</span></span><br></pre></td></tr></table></figure></div>



<h3 id="4-2-拼接"><a href="#4-2-拼接" class="headerlink" title="4.2 拼接"></a>4.2 拼接</h3><p>除了常规的 <code>+</code> 操作，还可以使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">String.join(<span class="string">" / "</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>); <span class="comment">// 第一个参数是分隔符</span></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">String.join(<span class="string">" / "</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;)</span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.add(<span class="string">"3"</span>);</span><br><span class="line">System.out.println(String.join(<span class="string">" / "</span>, list));</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span> / <span class="number">2</span> / <span class="number">3</span></span><br></pre></td></tr></table></figure></div>



<p>如果需要频繁拼接小字段字符串的话，使用 <code>StringBuilder</code> （常用API）：</p>
<ul>
<li>length()</li>
<li>append(char c)</li>
<li>append(String str)</li>
<li>setCharAt(int i, char c)</li>
<li>insert(int offset, String str)</li>
<li>insert(int offset, char c)</li>
<li>delete(int starIndex, int endIndex)：左闭右开</li>
<li>toString()</li>
</ul>
<h3 id="4-3-不可变字符串-及-比较"><a href="#4-3-不可变字符串-及-比较" class="headerlink" title="4.3 不可变字符串 及 比较"></a>4.3 不可变字符串 及 比较</h3><p>String没有提供修改字符串中某个字符的方法。</p>
<p>字符串的值将被放到一个共享池中，如果需要的字符串存在池中，就直接引用。当没有变量引用的时候，则自动回收：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"hello"</span>;</span><br><span class="line">String s2 = <span class="string">"hello"</span>;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);		<span class="comment">// 这里 new 在堆中创建</span></span><br><span class="line">System.out.println(s1 == <span class="string">"hello"</span>);		<span class="comment">// 地址一样</span></span><br><span class="line">System.out.println(s1 == s2);			<span class="comment">// 相同的字符串值引用同一个常量池中的字符串</span></span><br><span class="line">System.out.println(s1 == s3);			<span class="comment">// 这里的 == 是比较地址</span></span><br><span class="line">System.out.println(s1.equals(s3));		<span class="comment">// equals 是值比较</span></span><br><span class="line">-------------------------------------</span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure></div>



<h3 id="4-4-常用API"><a href="#4-4-常用API" class="headerlink" title="4.4 常用API"></a>4.4 常用API</h3><ul>
<li>char charAt(int index)：返回指定下标的字符</li>
<li>int compareTo(String other)：字典顺序，比较大小</li>
<li>boolean equals(String other)：比较值是否相等</li>
<li>boolean equalsIgnoreCase(String other)：不区分大小写比较</li>
<li>boolean startWith(String prefix)</li>
<li>boolean endWith(String suffix)：是否以prefix开头，或以suffix结尾</li>
<li>int indexOf(String str)</li>
<li>int indexOf(String str, int fromIndex)：匹配字符串，从fromIndex开始。没有找到返回-1</li>
<li>int lastIndexOf(String str)</li>
<li>int lastIndexOf(String str, int fromIndex)：匹配最后一个，从fromIndex开始</li>
<li>int length()：字符串长度</li>
<li>String replace(CharSquence oldString, CharSquence newString)：用newString，替换字符串中所有的oldString。</li>
<li>String substring(int beginIndex)：获取子串，从下标开始</li>
<li>String substring(int beginIndex, int endIndex)：子串，左闭右开</li>
<li>String toLowerCase()</li>
<li>String toUpperCase()：所有字符转为小写/大写</li>
<li>String trim()：删除字符串中头尾的空格</li>
</ul>
<h2 id="五、输入输出"><a href="#五、输入输出" class="headerlink" title="五、输入输出"></a>五、输入输出</h2><h3 id="5-1-控制台"><a href="#5-1-控制台" class="headerlink" title="5.1 控制台"></a>5.1 控制台</h3><p><strong>输入</strong></p>
<p>Scanner常用API：</p>
<ul>
<li>Scanner(InputStream in)</li>
<li>nextLine()</li>
<li>next()：以空格分隔的单词</li>
<li>nextInt()</li>
<li>nextDouble()</li>
<li>hasNext()：是否存在下一个单词。（当输入流是文件？时候就有用了）</li>
<li>hasNextInt()</li>
<li>hasNextDouble()</li>
</ul>
<p><strong>格式化输出</strong></p>
<p>沿用了C语言的printf风格：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">"%s %8.2d"</span>, str, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>

<p>注意：对于%s，如果该对象实现了 <code>Formattable</code> 接口的 <code>fotmatTo</code> 方法，那么调用该方法。否则调用 <code>toString</code> 方法</p>
<p>如果你不想输出，只想得到一个格式化字符串，可以使用静态方法：<code>String.format</code></p>
<h3 id="5-2-文件"><a href="#5-2-文件" class="headerlink" title="5.2 文件"></a>5.2 文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String filePath = <span class="string">"d:\\tmp\\myfile.txt"</span>;</span><br><span class="line">    <span class="comment">// 输出内容到文件</span></span><br><span class="line">    PrintWriter pw = <span class="keyword">new</span> PrintWriter(filePath, <span class="string">"UTF-8"</span>);</span><br><span class="line">    pw.println(<span class="string">"hello world"</span>);</span><br><span class="line">    pw.print(<span class="number">1</span>);</span><br><span class="line">    pw.print(<span class="number">2.3</span>);</span><br><span class="line">    pw.print(<span class="string">'c'</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">    <span class="comment">// 从文件中读取内容</span></span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(filePath), <span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        String word = scanner.next();</span><br><span class="line">        System.out.println(word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">输出结果：</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line"><span class="number">12.3</span>c</span><br></pre></td></tr></table></figure></div>



<h2 id="六、流程控制"><a href="#六、流程控制" class="headerlink" title="六、流程控制"></a>六、流程控制</h2><h3 id="6-1-循环"><a href="#6-1-循环" class="headerlink" title="6.1 循环"></a>6.1 循环</h3><p>有时候循环嵌套太深，可以用一个标签直接退出最外层循环</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBreak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    label_1:		<span class="comment">// 便签定义在要退出的最外层循环之上</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i++ &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span> label_1;	<span class="comment">// 退出循环到最外层</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="七、大数"><a href="#七、大数" class="headerlink" title="七、大数"></a>七、大数</h2><p><strong>BigInteger</strong></p>
<ul>
<li>BigInteger add(BigInteger other)：+</li>
<li>BigInteger subtract(BigInteger other)：-</li>
<li>BigInteger multiply(BigInteger other)：*</li>
<li>BigInteger divide(BigInteger other)：/</li>
<li>BigInteger mod(BigInteger other)：%</li>
<li>sqrt()：开方<code>java9</code></li>
<li>int compareTo(BigInteger other)：比较大小</li>
<li>BigInteger.valueOf(long x)：转为大数</li>
</ul>
<p><strong>BigDecimal</strong></p>
<p>和上面的操作基本一样，不过：</p>
<p>divide（/）：如果是无限循环小数，会抛出异常。这时候就需要用:</p>
<p>BigDecimal divide(BigDecimal other, RoundingMode mode)：mode可以是 <code>RoundingMode.HALF_UP</code> 四舍五入</p>
<h2 id="八、数组"><a href="#八、数组" class="headerlink" title="八、数组"></a>八、数组</h2><p>静态类Arrays，常用API：</p>
<ul>
<li>copyOf(xxx[] a, int newLength)：拷贝数组a，长度为newLength。如果end比原数组小，就截取；如果大，多的赋0初值，或者false。</li>
<li>copyOfRange(xxx[] a, int start, int end)：范围拷贝（左闭右开），少截取，多补0/false</li>
<li>sort(xxx[] a)：优化后的快排</li>
<li>int binarySearch(xxx[] a, xxx v)：二分查找</li>
<li>int binarySearch(xxx[] a, int start, int end, xxx v)：指定范围的二分查找</li>
<li>fill(xxx[]a, xxx v)：用v填充数组</li>
<li>equals(xxx[] a, xxx[] b)：比较两数组是否相等（大小+元素）</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（对象与类）</title>
    <url>/2020/05/12/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（对象与类）"><a href="#JAVA核心技术卷I（对象与类）" class="headerlink" title="JAVA核心技术卷I（对象与类）"></a>JAVA核心技术卷I（对象与类）</h1><h2 id="一、LocalDate-日期类"><a href="#一、LocalDate-日期类" class="headerlink" title="一、LocalDate 日期类"></a>一、LocalDate 日期类</h2><p>常见API（JDK8）:</p>
<ul>
<li><p>static LocalDate now()：构造一个当前日期对象</p>
</li>
<li><p>static LocalDate of(int year, int month, int day)：指定日期</p>
</li>
<li><p>int getYear()</p>
</li>
<li><p>int geyMonthValue()</p>
</li>
<li><p>int getDayOfMonth()</p>
<p>得到当前日期的年、月、日</p>
</li>
<li><p>DayOfWeek getDayOfWeek()：获取星期几（1=星期一，7=星期日）</p>
</li>
<li><p>LocalDate plusDays(int n)</p>
</li>
<li><p>LocalDate minusDays(int n)</p>
<p>返回一个新的日期，N天后和N天前（年、月操作一样）</p>
</li>
</ul>
<h2 id="二、自定义类"><a href="#二、自定义类" class="headerlink" title="二、自定义类"></a>二、自定义类</h2><h3 id="2-1-封装性的破坏"><a href="#2-1-封装性的破坏" class="headerlink" title="2.1 封装性的破坏"></a>2.1 封装性的破坏</h3><p><strong>警告：</strong>不要编写返回可变对象引用的访问器方法。这里有个经验，如果需要返回已给可变数据字段的副本，就应该使用clone（第六章）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象的封装性：</span></span><br><span class="line"><span class="comment"> * 并未设置Person的set方法，但是他的状态被改变了。破坏了封装性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">"init"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Item item = <span class="keyword">new</span> Item();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    System.out.println(person.getItem().getName());</span><br><span class="line">    Item tmp = person.getItem(); <span class="comment">// 这里返回了一个堆中的引用，和Person中的是同一个对象</span></span><br><span class="line">    tmp.setName(<span class="string">"Apple"</span>);</span><br><span class="line">    System.out.println(person.getItem().getName());</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------</span><br><span class="line">运行结果：</span><br><span class="line">init</span><br><span class="line">Apple</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-final-实例字段"><a href="#2-2-final-实例字段" class="headerlink" title="2.2 final 实例字段"></a>2.2 final 实例字段</h3><p>final关键字只是表示存储在evaluations变量中的对象引用不会再指示另一个不同的StringBuilder对象，不过这个对象可以改变！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StringBuilder evaluations;	<span class="comment">// 不允许改变对象引用</span></span><br><span class="line">evaluations = <span class="keyword">new</span> StringBilder();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    evalations.append(<span class="string">"Hello!\n"</span>);		<span class="comment">// 允许对象内容改变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="三、静态字段与静态方法"><a href="#三、静态字段与静态方法" class="headerlink" title="三、静态字段与静态方法"></a>三、静态字段与静态方法</h2><h3 id="3-1-工厂方法"><a href="#3-1-工厂方法" class="headerlink" title="3.1 工厂方法"></a>3.1 工厂方法</h3><p>类似于LocalDate.now()，就使用了静态工程的方法来构造对象。P117</p>
<h2 id="四、方法参数"><a href="#四、方法参数" class="headerlink" title="四、方法参数"></a>四、方法参数</h2><p>方法参数（两种）</p>
<ul>
<li>基本数据类型（数字、布尔值）</li>
<li>对象引用</li>
</ul>
<p>Java程序设计语言总是采用 <code>按值调用</code> （不论是上面说的哪种类型参数）！也就是说，方法得到的是所有参数值的一个副本。（有人说JAVA对象是采用引用调用这是不对的）P123</p>
<p><strong>解释</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwapDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 并不能实现交换的效果。这里的x和y是</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Person x, Person y)</span> </span>&#123;</span><br><span class="line">        Person temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 在堆分配了2个空间</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"P1"</span>);	</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"P2"</span>);</span><br><span class="line"></span><br><span class="line">        swap(p1, p2);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">        System.out.println(p2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------</span><br><span class="line">运行结果：</span><br><span class="line">P1</span><br><span class="line">P2</span><br></pre></td></tr></table></figure></div>

<p>可以看到结果并没有被改变：</p>
<p><a href="/postImages/swap.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/swap.png" class="lazyload"></a></p>
<p>原因是x和y只是原来p1和p2的<code>对象引用</code>的副本，虽然x和y确实进行了交换，但是！在退出swap函数之后，x和y被丢弃了，而原来的p1和p2还是指向原始的堆空间。因此并没有发生交换效果。</p>
<p><strong>总结</strong></p>
<ul>
<li>方法不能修改基本数据类型的参数</li>
<li>方法可以改变对象参数的状态（通过对象引用的副本修改所引用对象的状态）</li>
<li>方法不能让一个对象参数引用一个新的对象</li>
</ul>
<h2 id="五、对象构造"><a href="#五、对象构造" class="headerlink" title="五、对象构造"></a>五、对象构造</h2><h3 id="5-1-重载"><a href="#5-1-重载" class="headerlink" title="5.1 重载"></a>5.1 重载</h3><p>有相同的名字、不同的参数。（<strong>方法签名：方法名+参数类型</strong>，注意返回类型不是签名的一部分）</p>
<h3 id="5-2-默认字段初始化"><a href="#5-2-默认字段初始化" class="headerlink" title="5.2 默认字段初始化"></a>5.2 默认字段初始化</h3><p>如果没有显示的赋值，那么会被赋值初始值：数值为0，布尔值为false，对象引用为null。</p>
<p>不过确保每个实例字段都有一个有意义的初值，总是一个好主意。</p>
<h3 id="5-3-初始化块"><a href="#5-3-初始化块" class="headerlink" title="5.3 初始化块"></a>5.3 初始化块</h3><p>首先运行初始化块，然后才运行构造器的主体部分。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字段定义</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 先执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>不允许读取在后面初始化的字段，建议总是将初始化块放在字段定义之后。</p>
<p><strong>静态初始化块</strong></p>
<p>如果类的静态字段需要很复杂的初始化代码，可以用静态初始化块：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="六、包"><a href="#六、包" class="headerlink" title="六、包"></a>六、包</h2><h3 id="6-1-包中的类"><a href="#6-1-包中的类" class="headerlink" title="6.1 包中的类"></a>6.1 包中的类</h3><p>包名和目录没有任何的联系，但是如果一个包名和目录路径不匹配，但是包中引用了其他包的类。那么就有可能造成找不到类的错误。</p>
<h3 id="6-2-包访问"><a href="#6-2-包访问" class="headerlink" title="6.2 包访问"></a>6.2 包访问</h3><ul>
<li>public：可以由任意类使用</li>
<li>private：只能由定义他们的类使用</li>
<li>无：这个部分（类、方法、变量）可以被同一个包中的所有方法访问。</li>
</ul>
<h3 id="6-3-类路径"><a href="#6-3-类路径" class="headerlink" title="6.3 类路径"></a>6.3 类路径</h3><p><a href="https://blog.csdn.net/qq_37284484/article/details/80776810" target="_blank" rel="noopener">https://blog.csdn.net/qq_37284484/article/details/80776810</a></p>
<h2 id="七、类设计技巧"><a href="#七、类设计技巧" class="headerlink" title="七、类设计技巧"></a>七、类设计技巧</h2><ol>
<li>一定要保证数据私有（绝对不要破坏封装性）</li>
<li>一定要堆数据进行初始化</li>
<li>不要再类中使用过多的基本类型</li>
<li>不是所有的字段都需要单独的字段访问器和字段更改器</li>
<li>分解由过多指责的类</li>
<li>类名和方法名要能够体现他们的职责</li>
<li>优先使用不可变的类</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（并发）</title>
    <url>/2020/05/21/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E5%B9%B6%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（并发）"><a href="#JAVA核心技术卷I（并发）" class="headerlink" title="JAVA核心技术卷I（并发）"></a>JAVA核心技术卷I（并发）</h1><h2 id="一、创建线程"><a href="#一、创建线程" class="headerlink" title="一、创建线程"></a>一、创建线程</h2><ul>
<li><p>Thread(Runable target)</p>
</li>
<li><p>void start()：启动这个线程从而调用run()方法</p>
</li>
<li><p>void run()</p>
</li>
</ul>
<h2 id="二、线程状态"><a href="#二、线程状态" class="headerlink" title="二、线程状态"></a>二、线程状态</h2><ol>
<li><p>获取线程状态</p>
<blockquote>
<p>Thread.State getState()</p>
<p>取值：NEW、RUNNING、BLOCKED、WAITING、TIMED_WAITING、TERMINATED</p>
</blockquote>
</li>
<li><p>新建线程</p>
<blockquote>
<p>new Thread(r)</p>
</blockquote>
</li>
<li><p>可运行线程</p>
<p>可能正在运行也可能没有运行。</p>
</li>
<li><p>阻塞和等待线程</p>
<ul>
<li><p>阻塞</p>
</li>
<li><p>等待</p>
<blockquote>
<p>Thread.join()</p>
</blockquote>
</li>
<li><p>计时等待</p>
<blockquote>
<p>void join(long millis)</p>
</blockquote>
</li>
</ul>
</li>
<li><p>终止线程</p>
<ul>
<li>run方法正常退出</li>
<li>没有捕获异常终止了run方法</li>
</ul>
</li>
</ol>
<h2 id="三、线程属性"><a href="#三、线程属性" class="headerlink" title="三、线程属性"></a>三、线程属性</h2><h3 id="3-1-中断线程"><a href="#3-1-中断线程" class="headerlink" title="3.1 中断线程"></a>3.1 中断线程</h3><p><strong>java.lang.Thread</strong></p>
<ul>
<li><p>void interrupt()</p>
<p>向线程发送中断请求。线程的中断状态将被设置成true。如果当前该线程被一个sleep调用或阻塞，则抛出一个InterruptedException异常</p>
</li>
<li><p>static boolean interrupted()</p>
<p>测试当前线程（即正在执行这个指令的线程）是否被中断。这是一个静态方法。这个调用有一个副作用——它将当前线程的中断状态重置为false</p>
</li>
<li><p>boolean isInterrupted()</p>
<p>测试线程是否被中断。和interrupt不同，不会改变线程的中断状态</p>
</li>
<li><p>static Thread currentThread()</p>
<p>返回当前线程对象</p>
</li>
</ul>
<h3 id="3-2-守护线程"><a href="#3-2-守护线程" class="headerlink" title="3.2 守护线程"></a>3.2 守护线程</h3><p>守护线程的唯一用途就是为其他线程提供服务。当只剩下守护线程的时候，虚拟机就会退出。因为如果只有守护线程，就没有必要继续运行程序了。</p>
<ul>
<li><p>void setDaemon(boolean isDaemen)</p>
<p>标识该线程为守护线程或用户线程。方法必须在线程启动前调用。</p>
</li>
</ul>
<h3 id="3-3-线程名"><a href="#3-3-线程名" class="headerlink" title="3.3 线程名"></a>3.3 线程名</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">t.setName(<span class="string">"Web crawler"</span>);</span><br></pre></td></tr></table></figure></div>

<p>这在线程转储时可能很有用。</p>
<h2 id="四、同步"><a href="#四、同步" class="headerlink" title="四、同步"></a>四、同步</h2><h3 id="4-1-竞态条件"><a href="#4-1-竞态条件" class="headerlink" title="4.1 竞态条件"></a>4.1 竞态条件</h3><p>当我们运行如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[i] +&#x3D; x;</span><br></pre></td></tr></table></figure></div>

<p>的时候的会转为一系类的字节码:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aload_0</span><br><span class="line">getfield</span><br><span class="line">iload_2</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>也就是说，一个语句要执行N个指令。如果在这些指令没有全部执行完之前，被中断。其他指令运行完再回头继续执行这个剩余指令，那么就有可能数据出问题。（即没有原子性）</p>
<h3 id="4-2-锁对象-和-条件对象"><a href="#4-2-锁对象-和-条件对象" class="headerlink" title="4.2 锁对象 和 条件对象"></a>4.2 锁对象 和 条件对象</h3><p>P568</p>
<ul>
<li>锁用来保护代码片段，一次只能由一个线程执行被保护的代码</li>
<li>锁可以管理试图进入被保护代码段的线程</li>
</ul>
<p>在锁中如果需要条件判断用条件对象。</p>
<ul>
<li>一个锁可以有一个或多个相关联的条件对象</li>
<li>每个条件对象管理那些已经进入被保护代码段但还不能运行的线程</li>
</ul>
<p>可以用 <code>synchronized</code> 关键字代替。</p>
<h3 id="4-3-synchronized-关键字"><a href="#4-3-synchronized-关键字" class="headerlink" title="4.3 synchronized 关键字"></a>4.3 synchronized 关键字</h3><p>每个对象都有一个内部锁，并且这个锁有一个内部条件。这个锁会管理试图进入synchronized方法的线程，这个条件可以管理调用了wait的线程。</p>
<blockquote>
<p>notifyAll =&gt; signalAll</p>
<p>notify =&gt; signal</p>
<p>wait =&gt; await</p>
</blockquote>
<p><strong>何时使用</strong></p>
<ul>
<li>最好既不用Lock/Condition 也不用 synchronized 关键字。再许多情况下，可以使用java.util.concurrent包中的某种机制，它会为你处理所有的锁定。</li>
<li>如果synchronized关键字适合你的程序，那么尽可能用这个，减少代码量。</li>
<li>如果特别需要 Lock/Condition 结构提供的格外能力，则使用Lock/Condition 。</li>
</ul>
<h3 id="4-4-同步块"><a href="#4-4-同步块" class="headerlink" title="4.4 同步块"></a>4.4 同步块</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-5-监视器概念"><a href="#4-5-监视器概念" class="headerlink" title="4.5 监视器概念"></a>4.5 监视器概念</h3><ul>
<li>监视器是只包含私有字段的类</li>
<li>监视器类的每个对象有一个关联的锁</li>
<li>所有方法由这个锁锁定</li>
<li>锁可以有任意多个相关联的条件</li>
</ul>
<h3 id="4-6-volatile-和-final"><a href="#4-6-volatile-和-final" class="headerlink" title="4.6 volatile 和 final"></a>4.6 volatile 和 final</h3><p>P581-582</p>
<p>假设对共享变量除了赋值之外并不做其他操作，那么可以将这些共享变量声明为volatile</p>
<h2 id="五、线程安全的集合"><a href="#五、线程安全的集合" class="headerlink" title="五、线程安全的集合"></a>五、线程安全的集合</h2><h2 id="六、任务和线程池"><a href="#六、任务和线程池" class="headerlink" title="六、任务和线程池"></a>六、任务和线程池</h2><h3 id="6-1-Callable-与-Future"><a href="#6-1-Callable-与-Future" class="headerlink" title="6.1 Callable 与 Future"></a>6.1 Callable 与 Future</h3><p>Callable&lt; T&gt; 是一个接口，只有一个call方法。返回类型是T。</p>
<p>Future保存异步计算的结果。</p>
<ul>
<li><p>V get()</p>
</li>
<li><p>V get(long time, TimeUnit unit)</p>
<p>获取结果</p>
</li>
<li><p>boolean cancel(boolean mayInterrupt)</p>
<p>尝试取消这个任务的运行</p>
</li>
<li><p>boolean isCancelled()</p>
</li>
<li><p>boolean isDone()</p>
</li>
</ul>
<p><strong>示例</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable&lt;Integer&gt; task = ...;</span><br><span class="line"><span class="keyword">var</span> futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(task);</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">t.start();</span><br><span class="line">...</span><br><span class="line">Integer result = task.get();</span><br></pre></td></tr></table></figure></div>



<h3 id="6-2-执行器"><a href="#6-2-执行器" class="headerlink" title="6.2 执行器"></a>6.2 执行器</h3><p><strong>执行器类（Executors）</strong>有许多静态工厂方法，用来构造线程池。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>newCachedThreadPool</td>
<td>必要时创建新线程，空线程会保留60秒</td>
</tr>
<tr>
<td>newFixedThreadPool</td>
<td>池中包含固定数目的线程；空闲线程会一直保留</td>
</tr>
<tr>
<td>newWorkStealingPool</td>
<td>一种适合“fork-join”任务的线程池，其中复杂的任务会分解为简单的任务，空闲线程会“密取”较简单的任务</td>
</tr>
<tr>
<td>newSingleThreadPool</td>
<td>只有一个线程的“池”，会顺序执行所提交的任务</td>
</tr>
<tr>
<td>newScheduledTahreadPool</td>
<td>用于调度执行的固定线程</td>
</tr>
<tr>
<td>newSingleThreadScheuledExcutor</td>
<td>用于调度执行的单线程“池”</td>
</tr>
</tbody></table>
<p>如果线程生存期很短，或者大量时间都在阻塞，那么可以用一个缓存线程池。不过，如果线程工作量很大而且不阻塞，你肯定不希望运行太多线程。</p>
<p>为了得到最优的运行速度，并发线程数等于处理器内核数。在这种情况下，就应当使用固定线程池，即并发线程总数有一个上限。</p>
<p>单线程执行器对于性能分析很有帮助。如果临时用一个单线程替换缓存或者固定线程池，就能测量不适用并发的情况下应用的运行速度会慢多少。</p>
<p><strong>提交任务</strong></p>
<ul>
<li>Future&lt; T&gt; submit(Callable&lt; T&gt; task)</li>
<li>Future&lt; ?&gt; submit(Runnable task)</li>
<li>Future&lt; T&gt; submit(Runnable task, T result)</li>
</ul>
<p><strong>关闭线程池</strong></p>
<ul>
<li>shutdown：关闭线程池</li>
<li>shutdownNow：线程池会取消所有尚未开始的任务</li>
</ul>
<p><strong>使用连接池的工作</strong></p>
<ol>
<li>调用Executor类的静态方法newCachedThreadPool或newFixedThreadPool</li>
<li>调用submit提交Runnable或Callable对象</li>
<li>保存好返回的Future对象，以便得到结果或取消任务</li>
<li>当不想提交任何任务时，调用shutdown</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（异常、断言和日志）</title>
    <url>/2020/05/18/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E6%96%AD%E8%A8%80%E5%92%8C%E6%97%A5%E5%BF%97%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（异常、断言和日志）"><a href="#JAVA核心技术卷I（异常、断言和日志）" class="headerlink" title="JAVA核心技术卷I（异常、断言和日志）"></a>JAVA核心技术卷I（异常、断言和日志）</h1><h2 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h2><p>Throwable</p>
<ul>
<li>Error</li>
<li>Exception<ul>
<li>IOException</li>
<li>RuntimeException</li>
</ul>
</li>
</ul>
<h3 id="1-1-创建异常"><a href="#1-1-创建异常" class="headerlink" title="1.1 创建异常"></a>1.1 创建异常</h3><p>派生于Exception的类，或者派生于Exception的子类。</p>
<p>包含两个构造器，一个无参的，一个带String参数的。</p>
<p>获得Throwable的详细信息 <code>String getMessage()</code></p>
<h3 id="1-2-异常捕获"><a href="#1-2-异常捕获" class="headerlink" title="1.2 异常捕获"></a>1.2 异常捕获</h3><p>捕获你知道如何处理的异常，而继续抛出你不知道怎么处理的异常。</p>
<h3 id="1-3-再次抛出异常"><a href="#1-3-再次抛出异常" class="headerlink" title="1.3 再次抛出异常"></a>1.3 再次抛出异常</h3><p>包装一个异常：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>设置原始异常：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"..."</span>).initCause(e);	<span class="comment">// 设置原始异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获这个异常的时候可以查看原始异常</span></span><br><span class="line">Throwable original = caughtException.getCause();</span><br></pre></td></tr></table></figure></div>

<p>只是添加一个记录：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.log(level, message, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-4-try-with-Resources"><a href="#1-4-try-with-Resources" class="headerlink" title="1.4 try-with-Resources"></a>1.4 try-with-Resources</h3><p>假设资源实现了一个AutoCloseable接口。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(Resource res = ... [; ...]) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>try退出时候，会自动调用res.close()</p>
<h3 id="1-5-堆栈轨迹"><a href="#1-5-堆栈轨迹" class="headerlink" title="1.5 堆栈轨迹"></a>1.5 堆栈轨迹</h3><p>可以调用 <code>e.printStackTrace</code></p>
<p>还有一种方法 <strong>JDK9</strong>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> walker = StackWalker.getInstance();</span><br><span class="line">wlker.forEach(System.out::println);</span><br></pre></td></tr></table></figure></div>



<h3 id="1-6-使用异常的技巧"><a href="#1-6-使用异常的技巧" class="headerlink" title="1.6 使用异常的技巧"></a>1.6 使用异常的技巧</h3><ol>
<li><p>异常处理不能代替简单的测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!s.empty()) s.pop();	</span><br><span class="line"><span class="comment">// 646毫秒</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    s.pop();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;&#125;</span><br><span class="line"><span class="comment">// 21739 毫秒</span></span><br></pre></td></tr></table></figure></div>

<p>花费时间大，因此只在异常情况下使用异常。</p>
</li>
<li><p>不要过分地细化异常</p>
<p>即每个语句都来一个try，可以合到一个try，然后多个catch</p>
</li>
<li><p>充分利用异常层次结构</p>
<p>不要只抛出RuntimeException异常。应该寻找一个合适的子类或创建自己的异常类。</p>
</li>
<li><p>不要压制异常</p>
</li>
<li><p>再检测所错误的时候，”苛刻“总比放任好。</p>
</li>
<li><p>不要羞于传递异常</p>
</li>
</ol>
<h2 id="二、断言"><a href="#二、断言" class="headerlink" title="二、断言"></a>二、断言</h2><p>断言是一种<strong>测试</strong>和<strong>调试</strong>阶段使用的战术性工具！</p>
<p>Java中给出了三种处理系统错误的机制：</p>
<ul>
<li>抛出一个异常</li>
<li>日志</li>
<li>使用断言</li>
</ul>
<p>什么时候使用呢？</p>
<ul>
<li>断言失败是致命的、不可恢复的错误</li>
<li>断言检查只是再开发和测试阶段打开</li>
</ul>
<h2 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h2><p>打印日志信息主要有2步（这里以log4J为例）：</p>
<ol>
<li><p>配置日志属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### set log levels ###</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">INFO,Console,File</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###  输出到控制台  ###</span></span><br><span class="line"><span class="meta">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;] [%t] [%c] [%p] - %m%n</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写Java代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建日志对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(LoggerGenerator<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 指定日志等级输出内容</span></span><br><span class="line">            logger.info(<span class="string">"current value is : "</span> + index++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（接口、lambda表达式与内部类）</title>
    <url>/2020/05/16/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E6%8E%A5%E5%8F%A3%E3%80%81lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（接口、lambda表达式与内部类）"><a href="#JAVA核心技术卷I（接口、lambda表达式与内部类）" class="headerlink" title="JAVA核心技术卷I（接口、lambda表达式与内部类）"></a>JAVA核心技术卷I（接口、lambda表达式与内部类）</h1><h2 id="一、接口"><a href="#一、接口" class="headerlink" title="一、接口"></a>一、接口</h2><h3 id="1-1-接口的特点"><a href="#1-1-接口的特点" class="headerlink" title="1.1 接口的特点"></a>1.1 接口的特点</h3><p>接口中的方法自动都是public的，因此不必声明关键字public。</p>
<p>接口绝对不会有实例字段，在Java8之前，接口中绝对不会实现方法。（现在已经可以在接口中提供简单的方法了。当然们这些方法不能引用实例字段——接口没有实例）</p>
<p>提供实例字段和方法实现的任务应该由实现接口的那个类完成。（可以理解成没有实例字段的抽象类）</p>
<p>虽然不能有实例字段，但是可以包含常量。</p>
<p>在Java8中允许接口中增加静态方法（只是有违将接口作为抽象规范的初衷）。</p>
<h3 id="1-2-默认方法"><a href="#1-2-默认方法" class="headerlink" title="1.2 默认方法"></a>1.2 默认方法</h3><h4 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h4><p>在前面加一个 <code>default</code> 关键字。</p>
<p>可以这么想，原先有一个接口，且有类实现了这个接口。后来为接口添加新的方法，如果这时候这个类没有实现这个新的方法就会报错，又或者没有报错，但是调用了这个方法依旧报错。因此添加一个默认方法，就可以解决这个问题。</p>
<h4 id="1-2-2-默认方法冲突"><a href="#1-2-2-默认方法冲突" class="headerlink" title="1.2.2 默认方法冲突"></a>1.2.2 默认方法冲突</h4><ol>
<li><p>超类优先</p>
<p>如果一个接口A和超类B都有一个getName的方法，那么派生类C同时继承了B，实现了A。这时候用的是超类B的getName方法。</p>
</li>
<li><p>接口冲突</p>
<p>如果接口A,B都有一个getName方法，而类C同时实现了A和B。这时，只要在类C中添加一个getName方法即可，在这个方法中可以选择两个冲突方法中的一个。如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里假设A，B有默认实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> A.<span class="keyword">super</span>.getName();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>或者自己重新实现类C的getName方法。</p>
</li>
</ol>
<h3 id="1-3-接口与回调"><a href="#1-3-接口与回调" class="headerlink" title="1.3 接口与回调"></a>1.3 接口与回调</h3><p>P233</p>
<h3 id="1-4-Comparable-和-Comparator-接口"><a href="#1-4-Comparable-和-Comparator-接口" class="headerlink" title="1.4 Comparable 和 Comparator 接口"></a>1.4 Comparable 和 Comparator 接口</h3><p>Comparable ：给自己创建的类添加可比较方法（实现compareTo方法，在对象上调用）</p>
<p>Comparator ：对于已经存在的类（别人写的类），我们想要自定义它的比较方法。（实现compare方法，在比较器对象上调用，他不是一个静态方法，所以要new）</p>
<h3 id="1-5-对象克隆"><a href="#1-5-对象克隆" class="headerlink" title="1.5 对象克隆"></a>1.5 对象克隆</h3><p>P239（基本不用这个）</p>
<p>默认的克隆操作是<strong>浅拷贝</strong>，这样对基本数据类型当然没有问题。但是，如果对象包含子对象的引用那么两个对象引用将会指向同一个堆内存，有时候这不是我们想要的（如果对象是只读的那么没问题，如果是可变的就有问题了）。</p>
<p>Cloneable接口是一个标记接口：即仅仅只是定义了一个接口，里面什么都没有。</p>
<p>不管clone的默认（浅拷贝）实现能否满足需求，还是需要实现Coneable接口，将clone重新定义为public，再调用super.clone()。</p>
<blockquote>
<p>Java1.4 之前，clone方法返回类型总是Object，而现在可以为你的clone方法指定返回正确的返回类型。这就是协变返回类型：即子类覆盖（即重写）基类方法时，返回的类型可以是基类方法返回类型的子类。协变返回类型允许返回更为具体的类型。</p>
</blockquote>
<h2 id="二、lambda-表达式"><a href="#二、lambda-表达式" class="headerlink" title="二、lambda 表达式"></a>二、lambda 表达式</h2><h3 id="2-1-lambda-表达式语法"><a href="#2-1-lambda-表达式语法" class="headerlink" title="2.1 lambda 表达式语法"></a>2.1 lambda 表达式语法</h3><p>即使lambda表达式没有参数，也要提供()，如果表达式只有一条语句不用写return，如果有多条要用{}而且要显式return。</p>
<p>如果可以推导出一个lambda表达式的参数类型，则可以忽略其类型。</p>
<p>如果只有一个参数，而且这个参数类型可以推导出来，那么可以省略()</p>
<h3 id="2-2-函数式接口"><a href="#2-2-函数式接口" class="headerlink" title="2.2 函数式接口"></a>2.2 函数式接口</h3><p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda表达式。</p>
<h3 id="2-3-方法引用"><a href="#2-3-方法引用" class="headerlink" title="2.3 方法引用"></a>2.3 方法引用</h3><p>P247-248</p>
<p>要用::运算符分割方法名与对象或类名：</p>
<ul>
<li><p>object::instanceMethod：方法引用等价于向方法传递参数的lambda表达式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out::println</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">x -&gt; System.out.println(x)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Class::instanceMethod：第一个参数会成为方法的隐式参数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String::compareToIgnoreCase</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">(x, y) -&gt; x.compareToIgnoreCase(y)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Class::staticMethod：所有参数都传递到静态方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math::pow</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">(x, y) -&gt; Math.pow(x, y)</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<p><strong>注意：</strong>只有当lambda表达式的体只调用一个方法而不做其他操作时，才能把lambda表达式重写为方法引用。</p>
<p>方法引用不能独立存在，总是会转成函数式接口的实例。</p>
<h3 id="2-4-构造器引用"><a href="#2-4-构造器引用" class="headerlink" title="2.4 构造器引用"></a>2.4 构造器引用</h3><p>Person::new</p>
<h3 id="2-5-变量作用域"><a href="#2-5-变量作用域" class="headerlink" title="2.5 变量作用域"></a>2.5 变量作用域</h3><p>lambda表达式可以捕获外围作用域中的变量的值。<strong>闭包</strong></p>
<p>lambda表达式中，只能引用值不会改变的变量（即final）。</p>
<p>lambda表达式中声明一个与局部变量同名的参数或局部变量是不合法的。</p>
<p>lambda表达式中this关键字，是指创建这个lambda表达式的方法的this参数。</p>
<h3 id="2-6-处理-lambda-表达式"><a href="#2-6-处理-lambda-表达式" class="headerlink" title="2.6 处理 lambda 表达式"></a>2.6 处理 lambda 表达式</h3><p>使用lambda表达式的重点是延迟执行。</p>
<p>如果要设计自己的接口，其中只有一个方法可以使用注解 @FunctionalInterface。这样有助于编译检查。</p>
<h3 id="2-7-再谈-Compartor"><a href="#2-7-再谈-Compartor" class="headerlink" title="2.7 再谈 Compartor"></a>2.7 再谈 Compartor</h3><p>P255 挺有用的，代码看起来简洁，明了。</p>
<h2 id="三、内部类"><a href="#三、内部类" class="headerlink" title="三、内部类"></a>三、内部类</h2><h3 id="3-1-内部类特点"><a href="#3-1-内部类特点" class="headerlink" title="3.1 内部类特点"></a>3.1 内部类特点</h3><ul>
<li>内部类可以对同一个包中的其他类隐藏</li>
<li>内部类方法可以访问定义这个类的作用域中的数据，包括原本私有的数据</li>
<li>内部类不能有static方法</li>
<li>内部类中声明的所有静态方法必须是final</li>
</ul>
<h3 id="3-2-局部内部类"><a href="#3-2-局部内部类" class="headerlink" title="3.2 局部内部类"></a>3.2 局部内部类</h3><p>声明局部内部类时不能有访问说明符（即 public 或 private）。局部类的作用域被限定在声明这个个局部类的块中。</p>
<p>局部类对外部世界完全隐藏，除start方法之外，没有任何方法知道A类的存在：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">boolean</span> beep)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (beep) <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当start方法退出时，beep参数将不复存在。为了保证内部类A能够继续使用这个beep，将beep字段复制为start方法的局部变量。<code>final boolean val$beep</code></p>
<h3 id="3-3-匿名内部类"><a href="#3-3-匿名内部类" class="headerlink" title="3.3 匿名内部类"></a>3.3 匿名内部类</h3><p>一般语法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SuperType(参数) &#123;</span><br><span class="line">    内部类方法和数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>其中SuperType可以是接口（那么内部类就要实现这个接口）也可以是类（内部类就要扩展这个类）。</p>
<p>匿名内部类没有构造器，但是可以提供一个对象初始化块。</p>
<p><strong>双括号初始化</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invite(<span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;add(<span class="string">"Harry"</span>); add(<span class="string">"Tony"</span>);&#125;&#125;);</span><br></pre></td></tr></table></figure></div>

<p>这里外层{}建立了ArrayList的一个匿名子类。内层{}则是一个对象初始化块。</p>
<p>但是这个技巧很少使用。invite方法可以直接传入：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List.of(<span class="string">"Harry"</span>, <span class="string">"Tony"</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="3-4-静态内部类"><a href="#3-4-静态内部类" class="headerlink" title="3.4 静态内部类"></a>3.4 静态内部类</h3><p>只要内部类不需要访问外围对象，就应该使用静态内部类。</p>
<p>静态内部类可以用静态字段和方法。</p>
<p>在接口中声明的内部类自动是static和public。</p>
<p>不能访问外部非静态方法和字段。</p>
<h2 id="四、代理"><a href="#四、代理" class="headerlink" title="四、代理"></a>四、代理</h2><p>代理类包含一下方法：</p>
<ul>
<li>指定接口所需要的全部方法</li>
<li>Object类中的全部方法</li>
</ul>
<p>不过，不能再运行时为这些方法定义新代码。</p>
<h3 id="4-1-创建代理对象"><a href="#4-1-创建代理对象" class="headerlink" title="4.1 创建代理对象"></a>4.1 创建代理对象</h3><p>需要使用Proxy类的newProxyInstance方法。这个方法有三个参数：</p>
<ul>
<li><p>一个类加载器</p>
</li>
<li><p>一个Class对象数组，每个元素对应需要实现的各个接口</p>
</li>
<li><p>一个调用处理器</p>
<blockquote>
<p>调用处理器是实现了InvocationHandler接口的类的对象。这个接口只有一个方法：</p>
<p>Object invoke(Object proxy, Method method, Object[] args)</p>
</blockquote>
</li>
</ul>
<p><strong>使用代理的目的</strong></p>
<ul>
<li>将方法调用路由到远程服务器</li>
<li>再运行的程序中将用户界面时间与动作关联起来</li>
<li>为了调试，跟踪方法调用</li>
</ul>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a><strong>动态代理</strong></h4><p>需要依赖接口！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TestProxy class</span></span><br><span class="line"><span class="comment"> * 测试代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/17 21:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    MyProxy(Object target) &#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调试方法："</span> + method.getName());</span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Talking..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Working..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Action p = <span class="keyword">new</span> Person();</span><br><span class="line">        MyProxy myProxy = <span class="keyword">new</span> MyProxy(p);</span><br><span class="line"></span><br><span class="line">        Action o =(Action) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> Class[]&#123;Action<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">myProxy</span>)</span>;</span><br><span class="line">        o.talk();</span><br><span class="line">        o.work();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="cglib"><a href="#cglib" class="headerlink" title="cglib"></a>cglib</h4><p><a href="https://www.cnblogs.com/jie-y/p/10732347.html" target="_blank" rel="noopener">https://www.cnblogs.com/jie-y/p/10732347.html</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实例化一个增强器，也就是cglib中的一个class generator</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置目标类</span></span><br><span class="line">        enhancer.setSuperclass(ArraySort2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//设置拦截对象，这里直接使用匿名内部类写法</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object object , Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                String sortName = method.getName();</span><br><span class="line">                <span class="keyword">switch</span> (sortName) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"bubbleSort"</span>:</span><br><span class="line">                    sortName = <span class="string">"冒泡排序"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"selectSort"</span>:</span><br><span class="line">                    sortName = <span class="string">"选择排序"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"quickSort"</span>:</span><br><span class="line">                    sortName = <span class="string">"快速排序"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">                <span class="comment">//此处一定要使用proxy的invokeSuper方法来调用目标类的方法</span></span><br><span class="line">                proxy.invokeSuper(object, args);</span><br><span class="line">                <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">                System.out.println(<span class="string">"本次"</span> + sortName + <span class="string">"的执行时间为: "</span> + (end -start) + <span class="string">"ms"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//生成代理类并返回一个实例</span></span><br><span class="line">        ArraySort2 arraySort = (ArraySort2) enhancer.create();</span><br><span class="line">        arraySort.bubbleSort(arr);</span><br><span class="line">        arraySort.selectSort(arr);</span><br><span class="line">        arraySort.quickSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArraySort2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（继承）</title>
    <url>/2020/05/14/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E7%BB%A7%E6%89%BF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（继承）"><a href="#JAVA核心技术卷I（继承）" class="headerlink" title="JAVA核心技术卷I（继承）"></a>JAVA核心技术卷I（继承）</h1><h2 id="一、类、超类、子类"><a href="#一、类、超类、子类" class="headerlink" title="一、类、超类、子类"></a>一、类、超类、子类</h2><h3 id="1-1-覆盖方法"><a href="#1-1-覆盖方法" class="headerlink" title="1.1 覆盖方法"></a>1.1 覆盖方法</h3><p>派生类继承了父类的方法，但是，如果觉得父类的方法不好用，可以自己重新设计一个方法名和参数与父类方法一样的方法，这叫做覆盖。如果覆盖中需要调用父类的方法可以使用 <code>super</code> 关键字，如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.getSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当然对于构造器方法，需要在第一行用super给父类字段赋值：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">extend</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other method ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-2-多态性"><a href="#1-2-多态性" class="headerlink" title="1.2 多态性"></a>1.2 多态性</h3><p>父类引用变量可以赋值子类对象，但是编译器只允许调用在类中声明的对象。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> <span class="keyword">extends</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newMethod</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassA a = <span class="keyword">new</span> ClassB();	<span class="comment">// 允许</span></span><br><span class="line">a.method();					<span class="comment">// 允许</span></span><br><span class="line">a.newMethod();				<span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></div>



<h3 id="1-3-final-阻止继承"><a href="#1-3-final-阻止继承" class="headerlink" title="1.3 final 阻止继承"></a>1.3 final 阻止继承</h3><p>阻止利用某个类定义子类，可以用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;		<span class="comment">// Person类将无法被继承</span></span><br></pre></td></tr></table></figure></div>

<p>也可以使用在方法上，那么就无法被覆盖了。一个类被声明为final，那么其方法自动变为final，而不包括字段。</p>
<h3 id="1-4-强制类型转换"><a href="#1-4-强制类型转换" class="headerlink" title="1.4 强制类型转换"></a>1.4 强制类型转换</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj1 <span class="keyword">instanceof</span> obj2) &#123;</span><br><span class="line">    Obj2 o = (Obj2)obj1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="1-5-抽象类"><a href="#1-5-抽象类" class="headerlink" title="1.5 抽象类"></a>1.5 抽象类</h3><p>包含一个或多个抽象方法的类本身必须被声明为抽象类<code>abstract</code> 。</p>
<p>抽象类可以有具体的方法和字段。抽象方法充当占位方法的角色，在子类中被部分实现，或全部实现。如果部分实现，那么该子类依旧是抽象类，需要声明 <code>abstarct</code>。</p>
<p>抽象类不能被实例化。可以创建具体子类的对象。但是可以定义抽象类的对象变量，即多态特性。</p>
<h3 id="1-6-访问控制修饰符"><a href="#1-6-访问控制修饰符" class="headerlink" title="1.6 访问控制修饰符"></a>1.6 访问控制修饰符</h3><ul>
<li>private：仅对本类可见</li>
<li>public：对外部完全可见</li>
<li>protected：对本包和所有子类可见</li>
<li>默认（很遗憾），不需要修饰符：对本包可见</li>
</ul>
<h2 id="二、Object-所有类的超类"><a href="#二、Object-所有类的超类" class="headerlink" title="二、Object 所有类的超类"></a>二、Object 所有类的超类</h2><h3 id="2-1-equals"><a href="#2-1-equals" class="headerlink" title="2.1 equals"></a>2.1 equals</h3><p>Object类中实现的 <code>equals</code> 方法将确定两个对象引用是否相等。但是有时候我们需要比较的是两个对象的状态（字段值）是否全部相等。</p>
<p><strong>完美 equals 方法的建议</strong></p>
<ol>
<li><p>显式参数命名为otherObject，稍后需要将它强制转换成另一个名为other的变量</p>
</li>
<li><p>检查this与otherObject是否相等：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == otherObject) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></div>

<p>这条语句只是一个优化。</p>
</li>
<li><p>检测otherObject是否为null，如果为null，返回false。这项检测很有必要。【是吗？】</p>
</li>
<li><p>比较this与otherObject的类。如果equals的语义可以在子类中改变，就使用getClass检测：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (getClass() != otherObject.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></div>

<p>如果所有的子类都有相同的相等性语义，可以使用instanceof检测：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(otherObject <span class="keyword">instanceof</span> ClassName)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将otherObject强制转换为相应类型的变量：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassName other = (ClassName)otherObject;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>现在根据相等性概念的要求来比较字段。使用==比较基本类型字段，使用Objects.equals比较对象字段。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JAVA7 java.util.Objects</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<p>   如果所有的字段都匹配，返回true，否则返回false。</p>
<p>   如果在子类中重新定义equals，就要在其中包含一个super.equals(other)调用。</p>
<p><strong>提示：</strong>对于数组可以用Arrays.equals(xxx[] a, xxx[] b)</p>
<h3 id="2-2-hashCode"><a href="#2-2-hashCode" class="headerlink" title="2.2 hashCode"></a>2.2 hashCode</h3><p>需要组合多个散列值时，可以调用Objects.hash并提供所有这些参数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.Objects.hash</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object... values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.hashCode(values);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrays.hashCode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(Object a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object element : a)</span><br><span class="line">        result = <span class="number">31</span> * result + (element == <span class="keyword">null</span> ? <span class="number">0</span> : element.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>equals与hashCode的定义必须相容：</strong>如果x.equals(y)返回true，那么x.hashCode() 必须与y.hashCode()返回相同的值。</p>
<h3 id="2-3-toString"><a href="#2-3-toString" class="headerlink" title="2.3 toString"></a>2.3 toString</h3><p><strong>输出类名</strong></p>
<p>尽量使用 <code>getClass().getName()</code> 来获得类名的字符串。</p>
<p><strong>数组的toString</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(a);	<span class="comment">// 打印 [I@14ae5a5</span></span><br><span class="line">System.out.println(Arrays.toString(a));	<span class="comment">// 打印 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div>



<h2 id="三、泛型数组列表"><a href="#三、泛型数组列表" class="headerlink" title="三、泛型数组列表"></a>三、泛型数组列表</h2><h3 id="3-1-ArrayList-数组列表"><a href="#3-1-ArrayList-数组列表" class="headerlink" title="3.1 ArrayList 数组列表"></a>3.1 ArrayList 数组列表</h3><p>常用API：</p>
<ul>
<li><p><code>ArrayList&lt;E&gt;()</code>：构造一个空数组列表</p>
</li>
<li><p><code>ArrayList&lt;E&gt;(int initialCapacity)</code>：构造一个指定容量的数组列表</p>
</li>
<li><p>void add(E obj)：末尾追加元素</p>
</li>
<li><p>int size()：返回个数</p>
</li>
<li><p>void ensureCapacity(int capacity)：确保数组列表在不重新分配内部存储数组的情况下，有足够的容量存储给定数量的元素（可以理解为变为普通的数组的定长）</p>
</li>
<li><p>void trimToSize()：将存储容量减为当前大小（存储容量&gt;=当前大小）</p>
</li>
<li><p>E set(int index, E obj)：修改指定下标的类型，并返回之前的值</p>
</li>
<li><p>E get(int index)：返回下标的元素</p>
</li>
<li><p>void add(int index, E obj)</p>
</li>
<li><p>E remove(int index)</p>
<p>指定位置添加/删除，不过需要移动后面的所有元素，效率低（如果元素少不影响）</p>
</li>
</ul>
<h3 id="3-2-类型化与原始数组列表的兼容性"><a href="#3-2-类型化与原始数组列表的兼容性" class="headerlink" title="3.2 类型化与原始数组列表的兼容性"></a>3.2 类型化与原始数组列表的兼容性</h3><p>比如在老版本中有一个方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ArrayList list)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>

<p>你可以直接将对象传递给update方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = ...;</span><br><span class="line">employeeDB.update(staff);</span><br></pre></td></tr></table></figure></div>



<p>出于兼容性的考虑，编译器检查到没有发现违反规则的现象后，就将所有的类型化数组列表转换成原始ArrayLsit对象（即不管有没有添加泛型，最后都会变成AarrayList，泛型只是用来编译时候的检查）。在程序运行时，所有数组列表都是一样的，即虚拟机中没有类型参数。</p>
<h2 id="四、对象包装器与自动装箱"><a href="#四、对象包装器与自动装箱" class="headerlink" title="四、对象包装器与自动装箱"></a>四、对象包装器与自动装箱</h2><h3 id="4-1-包装器"><a href="#4-1-包装器" class="headerlink" title="4.1 包装器"></a>4.1 包装器</h3><ul>
<li><p>Integer</p>
</li>
<li><p>Long</p>
</li>
<li><p>Float</p>
</li>
<li><p>Double</p>
</li>
<li><p>Short</p>
</li>
<li><p>Byte</p>
<p>以上6种，派生于公共超类Number</p>
</li>
<li><p>Character：char</p>
</li>
<li><p>Boolean</p>
</li>
</ul>
<h3 id="4-2-自动装箱"><a href="#4-2-自动装箱" class="headerlink" title="4.2 自动装箱"></a>4.2 自动装箱</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();	<span class="comment">// 这里不能用int</span></span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 将自动变成：</span></span><br><span class="line">list.add(Integer.valueOf(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></div>



<h3 id="4-3-自动拆箱"><a href="#4-3-自动拆箱" class="headerlink" title="4.3 自动拆箱"></a>4.3 自动拆箱</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i);</span><br><span class="line"><span class="comment">// 转换成：</span></span><br><span class="line"><span class="keyword">int</span> n = list.get(i).intValue();</span><br></pre></td></tr></table></figure></div>



<h3 id="4-4-比较"><a href="#4-4-比较" class="headerlink" title="4.4 比较"></a>4.4 比较</h3><p>如果直接用 == 是比较内存地址，但是有时候也许会成功。因此推荐用equals方法来比较。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">100</span>;</span><br><span class="line">Integer b = <span class="number">100</span>;</span><br><span class="line">System.out.println(a == b);	<span class="comment">// 输出true</span></span><br><span class="line">Integer a = <span class="number">128</span>;</span><br><span class="line">Integer b = <span class="number">128</span>;</span><br><span class="line">System.out.println(a == b);	<span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure></div>



<p><strong>注意：</strong>自动装箱规范要求boolean、byte、char &lt;= 127，介于 -128和127之间的short和int被包装到固定的对象中。例如，如果将a和b（都是Integer类型）初始化为100，那么他们的比较结果（即，==）一定成功</p>
<h3 id="4-5-valueOf"><a href="#4-5-valueOf" class="headerlink" title="4.5 valueOf"></a>4.5 valueOf</h3><p>尽量使用valueOf构建包装类，而不是用new。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最小值为-128，最大值默认是127，也可以自由配置</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，如果用valueOf方法来创建一个对象，那么会判断是否是在范围里，如果是，就从缓存种直接返回对象的引用，如果不是才去new一个新的对象。</p>
<h3 id="4-6-常用API"><a href="#4-6-常用API" class="headerlink" title="4.6 常用API"></a>4.6 常用API</h3><p><strong>Integer -&gt; int</strong></p>
<ul>
<li>int intValue()：返回int类型的值</li>
</ul>
<p><strong>int -&gt; String</strong></p>
<ul>
<li>static String toString(int i)：返回10进制数值</li>
<li>static String toString(int i, int radix)：返回数值i的指定radix进制</li>
</ul>
<p><strong>String -&gt; int</strong></p>
<ul>
<li><p>static int parseInt(String s)</p>
</li>
<li><p>static int parseInt(String s, int radix)</p>
<p>返回字符串s表示的整数，第一个方法10进制，第二个指定进制。</p>
</li>
</ul>
<p><strong>String -&gt; Integer</strong></p>
<ul>
<li><p>static Integer valueOf(String s)</p>
</li>
<li><p>static Integer valueOf(String s, int radix)</p>
<p>返回Integer对象，字符串必须是10进制（第一个方法），或者指定进制（第二个方法）</p>
</li>
</ul>
<h2 id="五、枚举"><a href="#五、枚举" class="headerlink" title="五、枚举"></a>五、枚举</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;</span><br><span class="line">    <span class="comment">// 这里相当于利用私有构造函数创建了枚举实例</span></span><br><span class="line">    SMALL(<span class="string">"S"</span>), MEDIUM(<span class="string">"M"</span>),LARGE(<span class="string">"L"</span>),EXTRA_LARGE(<span class="string">"XL"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有构造函数，必须是私有的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Size</span><span class="params">(String abbreviatioin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abbreviatioin = abbreviatioin;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAbbreviatioin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abbreviatioin;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举类型的字段</span></span><br><span class="line">    <span class="keyword">private</span> String abbreviatioin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-2-常用API"><a href="#5-2-常用API" class="headerlink" title="5.2 常用API"></a>5.2 常用API</h3><ul>
<li>static Enum valueOf(Class enumClass, String name)：返回给定类中有指定名字的枚举常量</li>
<li>String toString()：返回枚举常量名</li>
<li>int ordinal()：返回枚举常量在enum声明中的位置，位置从0开始计数</li>
<li>int compareTo(E other)：如果枚举常量出现在other之前，返回一个负整数；</li>
</ul>
<h2 id="六、反射"><a href="#六、反射" class="headerlink" title="六、反射"></a>六、反射</h2><h3 id="6-1-Class-类"><a href="#6-1-Class-类" class="headerlink" title="6.1 Class 类"></a>6.1 Class 类</h3><p>在启动时，包含main方法的类被加载。它会加载所有需要的类。这些被加载的类又要加载它们需要的类，以此类推。</p>
<h4 id="6-1-1-获取Class类的三种方式"><a href="#6-1-1-获取Class类的三种方式" class="headerlink" title="6.1.1 获取Class类的三种方式"></a>6.1.1 获取Class类的三种方式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Class <span class="title">forName</span><span class="params">(String className)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 根据类名返回</span></span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cl = Employee<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">// 直接通过 类名.class 获取</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cl = employree.getClass();</span><br><span class="line"><span class="comment">// 通过对象的 getClass 方法获取</span></span><br></pre></td></tr></table></figure></div>



<h4 id="6-1-2-创建实例"><a href="#6-1-2-创建实例" class="headerlink" title="6.1.2 创建实例"></a>6.1.2 创建实例</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取构造器</span></span><br><span class="line"><span class="function">Constructor <span class="title">getConstructor</span><span class="params">(Class... ParameterTypes)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="function">Object <span class="title">newInstance</span><span class="params">(Object... params)</span></span></span><br></pre></td></tr></table></figure></div>





<h3 id="6-2-资源"><a href="#6-2-资源" class="headerlink" title="6.2 资源"></a>6.2 资源</h3><p><code>java.lang.Class</code></p>
<ul>
<li><p>URL getResource(String name)</p>
</li>
<li><p>InputStream getResourceAsStream(String name)</p>
<p>找到与类位于同一个位置的资源，返回一个可以用来加载资源的URL或者输入流。如果没有找到资源，返回null，所以不会抛出IO异常。</p>
</li>
</ul>
<h3 id="6-3-利用反射分析类"><a href="#6-3-利用反射分析类" class="headerlink" title="6.3 利用反射分析类"></a>6.3 利用反射分析类</h3><h4 id="6-3-1-java-lang-Class"><a href="#6-3-1-java-lang-Class" class="headerlink" title="6.3.1 java.lang.Class"></a>6.3.1 java.lang.Class</h4><p><strong>字段</strong></p>
<ul>
<li><p>Field[] getFields()</p>
</li>
<li><p>Field[] getDeclaredFields()</p>
<p>getFields返回一个包含Field对象的数组，这些对象对应这个类或其超类的<strong>公共字段</strong>。而getDeclaredFields返回<strong>所有字段</strong>。</p>
</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><p>Method[] getMethods()</p>
</li>
<li><p>Method[] getDeclaredMethods()</p>
<p>getMethods返回所有<strong>公共方法</strong>，包括超类继承来的。getDeclaredMethods返回这个类或接口的<strong>全部方法</strong>。</p>
</li>
</ul>
<p><strong>构造器</strong></p>
<ul>
<li><p>Constructor[] getConstructors()</p>
</li>
<li><p>Constructor[] getDeclaredConstructors()</p>
<p>返回Class对象的所有公共构造器（getConstructors），和全部构造器（getDeclaredConstructors）</p>
</li>
</ul>
<h4 id="6-3-2-java-lang-reflect-Field-Method-Constructor"><a href="#6-3-2-java-lang-reflect-Field-Method-Constructor" class="headerlink" title="6.3.2 java.lang.reflect.Field/Method/Constructor"></a>6.3.2 java.lang.reflect.Field/Method/Constructor</h4><ul>
<li><p>Class getDeclaringClass()</p>
<p>返回一个Class对象，表示定义了这个构造器、方法或字段的<strong>类</strong>。（即哪个类定义了这个方法、构造器或字段）</p>
</li>
<li><p>Class[] getExceptionTypes()：<code>在Constructor和Method classes类中</code></p>
<p>返回一个Class对象数组，其中各个对象表示这个方法所抛出的<strong>异常</strong>的类型</p>
</li>
<li><p>int getModifiers()</p>
<p>返回一个整数，描述这个构造器、方法或字段的<strong>修饰符</strong>。使用Modifier类中的方法来分析这个返回值。（下面介绍）</p>
</li>
<li><p>String getName()</p>
<p>返回一个构造器、字段或方法的名字的字符串</p>
</li>
<li><p>Class[] getParameterTypes()：<code>在Constructor和Method classes类中</code></p>
<p>返回一个Class对象数组，里面各个对象表示参数的类型</p>
</li>
<li><p>Class getReturnType()：<code>在Method类中</code></p>
<p>返回一个用于表示返回类型的Class对象</p>
</li>
</ul>
<h4 id="6-3-3-java-lang-reflect-Modifier"><a href="#6-3-3-java-lang-reflect-Modifier" class="headerlink" title="6.3.3 java.lang.reflect.Modifier"></a>6.3.3 java.lang.reflect.Modifier</h4><ul>
<li><p>static String toString(int modifiers)</p>
<p>返回一个字符串，包含对应modifiers中设置的修饰符</p>
</li>
<li><p>static boolean isAbstract(int modifiers)</p>
</li>
<li><p>static boolean isFinal(int modifiers)</p>
</li>
<li><p>static boolean isInterface(int modifiers)</p>
</li>
<li><p>static boolean isNative(int modifiers)</p>
</li>
<li><p>static boolean isPrivate(int modifiers)</p>
</li>
<li><p>static boolean isPublic(int modifiers)</p>
</li>
<li><p>static boolean isStatic(int modifiers)</p>
</li>
<li><p>static boolean isStrict(int modifiers)</p>
</li>
<li><p>static boolean isSynchronized(int modifiers)</p>
</li>
<li><p>static boolean isVolatile(int modifiers)</p>
</li>
</ul>
<h3 id="6-4-使用反射在运行时分析对象"><a href="#6-4-使用反射在运行时分析对象" class="headerlink" title="6.4 使用反射在运行时分析对象"></a>6.4 使用反射在运行时分析对象</h3><h4 id="6-4-1-获取字段"><a href="#6-4-1-获取字段" class="headerlink" title="6.4.1 获取字段"></a>6.4.1 获取字段</h4><p><code>java.lang.Class</code></p>
<ul>
<li>Field getField(String name)：根据名字获取<strong>公共字段</strong></li>
<li>Field[] getFields()</li>
<li>Field getDeclaredField(String name)：根据名字获取<strong>字段</strong></li>
<li>Field[] getDeclaredFields()</li>
</ul>
<h4 id="6-4-2-获取-设置-字段值"><a href="#6-4-2-获取-设置-字段值" class="headerlink" title="6.4.2 获取/设置 字段值"></a>6.4.2 获取/设置 字段值</h4><p><code>java.lang.reflect.Field</code></p>
<ul>
<li>Object get(Object obj)：返回obj对象中，用这个Field对象描述的字段的值 </li>
<li>void set(Object obj, Object newValue)：更新这个obj对象的Feild描述的字段的值</li>
</ul>
<h4 id="6-4-3-取消访问标志"><a href="#6-4-3-取消访问标志" class="headerlink" title="6.4.3 取消访问标志"></a>6.4.3 取消访问标志</h4><p>如果是私有字段，在调用上述get/set方法时，会有异常。这时候就要修改。‘</p>
<p><code>java.lang.reflect.AccessibleObject</code></p>
<ul>
<li>void setAccessible(boolean flag)：设置或取消这个可访问对象的可访问标志，如果拒接访问会抛出一个IllegaAccessExceptioin异常。【true为允许访问】</li>
<li>boolean isAccessible()</li>
<li>static void setAccessible(AccessibleObject array, boolean flag)：便利方法，用于设置一个对象数组的可访问标志</li>
</ul>
<h3 id="6-5-使用反射编写泛型数组代码"><a href="#6-5-使用反射编写泛型数组代码" class="headerlink" title="6.5 使用反射编写泛型数组代码"></a>6.5 使用反射编写泛型数组代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其中a传入数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">goodCopyOf</span><span class="params">(Object a, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    Class cl = a.getClass();</span><br><span class="line">    <span class="keyword">if</span> (!cl.isArray()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Class componentType = cl.getConponentType();</span><br><span class="line">    <span class="keyword">int</span> length = Array.getLength(a);	<span class="comment">// 获取数组a的长度，用静态方法</span></span><br><span class="line">    Object newArray = Array.newInstance(componentType, <span class="keyword">new</span> Length);</span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, newArray, <span class="number">0</span>, Math.min(length, newLength));</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="6-6-调用任意方法和构造器"><a href="#6-6-调用任意方法和构造器" class="headerlink" title="6.6 调用任意方法和构造器"></a>6.6 调用任意方法和构造器</h3><p><code>java.lang.reflect.Method</code></p>
<p>public Object invoke(Object implicitParameter, Object[] explicitParameters)</p>
<p>调用这个对象描述的方法，传入给定参数，并返回方法的返回值。对于静态方法，传入null作为隐式参数。</p>
<h2 id="七、继承设计技巧"><a href="#七、继承设计技巧" class="headerlink" title="七、继承设计技巧"></a>七、继承设计技巧</h2><ol>
<li>将公共操作和字段放在超类中</li>
<li>不要使用受保护的字段</li>
<li>使用继承实现“is-a”关系</li>
<li>除非所有继承的方法都有意义，否则不要使用继承</li>
<li>在覆盖方法时，不要改变预期的行为</li>
<li>使用多态，而不要使用类型信息</li>
<li>不要滥用反射</li>
</ol>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA核心技术卷I（集合）</title>
    <url>/2020/05/20/JAVA%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JAVA核心技术卷I（集合）"><a href="#JAVA核心技术卷I（集合）" class="headerlink" title="JAVA核心技术卷I（集合）"></a>JAVA核心技术卷I（集合）</h1><h2 id="一、集合框架"><a href="#一、集合框架" class="headerlink" title="一、集合框架"></a>一、集合框架</h2><h3 id="1-1-Collection-接口"><a href="#1-1-Collection-接口" class="headerlink" title="1.1 Collection 接口"></a>1.1 Collection 接口</h3><p>List、Set、Queue都实现了该接口，因此能用该接口的一些方法：</p>
<h4 id="获取迭代器"><a href="#获取迭代器" class="headerlink" title="获取迭代器"></a>获取迭代器</h4><ul>
<li>Iterator&lt; E&gt; iterator()</li>
</ul>
<h4 id="获取大小，判空"><a href="#获取大小，判空" class="headerlink" title="获取大小，判空"></a>获取大小，判空</h4><ul>
<li>int size()</li>
<li>boolean isEmpty()</li>
</ul>
<h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><ul>
<li>boolean contains(Object obj)</li>
<li>boolean containsAll(Collection&lt;?&gt; c)</li>
</ul>
<h4 id="判断相等"><a href="#判断相等" class="headerlink" title="判断相等"></a>判断相等</h4><ul>
<li>boolean equals(Object other)</li>
</ul>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul>
<li>boolean add(E element)</li>
<li>boolean addAll(Collection&lt;? extends E&gt; from)</li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>boolean remove(Object obj)</li>
<li>boolean removeAll(Collection&lt;? extends E&gt; c)</li>
<li>void clear()</li>
<li>boolean retainAll(Collection&lt;? extends E&gt; c)：取交集：删除c中不存在的元素</li>
</ul>
<h4 id="转数组"><a href="#转数组" class="headerlink" title="转数组"></a>转数组</h4><ul>
<li>Object toArray()：不推荐！这样会造成泛型丢失</li>
<li><code>&lt;T&gt; T[] toArray(T[] arrayToFill)：推荐！</code> </li>
</ul>
<h3 id="1-2-迭代器"><a href="#1-2-迭代器" class="headerlink" title="1.2 迭代器"></a>1.2 迭代器</h3><p>Iterator 接口包含4个方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iteerator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemainning</span><span class="params">(Consumer&lt;? supper E&gt; action)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用next，指向元素中间的位置。返回的是中间位置之前的那个元素。</p>
<p>for each循环，编译器简单地转换为带有迭代器的循环。</p>
<h2 id="二、集合"><a href="#二、集合" class="headerlink" title="二、集合"></a>二、集合</h2><p><a href="/postImages/Collections.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/Collections.png" class="lazyload"></a></p>
<h3 id="2-1-链表"><a href="#2-1-链表" class="headerlink" title="2.1 链表"></a>2.1 链表</h3><p>有数组、链表实现两种方式。</p>
<h4 id="2-1-1-List（ArrayList实现了该接口）"><a href="#2-1-1-List（ArrayList实现了该接口）" class="headerlink" title="2.1.1 List（ArrayList实现了该接口）"></a>2.1.1 List（ArrayList实现了该接口）</h4><h5 id="获取列表迭代器"><a href="#获取列表迭代器" class="headerlink" title="获取列表迭代器"></a>获取列表迭代器</h5><ul>
<li>ListIterator&lt; E&gt; listIterator()：返回一个列表迭代器</li>
<li>ListIterator&lt; E&gt; listIterator(int index)：第一次调用这个迭代器的next会返回给定索引的元素</li>
</ul>
<h5 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h5><ul>
<li>void add(int i, E element)</li>
<li>void addAll(int i, Collection&lt;? extend E&gt; c)：指定位置插入集合中所有元素</li>
</ul>
<h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><ul>
<li>E remove(int i)：删除并返回</li>
</ul>
<h5 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h5><ul>
<li>E get(int i)</li>
</ul>
<h5 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h5><ul>
<li>E set(int i, E element)</li>
</ul>
<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><ul>
<li>int indexOf(Object element)</li>
<li>int lastIndexOf(Object element)</li>
</ul>
<h4 id="2-1-2-ListIterator"><a href="#2-1-2-ListIterator" class="headerlink" title="2.1.2 ListIterator"></a>2.1.2 ListIterator</h4><h5 id="添加-2"><a href="#添加-2" class="headerlink" title="添加"></a>添加</h5><ul>
<li>void add(E newElement)：再当前位置添加一个元素</li>
</ul>
<h5 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h5><ul>
<li>void set(E newElement)：新元素替换next或previous访问的上一个元素</li>
</ul>
<h5 id="反向迭代"><a href="#反向迭代" class="headerlink" title="反向迭代"></a>反向迭代</h5><ul>
<li>boolean hasPrevious()：反向迭代列表</li>
<li>E previous()：返回前一个对象</li>
</ul>
<h5 id="下一次迭代的索引"><a href="#下一次迭代的索引" class="headerlink" title="下一次迭代的索引"></a>下一次迭代的索引</h5><ul>
<li>int nextIndex()：返回下一次调用next方法时返回的元素的索引</li>
<li>int previousIndex()</li>
</ul>
<h4 id="2-1-3-LinkedList"><a href="#2-1-3-LinkedList" class="headerlink" title="2.1.3 LinkedList"></a>2.1.3 LinkedList</h4><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><ul>
<li>LinkedList()</li>
<li>LinkedList(Collection&lt;? extends E&gt; c)</li>
</ul>
<h5 id="添加-3"><a href="#添加-3" class="headerlink" title="添加"></a>添加</h5><ul>
<li>void addFirst(E element)</li>
<li>void addLast(E element)</li>
</ul>
<h5 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h5><ul>
<li>E getFirst()</li>
<li>E getLast()</li>
</ul>
<h5 id="删除并返回"><a href="#删除并返回" class="headerlink" title="删除并返回"></a>删除并返回</h5><ul>
<li>E removeFirst()</li>
<li>E removeLast()</li>
</ul>
<h4 id="2-1-4-Vector"><a href="#2-1-4-Vector" class="headerlink" title="2.1.4 Vector"></a>2.1.4 Vector</h4><p>和ArrayList一样，不过是线程安全的。</p>
<h3 id="2-2-散列集"><a href="#2-2-散列集" class="headerlink" title="2.2 散列集"></a>2.2 散列集</h3><p>JAVA中散列表用链表数组实现。每个列表被称为桶。查找表中的数据，就要先计算散列码。（Java8中，桶满的时候会虫链表转为平衡二叉树）。装填因子默认为0.75，达到75%的使用，会重新扩容。</p>
<p><a href="/postImages/bucket.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/bucket.png" class="lazyload"></a></p>
<h4 id="2-2-1-HashSet"><a href="#2-2-1-HashSet" class="headerlink" title="2.2.1 HashSet"></a>2.2.1 HashSet</h4><ul>
<li>HashSet()</li>
<li>HashSet(Collection&lt;? extends E&gt; elements)</li>
<li>HashSet(int initaialCapacity)：阿里规范推荐16</li>
</ul>
<h4 id="2-2-2-TreeSet（有序-有下面所有set的方法）"><a href="#2-2-2-TreeSet（有序-有下面所有set的方法）" class="headerlink" title="2.2.2 TreeSet（有序,有下面所有set的方法）"></a>2.2.2 TreeSet（有序,有下面所有set的方法）</h4><h5 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h5><ul>
<li>TreeSet()</li>
<li>TreeSet(Comparator&lt;? extends E&gt; comparator)</li>
<li>TreeSet(Collection&lt;? extends E&gt; elements)</li>
<li>TreeSet(SortedSet&lt; E&gt; s)：构造一个树集，并添加一个集合或有序集中的所有元素</li>
</ul>
<h4 id="2-2-3-SortedSet"><a href="#2-2-3-SortedSet" class="headerlink" title="2.2.3 SortedSet"></a>2.2.3 SortedSet</h4><ul>
<li>Comparator&lt;? extends E&gt; comparator()：返回用于对元素进行排序的比较器</li>
</ul>
<h5 id="获取最大小元素"><a href="#获取最大小元素" class="headerlink" title="获取最大小元素"></a>获取最大小元素</h5><ul>
<li><p>E first()</p>
</li>
<li><p>E last()</p>
<p>返回有序集中最小元素或最大元素</p>
</li>
</ul>
<h4 id="2-2-4-NavigableSet"><a href="#2-2-4-NavigableSet" class="headerlink" title="2.2.4 NavigableSet"></a>2.2.4 NavigableSet</h4><h5 id="gt-或-lt"><a href="#gt-或-lt" class="headerlink" title="&gt; 或 &lt;"></a>&gt; 或 &lt;</h5><ul>
<li><p>E higher(E value)</p>
</li>
<li><p>E lower(E value)</p>
<p>返回大于value的最小元素或小于value的最大元素，如果没有返回null</p>
</li>
</ul>
<h5 id="gt-或-lt-1"><a href="#gt-或-lt-1" class="headerlink" title="&gt;= 或 &lt;="></a>&gt;= 或 &lt;=</h5><ul>
<li><p>E ceiling(E value)</p>
</li>
<li><p>E floor(E value)</p>
<p>返回大于等于value的最小元素或小于等于value的最大元素，如果没有返回null</p>
</li>
</ul>
<h5 id="删除并返回最大小元素"><a href="#删除并返回最大小元素" class="headerlink" title="删除并返回最大小元素"></a>删除并返回最大小元素</h5><ul>
<li><p>E pollFirst()</p>
</li>
<li><p>E pollLast()</p>
<p>返回并删除最大最小元素</p>
</li>
</ul>
<h5 id="递减遍历迭代器"><a href="#递减遍历迭代器" class="headerlink" title="递减遍历迭代器"></a>递减遍历迭代器</h5><ul>
<li><p>Iterator&lt; E&gt; descendingIterator()</p>
<p>返回一个按照递减循序遍历的迭代器</p>
</li>
</ul>
<h3 id="2-3-队列和双端队列"><a href="#2-3-队列和双端队列" class="headerlink" title="2.3 队列和双端队列"></a>2.3 队列和双端队列</h3><p>ArrayDeque和LinkedList类实现了这个接口。（我觉得吧，还是直接用LinkedList把）</p>
<h4 id="2-3-1-Queue"><a href="#2-3-1-Queue" class="headerlink" title="2.3.1 Queue"></a>2.3.1 Queue</h4><h5 id="尾部添加"><a href="#尾部添加" class="headerlink" title="尾部添加"></a>尾部添加</h5><ul>
<li><p>boolean add(E element)</p>
</li>
<li><p>boolean offer(E element)</p>
<p>如果队列满了，第一个异常，第二个返回false</p>
</li>
</ul>
<h5 id="返回头部并删除"><a href="#返回头部并删除" class="headerlink" title="返回头部并删除"></a>返回头部并删除</h5><ul>
<li><p>E remove()</p>
</li>
<li><p>E poll()</p>
<p>如果队列为空，第一个异常，第二个返回null</p>
</li>
</ul>
<h5 id="返回头部不删除"><a href="#返回头部不删除" class="headerlink" title="返回头部不删除"></a>返回头部不删除</h5><ul>
<li><p>E element()</p>
</li>
<li><p>E peek()</p>
<p>如果队列为空，第一个异常，第二个null</p>
</li>
</ul>
<h4 id="2-3-2-Deque"><a href="#2-3-2-Deque" class="headerlink" title="2.3.2 Deque"></a>2.3.2 Deque</h4><p>双端队列，就是再上面的基础上多了后缀<code>First</code>和<code>Last</code>，那还不如用链表。</p>
<h4 id="2-3-3-PriorityQueue-优先队列"><a href="#2-3-3-PriorityQueue-优先队列" class="headerlink" title="2.3.3 PriorityQueue 优先队列"></a>2.3.3 PriorityQueue 优先队列</h4><p>就是最小/大堆结构（二叉树）。</p>
<ul>
<li><p>PriorityQueue()</p>
</li>
<li><p>PriorityQueue(int initalcapacity)</p>
</li>
<li><p>PriorityQueue(int initalcapacity, Compatator&lt;? super E&gt; c)：指定比较器（可以自定义最小值定义）</p>
</li>
<li><p>add</p>
</li>
<li><p>isEmpty</p>
</li>
<li><p>remove：返回最小值</p>
</li>
</ul>
<h3 id="2-4-映射"><a href="#2-4-映射" class="headerlink" title="2.4 映射"></a>2.4 映射</h3><p>K-V对</p>
<h4 id="2-4-1-Map"><a href="#2-4-1-Map" class="headerlink" title="2.4.1 Map"></a>2.4.1 Map</h4><ul>
<li><p>V get(Object key)</p>
</li>
<li><p>default V getOrDefault(Object key, V defaultValue)</p>
<p>根据Key获取值，如果Key不存在，返回默认值。</p>
</li>
<li><p>V put(K key, V value)</p>
<p>如果值已经存在返回修改前的值，不存在返回null</p>
</li>
<li><p>void putAll(Map&lt;? extends K, ? extends V&gt; entries)</p>
</li>
<li><p>boolean containsKey(Object key)</p>
</li>
<li><p>boolean containsValue(Object value)</p>
</li>
<li><p>default void forEach(lambda表达式)</p>
</li>
</ul>
<h4 id="2-4-2-HashMap"><a href="#2-4-2-HashMap" class="headerlink" title="2.4.2 HashMap"></a>2.4.2 HashMap</h4><p>推荐默认容量16</p>
<h4 id="2-4-3-TreeMap-有序"><a href="#2-4-3-TreeMap-有序" class="headerlink" title="2.4.3 TreeMap(有序)"></a>2.4.3 TreeMap(有序)</h4><p>和TreeSet差不多把</p>
<ul>
<li>K firstKey()</li>
<li>K lastKey()</li>
</ul>
<h4 id="2-4-4-映射视图"><a href="#2-4-4-映射视图" class="headerlink" title="2.4.4 映射视图"></a>2.4.4 映射视图</h4><p>视图中进行的操作，等同于再原映射中进程的操作。</p>
<ul>
<li>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()<ul>
<li>Map.Entry（遍历可以直接用forEach）<ul>
<li>K getKey()</li>
<li>V getValue()</li>
<li>V setValue(V newValue)</li>
</ul>
</li>
</ul>
</li>
<li>Set&lt; K&gt; keySet()</li>
<li>Collection&lt; V&gt; valus()</li>
</ul>
<h3 id="2-5-栈"><a href="#2-5-栈" class="headerlink" title="2.5 栈"></a>2.5 栈</h3><p>扩展了Vector类，不太满意。</p>
<ul>
<li>E push(E item)</li>
<li>E pop()</li>
<li>E peek()</li>
</ul>
<h2 id="三、算法"><a href="#三、算法" class="headerlink" title="三、算法"></a>三、算法</h2><h4 id="java-util-Collections"><a href="#java-util-Collections" class="headerlink" title="java.util.Collections"></a>java.util.Collections</h4><ul>
<li>static void sort(List&lt; T&gt; elements)</li>
<li>static void shuffle(List&lt;?&gt; elements)</li>
<li>static void reverse(List&lt;?&gt; list) </li>
<li>min</li>
<li>max</li>
<li>copy</li>
<li>fill</li>
<li>addAll</li>
<li>replaceAll</li>
<li>indexOfSubList</li>
<li>lastIndexOfSubList</li>
<li>swap</li>
<li>ratate</li>
<li>frequency：返回c中与对象o相等的元素的个数</li>
<li>disjoint：如果两个集合没有共同元素返回true</li>
</ul>
<h4 id="java-util-Collection"><a href="#java-util-Collection" class="headerlink" title="java.util.Collection"></a>java.util.Collection</h4><ul>
<li>removeIf(lambda表达式)</li>
</ul>
<h4 id="java-util-List"><a href="#java-util-List" class="headerlink" title="java.util.List"></a>java.util.List</h4><ul>
<li><p>default void sort(Comparator c)</p>
<p>直接在对象上调用，使用比较器排序</p>
</li>
</ul>
<h4 id="java-util-Comparator"><a href="#java-util-Comparator" class="headerlink" title="java.util.Comparator"></a>java.util.Comparator</h4><ul>
<li>Comparator&lt; T&gt; reversed()</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka学习笔记</title>
    <url>/2020/04/15/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Kafka学习笔记"><a href="#Kafka学习笔记" class="headerlink" title="Kafka学习笔记"></a>Kafka学习笔记</h1><p><strong>官网</strong>：<a href="http://kafka.apache.org" target="_blank" rel="noopener">http://kafka.apache.org</a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li><p>分布式流处理平台。</p>
</li>
<li><p>在系统之间构建实时数据流管道。</p>
</li>
<li><p>以topic分类对记录进行存储。</p>
</li>
<li><p>每个记录包含key-value+timestamp</p>
</li>
<li><p>每秒钟百万消息吞吐量。</p>
</li>
</ul>
<p>组成：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">producer			&#x2F;&#x2F;消息生产者</span><br><span class="line">consumer			&#x2F;&#x2F;消息消费者</span><br><span class="line">consumer group		&#x2F;&#x2F;消费者组</span><br><span class="line">kafka server		&#x2F;&#x2F;broker,kafka服务器</span><br><span class="line">topic				&#x2F;&#x2F;主题,副本数,分区.</span><br><span class="line">zookeeper			&#x2F;&#x2F;hadoop namenoade + RM HA | hbase | kafka</span><br></pre></td></tr></table></figure></div>



<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>这里我们规划s202-s203-s204作为Kafka集群。</p>
<ol>
<li><p>下载 <strong>kafka_2.12-2.4.1.tgz</strong> 并上传到s202</p>
</li>
<li><p>tar、创建连接</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf kafka_2.12-2.4.1.tgz -C &#x2F;soft&#x2F;</span><br><span class="line">$ln -s kafka_2.12-2.4.1 kafka</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#x2F;etc&#x2F;profile]</span><br><span class="line"># Kafka</span><br><span class="line">export KAFKA_HOME&#x3D;&#x2F;soft&#x2F;kafka</span><br><span class="line">export PATH&#x3D;$PATH:$KAFKA_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">$source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拷贝一份初始配置文件</span><br><span class="line">$cp server.properties server.properties.bak</span><br></pre></td></tr></table></figure></div>

<p>修改<strong>server.properties</strong>内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置ID，保证集群中唯一（这里取IP）</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">202</span></span><br><span class="line"><span class="comment"># 打开注释</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://:9092</span></span><br><span class="line"><span class="comment"># 修改日志目录</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/home/wbw/kafka/logs</span></span><br><span class="line"><span class="comment"># 修改zookeeper集群</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">s201:2181,s202:2181,s203:2181</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发到s203,s204。<strong>注意修改broker.id</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$scp -r kafka_2.12-2.4.1 wbw@s203:&#x2F;soft&#x2F;</span><br><span class="line">$scp -r kafka_2.12-2.4.1 wbw@s204:&#x2F;soft&#x2F;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、快速使用"><a href="#三、快速使用" class="headerlink" title="三、快速使用"></a>三、快速使用</h2><h3 id="3-1-启动Kafka服务器"><a href="#3-1-启动Kafka服务器" class="headerlink" title="3.1 启动Kafka服务器"></a>3.1 启动Kafka服务器</h3><ol>
<li><p>确保ZK集群开启</p>
</li>
<li><p>启动Kafka，在S202~S204分别运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties</span><br></pre></td></tr></table></figure></div>

<p>-daemon ：以守护线程方式启动</p>
</li>
</ol>
<h3 id="3-2-创建主题"><a href="#3-2-创建主题" class="headerlink" title="3.2 创建主题"></a>3.2 创建主题</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s202 &#x2F;soft&#x2F;kafka]$bin&#x2F;kafka-topics.sh --create --zookeeper s201:2181,s202:2181,s203:2181 --replication-factor 2 --partitions 2 --topic test</span><br></pre></td></tr></table></figure></div>

<p>–create：创建主题</p>
<p>–bootstrap-server：引导服务</p>
<p>–replication-factor：副本数</p>
<p>–partitions：分区数</p>
<p>–topic：主题名</p>
<h3 id="3-3-查看主题列表、描述"><a href="#3-3-查看主题列表、描述" class="headerlink" title="3.3 查看主题列表、描述"></a>3.3 查看主题列表、描述</h3><p><strong>列表</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s202 &#x2F;soft&#x2F;kafka]$bin&#x2F;kafka-topics.sh --list --zookeeper s202:2181</span><br><span class="line">test</span><br></pre></td></tr></table></figure></div>

<p><strong>描述</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s202 &#x2F;soft&#x2F;kafka]$bin&#x2F;kafka-topics.sh --describe --zookeeper s202:2181 --topic test</span><br><span class="line">Topic: test	PartitionCount: 2	ReplicationFactor: 2	Configs: segment.bytes&#x3D;1073741824</span><br><span class="line">	Topic: test	Partition: 0	Leader: 204	Replicas: 204,202	Isr: 204,202</span><br><span class="line">	Topic: test	Partition: 1	Leader: 202	Replicas: 202,203	Isr: 202,203</span><br></pre></td></tr></table></figure></div>

<p><strong>注：</strong>该主题有2个分区，每个分区有2个副本。其中副本，又有leader和follow之分。一个消息过来，会被分配到一个分区中，所有副本上拥有该分区的主机都会复制一份。具体过程再副本中讲到。</p>
<h3 id="3-4-启动控制台生产者"><a href="#3-4-启动控制台生产者" class="headerlink" title="3.4 启动控制台生产者"></a>3.4 启动控制台生产者</h3><p>启动后，发送一些消息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s202 &#x2F;soft&#x2F;kafka]$bin&#x2F;kafka-console-producer.sh --broker-list s202:9092 --topic test</span><br><span class="line">&gt;</span><br><span class="line">&gt;;</span><br><span class="line">&gt;hello kafka</span><br><span class="line">&gt;This</span><br></pre></td></tr></table></figure></div>



<h3 id="3-5-启动控制台消费者"><a href="#3-5-启动控制台消费者" class="headerlink" title="3.5 启动控制台消费者"></a>3.5 启动控制台消费者</h3><p>接受来自生产者的消息。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s203 &#x2F;soft&#x2F;kafka_2.12-2.4.1]$bin&#x2F;kafka-console-consumer.sh --bootstrap-server s202:9092 --topic test --from-beginning</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">hello kafka</span><br><span class="line">This</span><br></pre></td></tr></table></figure></div>



<h3 id="3-6-删除主题"><a href="#3-6-删除主题" class="headerlink" title="3.6 删除主题"></a>3.6 删除主题</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$kafka-topics.sh --delete --zookeeper s203:2181 --topic test</span><br><span class="line"></span><br><span class="line">Topic test is marked for deletion.</span><br><span class="line">Note: This will have no impact if delete.topic.enable is not set to true.</span><br><span class="line">删除topic，需要在server.properties中设置delete.topic.enable&#x3D;true否则只是标记删除或者直接重启。</span><br></pre></td></tr></table></figure></div>



<h2 id="四、副本模式"><a href="#四、副本模式" class="headerlink" title="四、副本模式"></a>四、副本模式</h2><ul>
<li><p>broker存放消息以消息达到顺序存放。生产和消费都是副本感知的。</p>
</li>
<li><p>支持到n-1故障。每个分区都有leader，follow.</p>
</li>
<li><p>leader挂掉时，消息分区写入到本地log或者，向生产者发送消息确认回执之前，生产者向新的leader发送消息。</p>
</li>
<li><p>新leader的选举是通过isr进行，第一个注册的follower成为leader。</p>
</li>
</ul>
<h3 id="4-1-同步复制"><a href="#4-1-同步复制" class="headerlink" title="4.1 同步复制"></a>4.1 同步复制</h3><ol>
<li>生产者producer先联系zk找到leader</li>
<li>向leader发送消息</li>
<li>leader收到消息后写入到本地log中</li>
<li>然后follower向leader，pull消息</li>
<li>follower拿到消息后写入本地log</li>
<li>然后向leader发送ACK消息</li>
<li>leader收到所有ACK消息后向producer回传ACK</li>
</ol>
<h3 id="4-2-异步复制"><a href="#4-2-异步复制" class="headerlink" title="4.2 异步复制"></a>4.2 异步复制</h3><p>和同步复制的区别在于leader写入到本地log后，直接向client回传ACK消息，不需要等待所有follower复制完成，<strong>可能造成消息丢失</strong>。</p>
<h2 id="五、JAVA-API"><a href="#五、JAVA-API" class="headerlink" title="五、JAVA API"></a>五、JAVA API</h2><h3 id="5-1-添加依赖"><a href="#5-1-添加依赖" class="headerlink" title="5.1 添加依赖"></a>5.1 添加依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.13<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="5-2-生产者"><a href="#5-2-生产者" class="headerlink" title="5.2 生产者"></a>5.2 生产者</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"192.168.174.202:9092"</span>);</span><br><span class="line">    properties.put(<span class="string">"acks"</span>, <span class="string">"all"</span>);</span><br><span class="line">    properties.put(<span class="string">"retries"</span>, <span class="number">0</span>);</span><br><span class="line">    properties.put(<span class="string">"batch.size"</span>, <span class="number">16384</span>);</span><br><span class="line">    properties.put(<span class="string">"linger.ms"</span>, <span class="number">1</span>);</span><br><span class="line">    properties.put(<span class="string">"buffer.memory"</span>, <span class="number">33554432</span>);</span><br><span class="line">    properties.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">    properties.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建生产者</span></span><br><span class="line">    Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"test4"</span>, <span class="string">"This message from java API new"</span>));</span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    producer.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-3-消费者"><a href="#5-3-消费者" class="headerlink" title="5.3 消费者"></a>5.3 消费者</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"192.168.174.202:9092"</span>);</span><br><span class="line">    <span class="comment">// kafka一个组只能收到1个消息，不论组里有多少个消费者，只有其中1个可以接受消息。</span></span><br><span class="line">    <span class="comment">// 因此如果需要每个消费者都接收到消息，可以每个消费者各处一组</span></span><br><span class="line">    properties.put(<span class="string">"group.id"</span>, <span class="string">"group-1"</span>);</span><br><span class="line">    properties.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</span><br><span class="line">    properties.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">    properties.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"earliest"</span>);</span><br><span class="line">    properties.put(<span class="string">"session.timeout.ms"</span>, <span class="string">"30000"</span>);</span><br><span class="line">    properties.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">    properties.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消费者</span></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(properties);</span><br><span class="line">    <span class="comment">// 订阅主题列表</span></span><br><span class="line">    consumer.subscribe(Collections.singletonList(<span class="string">"test4"</span>));</span><br><span class="line">    <span class="comment">// 消息轮询</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"offset = %d, value = %s"</span>, record.offset(), record.value());</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>大数据</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础操作</title>
    <url>/2019/09/17/Linux%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Linux基础操作"><a href="#Linux基础操作" class="headerlink" title="Linux基础操作"></a>Linux基础操作</h1><h2 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h2><ul>
<li><p>清屏：clear</p>
</li>
<li><p>添加用户：useradd XXX</p>
</li>
<li><p>添加密码：passwd XXX</p>
</li>
<li><p>切换用户：su XXX</p>
</li>
<li><p>重启网络服务：service network restart</p>
</li>
<li><p>更改主机名：hostname XXX（临时有效）</p>
</li>
<li><p>显示当前列表：ls</p>
</li>
<li><p>显示当前详细列表：ll</p>
</li>
<li><p>显示当前进程：jps</p>
</li>
<li><p>创建文件夹：mkdir XXX</p>
</li>
<li><p>加压文件：tar -zxvf XXX -C YYY</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数解析：</span><br><span class="line">z ：解析编码（XXX.tar.gz）</span><br><span class="line">x ：解压</span><br><span class="line">v ：打印进度</span><br><span class="line">f ：打印的文件</span><br><span class="line">XXX ：文件路径</span><br><span class="line">C ：解压目标地址</span><br><span class="line">YYY ：目标路径*</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>当前路径：wpd</p>
</li>
</ul>
<h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><ol>
<li><p>修改配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>

<p>添加如下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export XXX_HOME&#x3D;XXX安装目录</span><br><span class="line">export PATH&#x3D;$PATH:$XXX_HOME&#x2F;bin</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、sudo临时root权限"><a href="#三、sudo临时root权限" class="headerlink" title="三、sudo临时root权限"></a>三、sudo临时root权限</h2><h3 id="3-1-添加普通用户临时使用root权限"><a href="#3-1-添加普通用户临时使用root权限" class="headerlink" title="3.1 添加普通用户临时使用root权限"></a>3.1 添加普通用户临时使用root权限</h3><ol>
<li><p>切换root用户</p>
</li>
<li><p>添加sudo文件的写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改/etc/sudoers文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>

<p>添加如下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL&#x3D;(ALL)       ALL</span><br><span class="line"># 如给XXX添加sudo权限</span><br><span class="line">XXX     ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>撤销sudoers文件写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-2-sudo-command时，提示找不到命令"><a href="#3-2-sudo-command时，提示找不到命令" class="headerlink" title="3.2 sudo + command时，提示找不到命令"></a>3.2 sudo + command时，提示找不到命令</h3><ol>
<li><p>切换root用户</p>
</li>
<li><p>添加sudo文件的写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改/etc/sudoers文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>

<p>找到 <code>Defaults env_reset</code> , 将其改为 <code>Defaults !env_reset</code> </p>
</li>
<li><p>撤销sudoers文件写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>切换到当前用户</p>
</li>
<li><p>修改配置文件~/.bashrc</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure></div>

<p>末尾添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias sudo&#x3D;&#39;sudo env PATH&#x3D;$PATH&#39;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重启系统</p>
</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2020/02/28/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Linux学习笔记"><a href="#Linux学习笔记" class="headerlink" title="Linux学习笔记"></a>Linux学习笔记</h1><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul>
<li><p>VM15</p>
</li>
<li><p>CentOS7（以下所有操作均以该系统运行）</p>
</li>
</ul>
<p>安装教程：<a href="https://blog.csdn.net/qq_44714603/article/details/88829423" target="_blank" rel="noopener">https://blog.csdn.net/qq_44714603/article/details/88829423</a></p>
<p>后期安装图形界面：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装Gnome包</span><br><span class="line">$sudo yum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</span><br></pre></td></tr></table></figure></div>

<p>然后设置默认运行级，重启：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo systemctl set-default graphical.target</span><br><span class="line">$sudo reboot</span><br></pre></td></tr></table></figure></div>



<h2 id="二、系统介绍"><a href="#二、系统介绍" class="headerlink" title="二、系统介绍"></a>二、系统介绍</h2><h3 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h3><p>【转】<a href="https://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-system-contents.html</a></p>
<p><strong>系统启动必须：</strong></p>
<ul>
<li><p><strong>/boot：</strong>存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。</p>
</li>
<li><p><strong>/etc：</strong>存放<strong>所有</strong>的系统需要的<strong>配置文件</strong>和<strong>子目录列表，</strong>更改目录下的文件可能会导致系统不能启动。</p>
</li>
<li><p><strong>/lib</strong>：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/sys</strong>： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p>
</li>
</ul>
<p><strong>指令集合：</strong></p>
<ul>
<li><p><strong>/bin：</strong>存放着最常用的程序和指令</p>
</li>
<li><p><strong>/sbin：</strong>只有系统管理员能使用的程序和指令。</p>
</li>
</ul>
<p><strong>外部文件管理：</strong></p>
<ul>
<li><p><strong>/dev ：</strong>Device(设备)的缩写, 存放的是Linux的外部设备。<strong>注意：</strong>在Linux中访问设备和访问文件的方式是相同的。</p>
</li>
<li><p><strong>/media</strong>：类windows的<strong>其他设备，</strong>例如U盘、光驱等等，识别后linux会把设备放到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong>：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
</ul>
<p><strong>临时文件：</strong></p>
<ul>
<li><p><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
<li><p><strong>/lost+found</strong>：一般情况下为空的，系统非法关机后，这里就存放一些文件。</p>
</li>
<li><p><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</p>
</li>
</ul>
<p><strong>账户：</strong></p>
<ul>
<li><p><strong>/root</strong>：系统管理员的用户主目录。</p>
</li>
<li><p><strong>/home</strong>：用户的主目录，以用户的账号命名的。</p>
</li>
<li><p><strong>/usr</strong>：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p>
</li>
<li><p><strong>/usr/bin：</strong>系统用户使用的应用程序与指令。</p>
</li>
<li><p><strong>/usr/sbin：</strong>超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>/usr/src：</strong>内核源代码默认的放置目录。</p>
</li>
</ul>
<p><strong>运行过程中要用：</strong></p>
<ul>
<li><p><strong>/var</strong>：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。</p>
</li>
<li><p><strong>/proc</strong>：管理<strong>内存空间！</strong>虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。</p>
</li>
</ul>
<p><strong>扩展用的：</strong></p>
<ul>
<li><p><strong>/opt</strong>：默认是空的，我们安装额外软件可以放在这个里面。</p>
</li>
<li><p><strong>/srv</strong>：存放服务启动后需要提取的数据<strong>（不用服务器就是空）</strong></p>
</li>
</ul>
<h3 id="2-2-运行级"><a href="#2-2-运行级" class="headerlink" title="2.2 运行级"></a>2.2 运行级</h3><p>Linux系统在任何时候都运行于某个运行级上,且不同运行级运行的程序和服务都不同,所要完成的工作和要达到的目的都不同。</p>
<p><strong>运行级0</strong>：关闭计算机,使用shutdown-h命令时,系统转入该状态。</p>
<p><strong>运行级1</strong>：单用户模式,不带网络,运行最小系统,用于系统修复,不进行用户身份验证,一般默认运行级不用1</p>
<p><strong>运行级2</strong>：多用户模式(与运行级3相似,不带网络功能)</p>
<p><strong>运行级3</strong>：带有网络支持的多用户模式,常用的运行级别,但是没有图形界面。</p>
<p><strong>运行级4</strong>：系统保留备用</p>
<p><strong>运行级5</strong>：用于自动启动 XFree886系统(图形方式),常用的默认运行级</p>
<p><strong>运行级6</strong>：重新启动,使用shutdown–r命令时,系统转入该状态。</p>
<p><strong>查看当前系统的运行级</strong>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$systemctl get-default</span><br><span class="line"></span><br><span class="line"># multi-user.target: analogous to runlevel 3</span><br><span class="line"># graphical.target: analogous to runlevel 5</span><br></pre></td></tr></table></figure></div>

<p><strong>注：如果系统启动后,不是运行级5,则启动字符界面(shell),要想进入图形界面可用命令 startx</strong></p>
<p><strong>切换运行级</strong>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$systemctl set-default TARGET.target</span><br><span class="line"></span><br><span class="line"># multi-user.target: analogous to runlevel 3</span><br><span class="line"># graphical.target: analogous to runlevel 5</span><br></pre></td></tr></table></figure></div>



<p><strong>系统运行级服务</strong>：</p>
<p>可以在 <strong>/etc/rc.d</strong> 目录下查看，不同运行级下的开启的不同服务。</p>
<p>也可以运行一下命令查看：可以看到1-6运行级下，哪些服务会启动。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$chkconfig --list</span><br><span class="line"></span><br><span class="line">netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off</span><br><span class="line">network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off</span><br></pre></td></tr></table></figure></div>



<h3 id="2-3-守护进程"><a href="#2-3-守护进程" class="headerlink" title="2.3 守护进程"></a>2.3 守护进程</h3><p>一般以d结尾，表示daemon。（一般是需要一直运行的程序，如网页服务器）</p>
<p>查看一个服务状态：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl [status | start | stop] serverName</span><br></pre></td></tr></table></figure></div>

<p>如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$systemctl status sshd</span><br><span class="line">● sshd.service - OpenSSH server daemon</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;sshd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2020-04-15 06:22:37 CST; 12min ago</span><br><span class="line">     Docs: man:sshd(8)</span><br><span class="line">           man:sshd_config(5)</span><br><span class="line"> Main PID: 986 (sshd)</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;sshd.service</span><br><span class="line">           └─986 &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br></pre></td></tr></table></figure></div>



<h3 id="2-4-引导与启动"><a href="#2-4-引导与启动" class="headerlink" title="2.4 引导与启动"></a>2.4 引导与启动</h3><p><a href="/postImages/%E5%BC%95%E5%AF%BC%E5%90%AF%E5%8A%A8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%BC%95%E5%AF%BC%E5%90%AF%E5%8A%A8.png" class="lazyload"></a></p>
<p><a href="/postImages/%E5%BC%95%E5%AF%BC%E5%90%AF%E5%8A%A82.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%BC%95%E5%AF%BC%E5%90%AF%E5%8A%A82.png" class="lazyload"></a></p>
<h2 id="三、系统基本命令"><a href="#三、系统基本命令" class="headerlink" title="三、系统基本命令"></a>三、系统基本命令</h2><h3 id="3-1-man-系统调用使用手册"><a href="#3-1-man-系统调用使用手册" class="headerlink" title="3.1 man 系统调用使用手册"></a>3.1 man 系统调用使用手册</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">man name			# 查询name使用说明（下面的命令具体情况都可以进行查看）</span><br><span class="line">man section name	# 查找指定章节的说明</span><br><span class="line">man -k refexp		# 根据正则表达式查找匹配手册目录</span><br></pre></td></tr></table></figure></div>

<p>参数解析：</p>
<p>name：名称</p>
<p>section：章节数（常见编号如下）</p>
<ul>
<li>1：命令</li>
<li>2：系统调用</li>
<li>3：库函数</li>
<li>5：配置文件</li>
</ul>
<p>refexp：正则表达式</p>
<h3 id="3-2-系统时间"><a href="#3-2-系统时间" class="headerlink" title="3.2 系统时间"></a>3.2 系统时间</h3><h4 id="3-2-1-获取系统当前时间"><a href="#3-2-1-获取系统当前时间" class="headerlink" title="3.2.1 获取系统当前时间"></a>3.2.1 获取系统当前时间</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# date</span><br><span class="line">Fri Mar  6 00:36:56 CST 2020</span><br><span class="line">[root@centos7 ~]# date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2020-03-06 00:34:37</span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-2-校准时间"><a href="#3-2-2-校准时间" class="headerlink" title="3.2.2 校准时间"></a>3.2.2 校准时间</h4><p>需要root权限才能更改：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# ntpdate 0.pool.ntp.org</span><br><span class="line"> 5 Mar 16:39:38 ntpdate[2065]: step time server 84.16.67.12 offset -28799.352921 sec</span><br></pre></td></tr></table></figure></div>

<p>如果没有安装ntpdate的话，先执行安装指令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ntpdate</span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-3-系统运行时间"><a href="#3-2-3-系统运行时间" class="headerlink" title="3.2.3 系统运行时间"></a>3.2.3 系统运行时间</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ uptime</span><br><span class="line"> 17:02:19 up 52 min,  3 users,  load average: 0.00, 0.01, 0.05</span><br></pre></td></tr></table></figure></div>

<p>结果解析：</p>
<p>17:02:19：当前时间</p>
<p>up 52 min：系统自动后到当前已经运行的时间</p>
<p>3 users：当前有3个用户登录系统</p>
<p>load average: 0.00, 0.01, 0.05：近期1、5、15分钟内系统CPU负载平均调度队列长度</p>
<h3 id="3-3-日历"><a href="#3-3-日历" class="headerlink" title="3.3 日历"></a>3.3 日历</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cal				# 查看当月日历</span><br><span class="line">cal 2020		# 查询指定年日历</span><br><span class="line">cal 10 2019		# 查询指定年月日历</span><br></pre></td></tr></table></figure></div>



<h3 id="3-4-计算器"><a href="#3-4-计算器" class="headerlink" title="3.4 计算器"></a>3.4 计算器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bc</span><br></pre></td></tr></table></figure></div>

<p>安装指令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install bc</span><br></pre></td></tr></table></figure></div>



<h3 id="3-5-系统资源"><a href="#3-5-系统资源" class="headerlink" title="3.5 系统资源"></a>3.5 系统资源</h3><h4 id="3-5-1-top-资源占用进程"><a href="#3-5-1-top-资源占用进程" class="headerlink" title="3.5.1 top 资源占用进程"></a>3.5.1 top 资源占用进程</h4><p>top：列出资源占用排名靠前的进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></div>

<h4 id="3-5-2-ps-进程状态"><a href="#3-5-2-ps-进程状态" class="headerlink" title="3.5.2 ps 进程状态"></a>3.5.2 ps 进程状态</h4><p>ps：查阅进程状态</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# ps</span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">  1955 pts&#x2F;0    00:00:00 bash</span><br><span class="line">  2176 pts&#x2F;0    00:00:00 ps</span><br><span class="line"># 更详细的信息（可以不加e）</span><br><span class="line">[root@centos7 ~]# ps -e</span><br><span class="line">[root@centos7 ~]# ps -ef | more</span><br><span class="line">[root@centos7 ~]# ps -el | more</span><br></pre></td></tr></table></figure></div>

<h4 id="3-5-3-free-内存使用情况"><a href="#3-5-3-free-内存使用情况" class="headerlink" title="3.5.3 free 内存使用情况"></a>3.5.3 free 内存使用情况</h4><p>free：内存使用情况</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free</span><br></pre></td></tr></table></figure></div>

<h4 id="3-5-4-vmstat-系统负载"><a href="#3-5-4-vmstat-系统负载" class="headerlink" title="3.5.4 vmstat 系统负载"></a>3.5.4 vmstat 系统负载</h4><p>vmstat：了解系统负载</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmstat</span><br><span class="line">vmstat 1	# 每隔1秒打印一次信息</span><br></pre></td></tr></table></figure></div>

<h4 id="3-5-5-df-系统资源使用情况"><a href="#3-5-5-df-系统资源使用情况" class="headerlink" title="3.5.5 df 系统资源使用情况"></a>3.5.5 df 系统资源使用情况</h4><p>df [-h]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 475M     0  475M   0% &#x2F;dev</span><br><span class="line">tmpfs                    487M     0  487M   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs                    487M  7.8M  479M   2% &#x2F;run</span><br><span class="line">tmpfs                    487M     0  487M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;centos-root   17G  5.3G   12G  31% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda1               1014M  137M  878M  14% &#x2F;boot</span><br><span class="line">tmpfs                     98M     0   98M   0% &#x2F;run&#x2F;user&#x2F;1000</span><br></pre></td></tr></table></figure></div>



<h3 id="3-6-who-查看系统登录用户"><a href="#3-6-who-查看系统登录用户" class="headerlink" title="3.6 who 查看系统登录用户"></a>3.6 who 查看系统登录用户</h3><p><strong>who：列出当前已登录系统的用户</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ who</span><br><span class="line">root     tty1         2020-03-06 00:11</span><br><span class="line">root     pts&#x2F;0        2020-03-06 00:24 (192.168.174.1)</span><br><span class="line">wbw      pts&#x2F;1        2020-03-05 16:57 (192.168.174.1)</span><br></pre></td></tr></table></figure></div>

<p><strong>tty：打印当前终端设备文件名</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ tty</span><br><span class="line">&#x2F;dev&#x2F;pts&#x2F;1</span><br></pre></td></tr></table></figure></div>

<p><strong>who am i：列出当前终端上登录的用户</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ who am i</span><br><span class="line">wbw      pts&#x2F;1        2020-03-05 16:57 (192.168.174.1)</span><br></pre></td></tr></table></figure></div>

<p><strong>whoami：仅列出当前系统用户名</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ whoami</span><br><span class="line">wbw</span><br></pre></td></tr></table></figure></div>



<h3 id="3-7-关机、重启"><a href="#3-7-关机、重启" class="headerlink" title="3.7 关机、重启"></a>3.7 关机、重启</h3><p><strong>重启</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$reboot</span><br></pre></td></tr></table></figure></div>



<p><strong>关机</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$shutdown [-t sec] [-rkhncfF] time [warning-message]</span><br></pre></td></tr></table></figure></div>

<p>-t sec：发送警告信息。（一个服务器，可能有多个用户连接）</p>
<p>-r：重启</p>
<p>-h：关机</p>
<p>time：可以用绝对时间00:00:00 也可 相对+mm</p>
<h2 id="四、Linux-基础操作"><a href="#四、Linux-基础操作" class="headerlink" title="四、Linux 基础操作"></a>四、Linux 基础操作</h2><h3 id="4-1-tab-命令补全"><a href="#4-1-tab-命令补全" class="headerlink" title="4.1 tab 命令补全"></a>4.1 tab 命令补全</h3><p>只需要打命令的前几个字符，然后按下tab键，会进行自动补全。</p>
<h3 id="4-2-alias-别名"><a href="#4-2-alias-别名" class="headerlink" title="4.2 alias 别名"></a>4.2 alias 别名</h3><p>我们可以对一些命令进行取别名操作：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ alias ll</span><br><span class="line">alias ll&#x3D;&#39;ls -l --color&#x3D;auto&#39;</span><br></pre></td></tr></table></figure></div>

<p>我们还可以自定义命令别名：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ alias wbwll&#x3D;&#39;ls -l&#39;</span><br><span class="line">$ wbwll</span><br><span class="line">total 12</span><br><span class="line">-rw-rw-r--. 1 wbw wbw  58 Mar  5 17:35 filelist.txt</span><br><span class="line">-rw-rw-r--. 1 wbw wbw 106 Mar  5 17:45 file.txt</span><br><span class="line">-rw-rw-r--. 1 wbw wbw  14 Mar  5 18:09 nums.txt</span><br><span class="line">drwxrwxr-x. 2 wbw wbw   6 Mar  5 18:50 work</span><br></pre></td></tr></table></figure></div>

<p>但是换一个终端就失效了，如果想一直实现的话可以修改~/.bashrc文件，在末尾添加：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 别名描述</span><br><span class="line">alias wbwll&#x3D;&#39;ls -l&#39;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-3-clear-清屏"><a href="#4-3-clear-清屏" class="headerlink" title="4.3 clear 清屏"></a>4.3 clear 清屏</h3><p>清空当前屏幕的内容</p>
<h3 id="4-4-pwd-打印当前目录"><a href="#4-4-pwd-打印当前目录" class="headerlink" title="4.4 pwd 打印当前目录"></a>4.4 pwd 打印当前目录</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;home&#x2F;wbw</span><br></pre></td></tr></table></figure></div>



<h3 id="4-5-sudo-临时超级管理权限"><a href="#4-5-sudo-临时超级管理权限" class="headerlink" title="4.5 sudo 临时超级管理权限"></a>4.5 sudo 临时超级管理权限</h3><p><strong>添加普通用户临时使用root权限</strong></p>
<ol>
<li><p>切换root用户</p>
</li>
<li><p>添加sudo文件的写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改/etc/sudoers文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>

<p>添加如下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL&#x3D;(ALL)       ALL</span><br><span class="line"># 如给XXX添加sudo权限</span><br><span class="line">XXX     ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>撤销sudoers文件写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<p><strong>sudo + command时，提示找不到命令</strong></p>
<ol>
<li><p>切换root用户</p>
</li>
<li><p>添加sudo文件的写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改/etc/sudoers文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>

<p>找到 <code>Defaults env_reset</code> , 将其改为 <code>Defaults !env_reset</code> </p>
</li>
<li><p>撤销sudoers文件写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>切换到当前用户</p>
</li>
<li><p>修改配置文件~/.bashrc</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure></div>

<p>末尾添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias sudo&#x3D;&#39;sudo env PATH&#x3D;$PATH&#39;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重启系统</p>
</li>
</ol>
<h3 id="4-6-PS1-一级提示符"><a href="#4-6-PS1-一级提示符" class="headerlink" title="4.6 $PS1 一级提示符"></a>4.6 $PS1 一级提示符</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$</span><br></pre></td></tr></table></figure></div>

<p>其中[wbw@centos7 ~]就是一级提示符，我们可以对其自定义修改：</p>
<ol>
<li><p>编辑profile文件，添加环境变量PS1</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#x2F;etc&#x2F;profile]</span><br><span class="line">export PS1&#x3D;&#39;[\u@\h &#96;pwd&#96;]\$&#39;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>更新配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;source &#x2F;etc&#x2F;profile</span><br><span class="line">[wbw@centos7 &#x2F;home&#x2F;wbw]$</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-7-touch-创建文件"><a href="#4-7-touch-创建文件" class="headerlink" title="4.7 touch 创建文件"></a>4.7 touch 创建文件</h3><p>将文件的最后一次修改时间设置为当前时间,但不修改文件内容。例如: touch*.[ch]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch &lt;filePath文件路径&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-8-mkdir-创建目录"><a href="#4-8-mkdir-创建目录" class="headerlink" title="4.8 mkdir 创建目录"></a>4.8 mkdir 创建目录</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir [-p 创建父目录] &lt;dirPath目录路径&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="4-9-ln-链接"><a href="#4-9-ln-链接" class="headerlink" title="4.9 ln 链接"></a>4.9 ln 链接</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln [参数][源文件或目录][目标文件或目录]</span><br></pre></td></tr></table></figure></div>

<p><strong>软链接</strong>：</p>
<ul>
<li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li>
<li>2.软链接可以跨文件系统 ，硬链接不可以</li>
<li>3.软链接可以对一个不存在的文件名进行链接</li>
<li>4.软链接可以对目录进行链接</li>
</ul>
<p><strong>硬链接</strong>：</p>
<ul>
<li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li>
<li>2.不允许给目录创建硬链接</li>
<li>3.硬链接只有在同一个文件系统中才能创建</li>
</ul>
<p><strong>必要参数</strong>：</p>
<ul>
<li>-b 删除，覆盖以前建立的链接</li>
<li>-d 允许超级用户制作目录的硬链接</li>
<li>-f 强制执行</li>
<li>-i 交互模式，文件存在则提示用户是否覆盖</li>
<li>-n 把符号链接视为一般目录</li>
<li>-s 软链接(符号链接)【不带s为硬链接】</li>
<li>-v 显示详细的处理过程</li>
</ul>
<p><strong>注意！</strong></p>
<p>如果判断不是绝对路径（/开头），那么以相对路径解析：</p>
<p><a href="/postImages/%E9%93%BE%E6%8E%A5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%93%BE%E6%8E%A5.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设当前目录(bash进程的当前目录)为d</span><br><span class="line">ln -s d1&#x2F;dlb d1&#x2F;dx</span><br><span class="line">在d1下新建文件d</span><br><span class="line">访问d1&#x2F;dx实际访问d1&#x2F;d1&#x2F;d1b</span><br></pre></td></tr></table></figure></div>



<h3 id="4-10-ls-文件列表"><a href="#4-10-ls-文件列表" class="headerlink" title="4.10 ls 文件列表"></a>4.10 ls 文件列表</h3><p>控制列表格式，有选择的为每个项目列出某些属性。</p>
<p><strong>-F</strong>（现在终端有颜色了，少用）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">若列出的是目录,就在名字后面缀以斜线&#x2F;</span><br><span class="line">若列出的是可执行文件,就在名字后面缀以星号*</span><br><span class="line">若列出的是符号连接文件,就在名字后面缀以符号@</span><br><span class="line">若列出的是普通文件,则名字面后无任何标记</span><br><span class="line"></span><br><span class="line">例：$ls -F</span><br><span class="line">anthorized_keys  downloads&#x2F;  hadoop&#x2F;  hive&#x2F;  tmp&#x2F;  zookeeper&#x2F;</span><br></pre></td></tr></table></figure></div>

<p><strong>-l</strong> ：长格式列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：$ls -l arg</span><br><span class="line">-rw-rw-r--. 1 wbw wbw  390 Feb 26 21:09 anthorized_keys</span><br><span class="line">drwxrwxr-x. 5 wbw wbw 4096 Mar 29 16:47 downloads</span><br><span class="line">1rwxrwxrwx. 1 root sys 11 Jul 11 07: 31 unix-&gt;&#x2F;stand&#x2F;unix</span><br><span class="line">crw-r--r--. 1 bin ter 0, 9 Oct 18 09: 56 &#x2F;dev&#x2F;tty10</span><br><span class="line">prw-r--r--. 1 root sys 2642 ct1811:07 &#x2F;tmp&#x2F;pipe</span><br></pre></td></tr></table></figure></div>

<p><strong>-h</strong>：便于人阅读的方式打印</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$ls -lh</span><br><span class="line">total 16K</span><br><span class="line">-rw-rw-r--. 1 wbw wbw  390 Feb 26 21:09 anthorized_keys</span><br><span class="line">drwxrwxr-x. 5 wbw wbw 4.0K Mar 29 16:47 downloads</span><br></pre></td></tr></table></figure></div>

<p><strong>-a</strong>：显示隐藏信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$ls -la</span><br><span class="line">total 52</span><br><span class="line">drwx------. 11 wbw  wbw    261 Mar  9 23:31 .</span><br><span class="line">drwxr-xr-x.  3 root root    17 Jan 16 16:20 ..</span><br><span class="line">-rw-rw-r--.  1 wbw  wbw    390 Feb 26 21:09 anthorized_keys</span><br></pre></td></tr></table></figure></div>

<p><strong>-i</strong>：列出文件的i节点号</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$ls -li</span><br><span class="line">total 16</span><br><span class="line">17284854 -rw-rw-r--. 1 wbw wbw  390 Feb 26 21:09 anthorized_keys</span><br><span class="line">   20134 drwxrwxr-x. 5 wbw wbw 4096 Mar 29 16:47 downloads</span><br></pre></td></tr></table></figure></div>



<h3 id="4-11-cp-拷贝文件"><a href="#4-11-cp-拷贝文件" class="headerlink" title="4.11 cp 拷贝文件"></a>4.11 cp 拷贝文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp file1 file2</span><br><span class="line">cp file1 file2 dir：将file1 file2拷贝到目录路径下</span><br><span class="line"></span><br><span class="line">-r ：递归复制</span><br><span class="line">-u : 增量拷贝。根据文件的时戳,不拷贝相同的或者过时的版本的文件,以提高速度。</span><br></pre></td></tr></table></figure></div>



<h3 id="4-12-mv-移动-重命名-文件"><a href="#4-12-mv-移动-重命名-文件" class="headerlink" title="4.12 mv 移动(重命名)文件"></a>4.12 mv 移动(重命名)文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv file1 file2</span><br></pre></td></tr></table></figure></div>



<h3 id="4-13-rm-删除文件"><a href="#4-13-rm-删除文件" class="headerlink" title="4.13 rm 删除文件"></a>4.13 rm 删除文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm file1 file2 ... filen</span><br><span class="line"></span><br><span class="line">-r : 递归（删除目录）</span><br><span class="line">-i : 删除前确认</span><br><span class="line">-f : 强制删除</span><br></pre></td></tr></table></figure></div>



<h3 id="4-14-cd-改变当前目录"><a href="#4-14-cd-改变当前目录" class="headerlink" title="4.14 cd 改变当前目录"></a>4.14 cd 改变当前目录</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;a&#x2F;b&#x2F;c</span><br><span class="line">cd ..			&#x2F;&#x2F; 返回上一级目录</span><br><span class="line">cd				&#x2F;&#x2F; 返回主目录</span><br></pre></td></tr></table></figure></div>



<h3 id="4-15-rsync-数据备份工具"><a href="#4-15-rsync-数据备份工具" class="headerlink" title="4.15  rsync 数据备份工具"></a>4.15  rsync 数据备份工具</h3><p>远程同步 remote sync,可以镜像整个目录树。优化的流程,增量文件传输,效率高。</p>
<p>rsync用一精巧的算法,将文件分块,在两主机间传播数据块的hash值,据此推出两版本文件之间区别,使得网络只传输文件的增、删、改部分。</p>
<p>示例：（拷贝文件到另一台主机上）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$rsync test.tmp wbw@s202:~&#x2F;test.tmp</span><br></pre></td></tr></table></figure></div>



<h3 id="4-16-find-遍历目录树"><a href="#4-16-find-遍历目录树" class="headerlink" title="4.16 find 遍历目录树"></a>4.16 find 遍历目录树</h3><p><strong>find命令的三个基本功能</strong></p>
<ul>
<li>find命令从指定的查找范围开始,递归地查找子目录</li>
<li>凡满足条件的文件或目录</li>
<li>执行规定的动作</li>
</ul>
<p><strong>命令的特点</strong></p>
<ul>
<li><p>功能强,选项较多</p>
</li>
<li><p>递归式查找,提供了一种遍历目录树的手段</p>
</li>
<li><p>find命令提供的灵活性:</p>
<p>在“动作”中可以指定任何命令(也包括用户自己编写的处理程序),使得find成为一个任意处理命令可以借用来进行目录遍历的壳(类似awk对文本的逐行扫描,find对目录森林中的文件和目录逐个扫描)</p>
</li>
</ul>
<p><strong>-name</strong>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find verl.d ver2.d -name &#39;*.c&#39; -print</span><br><span class="line">范围: 当前目录的子目录ver1.d和ver2.d</span><br><span class="line">条件: 与名字*c匹配。注:c应当用引号括起！</span><br><span class="line">动作: 把查找到的文件的路径名打印出来</span><br></pre></td></tr></table></figure></div>

<p><strong>-regex</strong>：整个路径名与正则表达式匹配</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find xxx -regex pattern</span><br></pre></td></tr></table></figure></div>

<p><strong>-type</strong>：根据类型查找</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f:普通文件</span><br><span class="line">d:目录</span><br><span class="line">l:符号连接文件</span><br><span class="line">c:字符设备文件</span><br><span class="line">b:块设备文件</span><br><span class="line">p:管道文件</span><br></pre></td></tr></table></figure></div>



<p><strong>其他条件选项：</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(文件属性字段可用来对遍历到的目标进行筛选,查阅find手册)</span><br><span class="line">指定i节点号-inum</span><br><span class="line">可指定文件主-user,-nouser</span><br><span class="line">可指定用户组group,-nogroup</span><br><span class="line">指定link数 -links</span><br><span class="line">指定路径深度-depth</span><br><span class="line">指定文件的访问权限-perm</span><br><span class="line">根据文件大小-size +-n单位</span><br><span class="line">根据最后修改日期-mtime +-ndays</span><br><span class="line">比file还老的文件-newer file</span><br></pre></td></tr></table></figure></div>

<p><strong>复合条件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">◆非：</span><br><span class="line">find . ! -type d -links +2 -print</span><br><span class="line">从当前目录开始检索link数大于2的非目录文件</span><br><span class="line"></span><br><span class="line">* 条件“非”用!</span><br><span class="line">注意:!号与-type之间必须保留一空格</span><br><span class="line"></span><br><span class="line">◆条件1 或 条件2：</span><br><span class="line">find ~ -size +100k \(-name core -o -name &#39;*.tmp&#39; \) -print</span><br><span class="line">从主目录开始寻找大于100KB的名叫core或有tmp后缀</span><br><span class="line"></span><br><span class="line">* 使用了两条件“或”(-o)及组合(圆括号)</span><br><span class="line">* 不要遗漏了所必需的引号,反斜线和空格,尤其是圆括号前和圆括号后。圆括号是shel的特殊字符</span><br></pre></td></tr></table></figure></div>

<p><strong>find的动作选项</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-print</span><br><span class="line">打印查找的文件的路径名</span><br><span class="line">-exec</span><br><span class="line">◆对查找到的目标执行某一命令</span><br><span class="line">◆在-exec及随后的分号之间的内容作为一条命令在这命令的命令参数中,&#123;代表遍历到的目标文件的路径名</span><br><span class="line">-exec 参数后面跟的是 command命令，注意点如下：</span><br><span class="line"></span><br><span class="line">command命令的终止，使用 &#39;;&#39; (分号）来判定，在后面必须有一个 &#39;;&#39;</span><br><span class="line"></span><br><span class="line">&#39;&#123;&#125;&#39;，使用&#123;&#125;来表示文件名，也就是find前面处理过程中过滤出来的文件，用于command命令进行处理</span><br><span class="line"></span><br><span class="line">特别强调，对于不同的系统，直接使用分号可能会有不同的意义， 使用转义符 &#39;\&#39;在分号前明确说明.</span><br></pre></td></tr></table></figure></div>



<h3 id="4-17-tar-文件归档"><a href="#4-17-tar-文件归档" class="headerlink" title="4.17 tar 文件归档"></a>4.17 tar 文件归档</h3><p>选项第一字母指定要执行的操作,是必需的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c: Create创建新磁带。从头开始写,以前存于磁带上的数据会被覆盖掉</span><br><span class="line">t: Table列表。磁带上的文件名列表,当不指定文件名时,将列出所有的文件</span><br><span class="line">x: eXtract抽取。从磁带中抽取指定的文件当不指定文件名时,抽取所有文件</span><br></pre></td></tr></table></figure></div>

<p>除功能字母外的其它选项</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v: Verbose冗长。每处理一个文件,就打印出文件的文件名,并在该名前冠以功能字母</span><br><span class="line">f: file。指定设备文件名</span><br><span class="line">z: 采用压缩格式(gzip算法)</span><br><span class="line">j: 采用压缩格式(bzip2算法)</span><br></pre></td></tr></table></figure></div>

<p>例子：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打包文件</span><br><span class="line">tar -cvf xxx.tar work</span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf file.tar.gz</span><br></pre></td></tr></table></figure></div>



<h3 id="4-18-程序后台挂起与恢复"><a href="#4-18-程序后台挂起与恢复" class="headerlink" title="4.18 程序后台挂起与恢复"></a>4.18 程序后台挂起与恢复</h3><p>【转】<a href="https://blog.csdn.net/carolzhang8406/article/details/51314894" target="_blank" rel="noopener">https://blog.csdn.net/carolzhang8406/article/details/51314894</a></p>
<ol>
<li><p>linux下我们如果想一个任务或者程序还后台执行可以使用&amp;，实际上linux还提供了其他任务调度的命令。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl + z</span><br><span class="line">可以将一个正在前台执行的命令放到后台，并且暂停</span><br><span class="line"></span><br><span class="line">jobs</span><br><span class="line">查看当前有多少在后台运行的命令</span><br><span class="line"></span><br><span class="line">bg</span><br><span class="line">将一个在后台暂停的命令，变成继续执行</span><br><span class="line"></span><br><span class="line">fg</span><br><span class="line">将后台中的命令调至前台继续运行</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>nohup 命令（推荐）</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用途：不挂断地运行命令。</span><br><span class="line">语法：nohup Command [ Arg … ] [　&amp; ]</span><br><span class="line">描述：nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示”and”的符号）到命令的尾部</span><br><span class="line">---------------------------------------</span><br><span class="line">如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。 该命令的一般形式为： </span><br><span class="line">nohup conmmand &amp;</span><br><span class="line">如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：</span><br><span class="line">nohup command &gt; myout.file 2&gt;&amp;1 </span><br><span class="line">在上面的例子中，输出被重定向到myout.file文件中</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">真实例子：</span><br><span class="line">$nohup java -jar cygf-web-1.0.1.jar &gt; cygf-web-1.0.1.log 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 1617</span><br><span class="line">结束该进程：</span><br><span class="line">jobs	&#x2F;&#x2F; 找到该进程编号</span><br><span class="line">fg 1	&#x2F;&#x2F; 将该进程调回前台界面</span><br><span class="line">Ctrl+C	&#x2F;&#x2F; 结束该进程</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h3 id="4-19-crontab-定时任务"><a href="#4-19-crontab-定时任务" class="headerlink" title="4.19 crontab 定时任务"></a>4.19 crontab 定时任务</h3><p>【测试网址】<a href="http://tool.lu/crontab" target="_blank" rel="noopener">http://tool.lu/crontab</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">Linux</span><br><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- day of week (0 - 7) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line">|    |    |    +---------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line">|    |    +--------------- day of month (1 - 31)</span><br><span class="line">|    +-------------------- hour (0 - 23)</span><br><span class="line">+------------------------- minute (0 - 59)</span><br></pre></td></tr></table></figure></div>

<p><strong>使用步骤</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">*&#x2F;1 * * * * &#x2F;home&#x2F;hadoop&#x2F;tmp&#x2F;log_gen.sh</span><br></pre></td></tr></table></figure></div>





<h2 id="五、用户管理"><a href="#五、用户管理" class="headerlink" title="五、用户管理"></a>五、用户管理</h2><p>【转】<a href="https://www.cnblogs.com/dubhlinn/p/11055010.html" target="_blank" rel="noopener">https://www.cnblogs.com/dubhlinn/p/11055010.html</a></p>
<h3 id="5-1-用户-组-配置文件"><a href="#5-1-用户-组-配置文件" class="headerlink" title="5.1 用户(组)配置文件"></a>5.1 用户(组)配置文件</h3><p>/etc/passwd：用户的配置文件，存放用户信息；从左至右：用户名，密码(不显示明文)，用户id，组id，家目录，登录shell。</p>
<p><a href="https://img2018.cnblogs.com/blog/1407231/201906/1407231-20190609100036069-1817473604.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://img2018.cnblogs.com/blog/1407231/201906/1407231-20190609100036069-1817473604.png" class="lazyload"></a></p>
<p>/etc/shadow：口令的配置文件，用于存放加密口令、修改事件、失效时间等信息。</p>
<p>/etc/group：组配置文件，用于存放组名、组id。</p>
<h3 id="5-2-用户"><a href="#5-2-用户" class="headerlink" title="5.2 用户"></a>5.2 用户</h3><p>用户分类：</p>
<ul>
<li><p>普通用户</p>
</li>
<li><p>超级用户（root）</p>
</li>
</ul>
<h4 id="5-2-1-useradd-创建新用户"><a href="#5-2-1-useradd-创建新用户" class="headerlink" title="5.2.1 useradd 创建新用户"></a>5.2.1 useradd 创建新用户</h4><p>用户信息存放再/etc/passwd文件中，包括用户名和ID以及对应的home目录。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# useradd userName [-d homePath] [-g groupName]</span><br></pre></td></tr></table></figure></div>

<p>参数介绍：</p>
<p>userName：用户名</p>
<p>homePath：家目录(可选，不指定时默认为/home目录下同用户名)</p>
<p>groupName：组名(可选，不指定时默认为同用户名)</p>
<h4 id="5-2-2-passwd-更改密码"><a href="#5-2-2-passwd-更改密码" class="headerlink" title="5.2.2 passwd 更改密码"></a>5.2.2 passwd 更改密码</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd userName</span><br></pre></td></tr></table></figure></div>

<p>参数介绍：</p>
<p>userName：用户名</p>
<h4 id="5-2-3-id-查看用户信息"><a href="#5-2-3-id-查看用户信息" class="headerlink" title="5.2.3 id 查看用户信息"></a>5.2.3 id 查看用户信息</h4><p>id username</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 &#x2F;home&#x2F;wbw]$id wbw</span><br><span class="line">uid&#x3D;1000(wbw) gid&#x3D;1000(wbw) groups&#x3D;1000(wbw)</span><br></pre></td></tr></table></figure></div>

<h4 id="5-2-4-su-切换用户"><a href="#5-2-4-su-切换用户" class="headerlink" title="5.2.4 su 切换用户"></a>5.2.4 su 切换用户</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su suername</span><br></pre></td></tr></table></figure></div>

<h4 id="5-2-5-userdel-删除用户"><a href="#5-2-5-userdel-删除用户" class="headerlink" title="5.2.5 userdel 删除用户"></a>5.2.5 userdel 删除用户</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userdel [-r] username</span><br></pre></td></tr></table></figure></div>

<p>username：为要删除的用户名</p>
<p>-r：是可选项，表示同时删除该用户的家目录。一般情况下删除用户时并不需要删除他的家目录。</p>
<h3 id="5-3-组"><a href="#5-3-组" class="headerlink" title="5.3 组"></a>5.3 组</h3><p>组信息存放在 <strong>/etc/group</strong></p>
<h4 id="5-3-1-groupadd-添加组"><a href="#5-3-1-groupadd-添加组" class="headerlink" title="5.3.1 groupadd 添加组"></a>5.3.1 groupadd 添加组</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd groupName</span><br></pre></td></tr></table></figure></div>

<p>其中，groupName为要添加的组名，注意不能重复添加同名的组，如果groupName已经存在，会返回错误提示。</p>
<h4 id="5-3-2-groupdel-删除组"><a href="#5-3-2-groupdel-删除组" class="headerlink" title="5.3.2 groupdel 删除组"></a>5.3.2 groupdel 删除组</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupdel groupName</span><br></pre></td></tr></table></figure></div>

<p>其中，groupName为要添加的组名，注意如果这个组是一个或多个用户的主组，则不能删除。</p>
<h4 id="5-3-3-usermod-修改用户所属组"><a href="#5-3-3-usermod-修改用户所属组" class="headerlink" title="5.3.3 usermod 修改用户所属组"></a>5.3.3 usermod 修改用户所属组</h4><p>这个是用户的默认所属组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -g groupname userName</span><br></pre></td></tr></table></figure></div>

<p>其中，groupname为新组名，userName为要修改的用户名。</p>
<h4 id="5-3-4-usermod-修改用户家目录"><a href="#5-3-4-usermod-修改用户家目录" class="headerlink" title="5.3.4 usermod 修改用户家目录"></a>5.3.4 usermod 修改用户家目录</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -d homepath username</span><br></pre></td></tr></table></figure></div>

<p>其中homepath为新的家目录，username为要修改的用户名。</p>
<h4 id="5-3-5-gpasswd-从组中添加、移除用户"><a href="#5-3-5-gpasswd-从组中添加、移除用户" class="headerlink" title="5.3.5 gpasswd 从组中添加、移除用户"></a>5.3.5 gpasswd 从组中添加、移除用户</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gpasswd -h</span><br><span class="line">Usage: gpasswd [option] GROUP</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --add USER                add USER to GROUP</span><br><span class="line">  -d, --delete USER             remove USER from GROUP</span><br><span class="line">  -h, --help                    display this help message and exit</span><br><span class="line">  -Q, --root CHROOT_DIR         directory to chroot into</span><br><span class="line">  -r, --delete-password         remove the GROUP&#39;s password</span><br><span class="line">  -R, --restrict                restrict access to GROUP to its members</span><br><span class="line">  -M, --members USER,...        set the list of members of GROUP</span><br><span class="line">  -A, --administrators ADMIN,...</span><br></pre></td></tr></table></figure></div>

<p><strong>添加一个用户到组中</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先创建一个组</span><br><span class="line">$sudo groupadd grouping1</span><br><span class="line"># 然后将用户加入组中</span><br><span class="line">$sudo gpasswd -a TestUser grouping1</span><br><span class="line">Adding user TestUser to group grouping1</span><br><span class="line"># 查看用户状态</span><br><span class="line">$id TestUser</span><br><span class="line">uid&#x3D;1003(TestUser) gid&#x3D;1003(groupTest) groups&#x3D;1003(groupTest),1006(grouping1)</span><br></pre></td></tr></table></figure></div>

<p><strong>将用户移出组</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 移除用户从组中</span><br><span class="line">$sudo gpasswd -d TestUser grouping1</span><br><span class="line">Removing user TestUser from group grouping1</span><br><span class="line"># 查看用户状态</span><br><span class="line">$id TestUser</span><br><span class="line">uid&#x3D;1003(TestUser) gid&#x3D;1003(groupTest) groups&#x3D;1003(groupTest)</span><br></pre></td></tr></table></figure></div>



<h2 id="六、文本操作"><a href="#六、文本操作" class="headerlink" title="六、文本操作"></a>六、文本操作</h2><h3 id="6-1-重定向"><a href="#6-1-重定向" class="headerlink" title="6.1 重定向"></a>6.1 重定向</h3><p>一般情况下都为标准输入输出</p>
<ul>
<li><p>输出重定向</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &gt; filelist.txt</span><br><span class="line">ls -l &gt;&gt; filelist.txt	# 追加</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>输入重定向</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort &lt; filelist.txt</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h3 id="6-2-管道机制"><a href="#6-2-管道机制" class="headerlink" title="6.2 管道机制"></a>6.2 管道机制</h3><p>使用|符号，可以将一个程序的结果传递给下一个程序作为它的输入,这样的操作可以使我们的程序更加的灵活，例如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll | sort</span><br></pre></td></tr></table></figure></div>

<p>这个例子为将 ll 原本打印在屏幕上的内容，作为 sort 的输入。结果还是打印在屏幕上。如果配合重定向，那么可以直接写到文件中，如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ ll | sort &gt; file.txt</span><br><span class="line">[wbw@centos7 ~]$ cat file.txt </span><br><span class="line">-rw-rw-r--. 1 wbw wbw  0 Mar  5 17:45 file.txt</span><br><span class="line">-rw-rw-r--. 1 wbw wbw 58 Mar  5 17:35 filelist.txt</span><br><span class="line">total 4</span><br></pre></td></tr></table></figure></div>



<h3 id="6-3-more-amp-less"><a href="#6-3-more-amp-less" class="headerlink" title="6.3 more&amp;less"></a>6.3 more&amp;less</h3><p>可以查看文本，以及一些快捷操作。类似一个文本查看器。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></table></figure></div>

<p>帮助：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Most commands optionally preceded by integer argument k.  Defaults in brackets.</span><br><span class="line">Star (*) indicates argument becomes new default.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">&lt;space&gt;                 Display next k lines of text [current screen size]</span><br><span class="line">z                       Display next k lines of text [current screen size]*</span><br><span class="line">&lt;return&gt;                Display next k lines of text [1]*</span><br><span class="line">d or ctrl-D             Scroll k lines [current scroll size, initially 11]*</span><br><span class="line">q or Q or &lt;interrupt&gt;   Exit from more</span><br><span class="line">s                       Skip forward k lines of text [1]</span><br><span class="line">f                       Skip forward k screenfuls of text [1]</span><br><span class="line">b or ctrl-B             Skip backwards k screenfuls of text [1]</span><br><span class="line">&#39;                       Go to place where previous search started</span><br><span class="line">&#x3D;                       Display current line number</span><br><span class="line">&#x2F;&lt;regular expression&gt;   Search for kth occurrence of regular expression [1]</span><br><span class="line">n                       Search for kth occurrence of last r.e [1]</span><br><span class="line">!&lt;cmd&gt; or :!&lt;cmd&gt;       Execute &lt;cmd&gt; in a subshell</span><br><span class="line">v                       Start up &#x2F;usr&#x2F;bin&#x2F;vi at current line</span><br><span class="line">ctrl-L                  Redraw screen</span><br><span class="line">:n                      Go to kth next file [1]</span><br><span class="line">:p                      Go to kth previous file [1]</span><br><span class="line">:f                      Display current file name and line number</span><br><span class="line">.                       Repeat previous command</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></div>



<h3 id="6-4-cat-amp-od"><a href="#6-4-cat-amp-od" class="headerlink" title="6.4 cat &amp; od"></a>6.4 cat &amp; od</h3><p>cat：文本格式打印</p>
<ul>
<li>-n：行号</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ cat nums.txt </span><br><span class="line">123456</span><br></pre></td></tr></table></figure></div>



<p>od：逐字节打印</p>
<ul>
<li>-c、-t c、-t x1、-t d1、-t u1</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ od -t x1 file.txt </span><br><span class="line">0000000 2d 72 77 2d 72 77 2d 72 2d 2d 2e 20 31 20 77 62</span><br><span class="line">0000020 77 20 77 62 77 20 20 30 20 4d 61 72 20 20 35 20</span><br><span class="line">0000040 31 37 3a 34 35 20 66 69 6c 65 2e 74 78 74 0a 2d</span><br><span class="line">0000060 72 77 2d 72 77 2d 72 2d 2d 2e 20 31 20 77 62 77</span><br><span class="line">0000100 20 77 62 77 20 35 38 20 4d 61 72 20 20 35 20 31</span><br><span class="line">0000120 37 3a 33 35 20 66 69 6c 65 6c 69 73 74 2e 74 78</span><br><span class="line">0000140 74 0a 74 6f 74 61 6c 20 34 0a</span><br></pre></td></tr></table></figure></div>



<h3 id="6-5-echo"><a href="#6-5-echo" class="headerlink" title="6.5 echo"></a>6.5 echo</h3><p>echo：输入什么就打印什么。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ echo 123456</span><br><span class="line">123456</span><br></pre></td></tr></table></figure></div>

<p>通常echo配合重定向，快速向文本文件添加信息：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ echo 123456 &gt; nums.txt</span><br><span class="line">[wbw@centos7 ~]$ cat nums.txt </span><br><span class="line">123456</span><br></pre></td></tr></table></figure></div>

<p>还可以进行追加：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ echo append &gt;&gt; nums.txt</span><br><span class="line">[wbw@centos7 ~]$ cat nums.txt </span><br><span class="line">123456</span><br><span class="line">append</span><br></pre></td></tr></table></figure></div>



<h3 id="6-6-head-amp-tail-显示文件头尾"><a href="#6-6-head-amp-tail-显示文件头尾" class="headerlink" title="6.6 head &amp; tail 显示文件头尾"></a>6.6 head &amp; tail 显示文件头尾</h3><p>显示文件前（后）N行信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head -n 15 ab.c		# 显示ab.c文件前15行</span><br><span class="line">tail -n 15 ab.c</span><br></pre></td></tr></table></figure></div>

<p>实时打印文件尾部被追加的内容（一般可以用来查看实时日志）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f debug.txt</span><br></pre></td></tr></table></figure></div>



<h3 id="6-7-tee-抄送"><a href="#6-7-tee-抄送" class="headerlink" title="6.7 tee 抄送"></a>6.7 tee 抄送</h3><p>tee：将从标准输入的数据抄送到标准输出，同时存入磁盘文件。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;myap | tee myap.log</span><br></pre></td></tr></table></figure></div>



<h3 id="6-8-wc-字计数"><a href="#6-8-wc-字计数" class="headerlink" title="6.8 wc 字计数"></a>6.8 wc 字计数</h3><p>wc：字计数，可以看文件有多少行数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看file.txt文件的行数</span><br><span class="line">[wbw@centos7 ~]$ wc -l file.txt </span><br><span class="line">3 file.txt</span><br><span class="line"># 查看有多少个进程数</span><br><span class="line">[wbw@centos7 ~]$ ps -ef | wc -l</span><br><span class="line">119</span><br></pre></td></tr></table></figure></div>



<h3 id="6-9-sort-排序"><a href="#6-9-sort-排序" class="headerlink" title="6.9 sort 排序"></a>6.9 sort 排序</h3><p>sort：排序</p>
<p>具体使用情况用man查看。</p>
<h3 id="6-10-tr-翻译字符"><a href="#6-10-tr-翻译字符" class="headerlink" title="6.10 tr 翻译字符"></a>6.10 tr 翻译字符</h3><p>tr：翻译字符</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tr string1 string2</span><br></pre></td></tr></table></figure></div>

<p>将标准输入拷贝到标准输出，string1中出现的字符替换成string2中的对应字符，如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 ~]$ cat file.txt </span><br><span class="line">-rw-rw-r--. 1 wbw wbw  0 Mar  5 17:45 file.txt</span><br><span class="line">-rw-rw-r--. 1 wbw wbw 58 Mar  5 17:35 filelist.txt</span><br><span class="line">total 4</span><br><span class="line">[wbw@centos7 ~]$ cat file.txt | tr file FILE</span><br><span class="line">-rw-rw-r--. 1 wbw wbw  0 Mar  5 17:45 FILE.txt</span><br><span class="line">-rw-rw-r--. 1 wbw wbw 58 Mar  5 17:35 FILELIst.txt</span><br><span class="line">totaL 4</span><br></pre></td></tr></table></figure></div>



<h3 id="6-11-正则表达式相关命令"><a href="#6-11-正则表达式相关命令" class="headerlink" title="6.11 正则表达式相关命令"></a>6.11 正则表达式相关命令</h3><h4 id="6-11-1-正则表达式"><a href="#6-11-1-正则表达式" class="headerlink" title="6.11.1 正则表达式"></a>6.11.1 正则表达式</h4><p>【菜鸟教程】<a href="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">https://www.runoob.com/regexp/regexp-syntax.html</a></p>
<h4 id="6-11-2-grep"><a href="#6-11-2-grep" class="headerlink" title="6.11.2 grep"></a>6.11.2 grep</h4><ul>
<li>-n：显示时每行前面显示行号</li>
<li>-v：显示所有不包含模式的行</li>
<li>-i：字符比较时忽略字母的大小写</li>
</ul>
<h4 id="6-11-3-sed"><a href="#6-11-3-sed" class="headerlink" title="6.11.3 sed"></a>6.11.3 sed</h4><blockquote>
<p>sed -e ‘s/被替换的内容/替换后的内容/g’</p>
</blockquote>
<ol>
<li><p>替换操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat hh.txt | sed [-e &#39;s&#x2F;被替换的字符串&#x2F;目标字符串&#x2F;g&#39;]</span><br><span class="line">------------------</span><br><span class="line">g : 一行里面全部</span><br><span class="line">[] : 可以接着多个替换操作</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -e &#39;s&#x2F;.*\([0-9][0-9]*\)万&#x2F;\1&#x2F;g&#39;</span><br><span class="line">------------------</span><br><span class="line">\(.......\) 里面的内容看成一个整体与\1对应。即两者值相同。如果有多个，\2\3\4依此下去</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h4 id="6-11-4-awk"><a href="#6-11-4-awk" class="headerlink" title="6.11.4 awk"></a>6.11.4 awk</h4><blockquote>
<p>awk 的一般语法如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;# awk &#39;script&#39; filename</span><br></pre></td></tr></table></figure></div>

<p>此处 <code>&#39;script&#39;</code> 是一个由 awk 可以理解并应用于 filename 的命令集合。</p>
<p>它通过读取文件中的给定行，复制该行的内容并在该行上执行脚本的方式工作。这个过程会在该文件中的所有行上重复。</p>
<p>该脚本 <code>&#39;script&#39;</code> 中内容的格式是 <code>&#39;/pattern/ action&#39;</code>，其中 <code>pattern</code> 是一个正则表达式，而 <code>action</code> 是当 awk 在该行中找到此模式时应当执行的动作用{}括起来。</p>
</blockquote>
<ol>
<li><p>用法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;程序&#39; 文件名列表</span><br><span class="line">awk -f 程序文件名 文件名列表</span><br><span class="line">程序	条件	&#123;动作&#125;</span><br><span class="line">awk自动对每行文本执行条件判断，满足条件执行动作（内循环）</span><br><span class="line">多段程序间用空格或分号隔开</span><br><span class="line"></span><br><span class="line">也可以用重定向流的方式给数据</span><br><span class="line">ls -s | awk ....</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>处理方式</p>
<ul>
<li><p>输入文件的每行作为一个“记录”，变量NR就是行号</p>
</li>
<li><p>每行用空格分隔开的部分，叫做记录的“域”</p>
<p>内置变量$1是第一域的内容，依次$2、$3</p>
</li>
<li><p>awk的处理为：符合条件的行，执行相应的动作</p>
<ul>
<li>条件1：C语言的逻辑关系表达式，&lt;&gt;=!|&amp;</li>
<li>条件2：正则表达式 /regexpr/</li>
<li>特殊条件：<ul>
<li>不指定任何条件，默认对所有文本执行动作</li>
<li>BEGIN：处理文本前执行的动作</li>
<li>END：之后</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动作</p>
<ul>
<li><p>自定义变量</p>
</li>
<li><p>加减等算术逻辑运算</p>
</li>
<li><p>正则表达式匹配运算（用作条件判断） ~    !~</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$2 ~ &quot;[1-9][0-9]*&quot;</span><br><span class="line">表示第二个域要匹配后面的正则表达式</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>流程控制：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if</span><br><span class="line">for</span><br><span class="line">print 变量 变量</span><br><span class="line">printf(&quot;%s&quot;, $2)	类C语言</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ol>
<p>   推荐：<a href="https://www.cnblogs.com/ftl1012/p/9250541.html" target="_blank" rel="noopener">https://www.cnblogs.com/ftl1012/p/9250541.html</a></p>
<h3 id="6-12-vi-编辑器"><a href="#6-12-vi-编辑器" class="headerlink" title="6.12 vi 编辑器"></a>6.12 vi 编辑器</h3><p>注意：vi命令状态下的按键命令没有回显</p>
<ol>
<li><p>配置（也可以直接修改配置文件）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set number		显示行号</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>光标单字符移动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5h		光标左移5列</span><br><span class="line">6j		光标下移6行</span><br><span class="line">23k		光标上移23行</span><br><span class="line">10l		光标右移10列</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>行首行尾</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl-b		向后翻页（PgDn）</span><br><span class="line">Ctrl-f		向前翻页（PgUp）</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>快速移动</p>
<ul>
<li><p>行首行尾</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^		行首</span><br><span class="line">$		行尾</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>移动一个单词</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">w		右移</span><br><span class="line">b		左移</span><br><span class="line">也可以前面跟数字 5w  6b</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>移动指定行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:256 + 回车		定位到256行</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>删除命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x		删除光标处字符</span><br><span class="line">dd		删除当前行</span><br><span class="line">3dd		删除当前行开始的3行</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>字符替换 r</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ra		当前光标字符替换为a</span><br><span class="line">rarbrc	当前光标位置替换为abc</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>撤销（undo）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重复上次操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>存盘</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZZ &lt;&#x3D;&#x3D;&gt; :wq		保存退出</span><br><span class="line">:W				仅保存</span><br><span class="line">:q!				退出不保存</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>文件操作</p>
<ul>
<li><p>读入文件xyz.c插入到当前行下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:r xyz.c</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>写文件，把第50行至行尾的内容写到文件file1中（可以用在编辑了半天文件，发现没有权限修改时候用）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:50,$w file1</span><br><span class="line">:50,$w! file1		强制覆盖</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>剪贴板</p>
<ul>
<li><p>删除，并拷贝到剪贴板</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:10,50d		删除第10-50行</span><br><span class="line">:1,.d		删除文件首至当前行的部分</span><br><span class="line">:,$d		删除当前行至文件尾</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>不删除，仅拷贝</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:10,50y</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>粘贴剪贴板</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>查找</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;pattern</span><br><span class="line">例子：&#x2F;[0-9][0-9]*</span><br><span class="line">----------------------</span><br><span class="line">n		向下继续查找</span><br><span class="line">N		向上查找</span><br><span class="line">循环模式，当到达文件尾时，返回文件头继续搜索</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>替换</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:n1,n2s&#x2F;pattern&#x2F;string&#x2F;g</span><br><span class="line">例子：</span><br><span class="line">:1,50s&#x2F;abc&#x2F;xyz&#x2F;		仅替换一次</span><br><span class="line">:1,50s&#x2F;abc&#x2F;xyz&#x2F;g	替换所有</span><br><span class="line">:50,80s&#x2F;^&#x2F;    &#x2F;		右移4列</span><br><span class="line">:50,80s&#x2F;^    &#x2F;&#x2F;		左移4列</span><br><span class="line">:1,$s&#x2F; *$&#x2F;&#x2F;			消除尾巴多余的空格</span><br><span class="line">--------------------</span><br><span class="line">注意：编辑c文件的时候要小心s&#x2F;a[i]&#x2F;b[j]&#x2F;g 这里只匹配ai,也不能把s&#x2F;a*b&#x2F;x+y&#x2F;g。需要用转移字符\</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>其他操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">J		行合并，当前行以及下一行合并</span><br><span class="line">Ctrl-l	刷新屏幕（防止其他程序打印消息打乱文件内容）</span><br><span class="line">Cirl-g	打印当前文件的名字，总行数，当前行号，文件是否被修改等信息</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="七、文件目录管理"><a href="#七、文件目录管理" class="headerlink" title="七、文件目录管理"></a>七、文件目录管理</h2><h3 id="7-1-文件信息"><a href="#7-1-文件信息" class="headerlink" title="7.1 文件信息"></a>7.1 文件信息</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：$ls -l arg</span><br><span class="line">-rw-rw-r--. 1 wbw wbw  390 Feb 26 21:09 anthorized_keys</span><br><span class="line">drwxrwxr-x. 5 wbw wbw 4096 Mar 29 16:47 downloads</span><br><span class="line">1rwxrwxrwx. 1 root sys 11 Jul 11 07: 31 unix-&gt;&#x2F;stand&#x2F;unix</span><br><span class="line">crw-r--r--. 1 bin ter 0, 9 Oct 18 09: 56 &#x2F;dev&#x2F;tty10</span><br><span class="line">prw-r--r--. 1 root sys 2642 ct1811:07 &#x2F;tmp&#x2F;pipe</span><br><span class="line"></span><br><span class="line">第1列:文件属性</span><br><span class="line">    ◆第1字符为文件类型</span><br><span class="line">        * -普通文件</span><br><span class="line">        * b块设备文件(Block)</span><br><span class="line">        * d目录文件(Dir)</span><br><span class="line">        * c字符设备文件(char)</span><br><span class="line">        * l符号连接文件(Link)</span><br><span class="line">        * p命名管道文件(Pipe)</span><br><span class="line">    ◆后面9个字符为文件的访问权限(rwx-读权限,写权限,可执行权限,无权限)</span><br><span class="line">    	* 2-4字符:文件所有者对文件的访问权限</span><br><span class="line">		* 5-7字符:同组用户对文件的访问权限</span><br><span class="line">		* 8-10字符:其它用户对文件的访问权限</span><br><span class="line">第2列:文件link数,涉及到此文件的目录项数</span><br><span class="line">第3列,第4列:文件所有者的名字和组名</span><br><span class="line">第5列：</span><br><span class="line">    ◆普通磁盘文件:列出文件大小(字节数)</span><br><span class="line">    ◆目录:列出目录表大小,不是目录下文件长度和</span><br><span class="line">    ◆符号连接文件:列出符号连接文件自身的长度</span><br><span class="line">    ◆字符设备和块设备文件:列出主设备号和次设备号</span><br><span class="line">第6列:文件最后一次被修改的日期和时间</span><br><span class="line">第7列：文件名</span><br></pre></td></tr></table></figure></div>



<h3 id="7-2-文件比较"><a href="#7-2-文件比较" class="headerlink" title="7.2 文件比较"></a>7.2 文件比较</h3><ul>
<li><p>MD5</p>
</li>
<li><p>SHA-1</p>
</li>
<li><p>diff 求出两个文件的差别</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diff file1 file2</span><br><span class="line">diff -u file1 file2  (-u后面跟数字表示，打印多少行一样的)</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h3 id="7-3-文件权限管理"><a href="#7-3-文件权限管理" class="headerlink" title="7.3 文件权限管理"></a>7.3 文件权限管理</h3><h4 id="7-3-1-chown-修改所有者"><a href="#7-3-1-chown-修改所有者" class="headerlink" title="7.3.1 chown 修改所有者"></a>7.3.1 chown 修改所有者</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown [-R] username source</span><br></pre></td></tr></table></figure></div>

<p>其中，username为修改后的用户名，source为文件或目录的路径名称，-R表示级联修改目录下面的子目录和文件的所有者。</p>
<h4 id="7-3-2-chgrp-修改所在组"><a href="#7-3-2-chgrp-修改所在组" class="headerlink" title="7.3.2 chgrp 修改所在组"></a>7.3.2 chgrp 修改所在组</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp [-R] groupname source</span><br></pre></td></tr></table></figure></div>

<p>其中，groupname为修改后的组名，source为文件或目录的路径名称，-R表示级联修改目录下面的子目录和文件的所在组。注意修改文件的所有者和所在组是相互独立的事件，互不影响。</p>
<h4 id="7-3-3-同时修改所有者和所在组"><a href="#7-3-3-同时修改所有者和所在组" class="headerlink" title="7.3.3 同时修改所有者和所在组"></a>7.3.3 同时修改所有者和所在组</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown [-R] username:groupname source</span><br></pre></td></tr></table></figure></div>

<p>其中，username为修改后的用户名，groupname为修改后的组名，source为文件或目录的路径名称，-R表示级联修改目录下面的子目录和文件的所在组。这里的用户和组没有必然联系，即username不一定要属于groupname的那个组。</p>
<h4 id="7-3-4-chmod-修改文件权限"><a href="#7-3-4-chmod-修改文件权限" class="headerlink" title="7.3.4 chmod 修改文件权限"></a>7.3.4 chmod 修改文件权限</h4><p><strong>(1) 使用权限代码赋值</strong></p>
<p>chmod role1=auth source</p>
<p>其中，role为角色代码，可以设置其中的一个或多个，多个角色之间用逗号(,)分隔且不能有空格，其取值范围如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u-文件或目录的所有者；</span><br><span class="line">g-文件或目录所在组的用户；</span><br><span class="line">o-其他用户；</span><br><span class="line">a-所有用户，包含u、g、o，只能单独使用。</span><br></pre></td></tr></table></figure></div>

<p>auth为权限码组合，例如读写执行权限为rwx，读和执行权限为rx，写权限为w，根据需要选择。</p>
<p>source为文件或目录的路径名称。</p>
<p>下面是几个实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;rx &#x2F;home&#x2F;dubhlinn</span><br><span class="line">chmod o&#x3D;r &#x2F;home&#x2F;dubhlinn&#x2F;description.txt</span><br><span class="line">chmod a&#x3D;rwx &#x2F;home&#x2F;public</span><br></pre></td></tr></table></figure></div>



<p><strong>(2) 使用加减号添加或减少权限</strong></p>
<p>chmod role+auth source</p>
<p>chmod role-auth source</p>
<p>role、auth、source的含义同上，同样可以设置一个或多个角色，以下是几个实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u-x,g+rw &#x2F;home&#x2F;dubhlinn&#x2F;description.txt</span><br><span class="line">chmod a+w &#x2F;home&#x2F;public</span><br><span class="line">chmod u+rwx,g-x,o-x &#x2F;home&#x2F;dubhlinn</span><br></pre></td></tr></table></figure></div>



<p><strong>(3) 使用数字赋值</strong></p>
<p>chmod xyz source</p>
<p>其中，x、y、z是三个数字，分别表示文件或目录的所有者、所在组的用户、其他组的用户的”权限值”。</p>
<p>权限值是这样计算的：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r&#x3D;4</span><br><span class="line">w&#x3D;2</span><br><span class="line">x&#x3D;1</span><br></pre></td></tr></table></figure></div>

<p>将这个用户的权限代码对应的数字加起来就是”权限值”，所以其取值范围可能是0、1、2、3、4、5、6、7。</p>
<p>例如:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 754 &#x2F;home&#x2F;void </span><br><span class="line">等价于</span><br><span class="line">chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;r &#x2F;home&#x2F;void</span><br></pre></td></tr></table></figure></div>



<h3 id="7-4-STICKY-粘着位-防删除"><a href="#7-4-STICKY-粘着位-防删除" class="headerlink" title="7.4 STICKY 粘着位(防删除)"></a>7.4 STICKY 粘着位(防删除)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drwxrwxrwt.  33 root root 4096 Apr 22 14:02 tmp</span><br></pre></td></tr></table></figure></div>

<p>目录有写权限并且带STICKY属性，此目录下的文件仅文件主可以删除，其他用户删除操作会失败。</p>
<h3 id="7-5-SUID"><a href="#7-5-SUID" class="headerlink" title="7.5 SUID"></a>7.5 SUID</h3><p>【转】<a href="https://www.jianshu.com/p/71acd8dad454" target="_blank" rel="noopener">https://www.jianshu.com/p/71acd8dad454</a></p>
<p>一个进程如果没有SUID或SGID位，则euid=uid egid=gid，分别是运行这个程序的用户的uid和gid。例如kevin用户的uid和gid分别为204和202，foo用户的uid和gid为200，201，kevin运行myfile程序形成的进程的euid=uid=204，egid=gid=202，内核根据这些值来判断进程对资源访问的限制，其实就是kevin用户对资源访问的权限，和foo没关系。</p>
<p>如果一个程序设置了SUID，则euid和egid变成被运行的程序的所有者的uid和gid，例如kevin用户运行myfile，euid=200，egid=201，uid=204，gid=202，则这个进程具有它的属主foo的资源访问权限。</p>
<p>SUID的作用就是这样：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。passwd就是一个很鲜明的例子。</p>
<h2 id="八、网络管理"><a href="#八、网络管理" class="headerlink" title="八、网络管理"></a>八、网络管理</h2><h3 id="8-1-ip-addr-IP配置信息"><a href="#8-1-ip-addr-IP配置信息" class="headerlink" title="8.1 ip addr IP配置信息"></a>8.1 ip addr IP配置信息</h3><ol>
<li><p>配置联网</p>
<ul>
<li><p>查看当前网卡名称 (ip addr)</p>
<p><a href="/postImages/IPADDR.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/IPADDR.png" class="lazyload"></a></p>
</li>
<li><p>进入网络配置文件的目录(cd /etc/sysconfig/network-scripts) (ls)</p>
</li>
<li><p>编辑网络配置文件(vi ifcfg-ens33)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改配置文件：</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">添加：</span><br><span class="line">IPADDR&#x3D;本机IP</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;NAT模式网关IP</span><br><span class="line">DNS1&#x3D;8.8.8.8</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>再重新启动网络配置(service network restart)</p>
</li>
<li><p>测试网络是否畅通(本地PING 虚拟机IP，虚拟机ping外网)</p>
</li>
</ul>
</li>
</ol>
<h3 id="8-2-ping-计算机连通性"><a href="#8-2-ping-计算机连通性" class="headerlink" title="8.2 ping 计算机连通性"></a>8.2 ping 计算机连通性</h3><p>测试本机与网络中其他计算机的连通性。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ping wangbowen.cn</span><br><span class="line">PING wangbowen.cn (47.107.232.108) 56(84) bytes of data.</span><br><span class="line">64 bytes from 47.107.232.108 (47.107.232.108): icmp_seq&#x3D;1 ttl&#x3D;128 time&#x3D;24.0 ms</span><br><span class="line">64 bytes from 47.107.232.108 (47.107.232.108): icmp_seq&#x3D;2 ttl&#x3D;128 time&#x3D;22.6 ms</span><br><span class="line">64 bytes from 47.107.232.108 (47.107.232.108): icmp_seq&#x3D;3 ttl&#x3D;128 time&#x3D;23.1 ms</span><br></pre></td></tr></table></figure></div>



<h3 id="8-3-netstat-网络-端口-状态"><a href="#8-3-netstat-网络-端口-状态" class="headerlink" title="8.3 netstat 网络(端口)状态"></a>8.3 netstat 网络(端口)状态</h3><ol>
<li><p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y net-tools</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ netstat</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看端口占用情况</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ netstat -lntp</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="8-4-hostname-hosts-主机名、映射"><a href="#8-4-hostname-hosts-主机名、映射" class="headerlink" title="8.4 hostname/hosts 主机名、映射"></a>8.4 hostname/hosts 主机名、映射</h3><ol>
<li><p>更改主机名</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hostname</span><br><span class="line">将里面的内容替换为需要的主机名</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置主机名(域名)映射文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line">新增：</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">192.168.xxx.xxx XXX</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="8-5-firewalld-防火墙"><a href="#8-5-firewalld-防火墙" class="headerlink" title="8.5 firewalld 防火墙"></a>8.5 firewalld 防火墙</h3><ol>
<li><p>服务的启动与关闭</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable firewalld.service	&#x2F;&#x2F;&quot;开机启动&quot;启用</span><br><span class="line">systemctl disable firewalld.service	&#x2F;&#x2F;&quot;开机自启&quot;禁用</span><br><span class="line">systemctl start firewalld.service	&#x2F;&#x2F;启动防火墙</span><br><span class="line">systemctl stop firewalld.service	&#x2F;&#x2F;停止防火墙</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重新加载配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看状态</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service	&#x2F;&#x2F;查看防火墙状态</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看所有配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看当前开放的端口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --list-ports</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看某个端口是否开放</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --query-port&#x3D;80&#x2F;tcp</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开放指定端口</p>
<p>以开放80端口为例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>移除端口</p>
<p>以开放80端口为例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --remove-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看允许指定IP访问的端口规则</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --list-rich-rules</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开放指定端口（只允许指定IP访问）</p>
<p>以“只允许192.168.1.1的主机连接3306端口”为例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-rich-rule&#x3D;&quot;rule family&#x3D;&quot;ipv4&quot; source address&#x3D;&quot;192.168.1.1&quot; port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;3306&quot; accept&quot; --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>移除端口（只允许指定IP访问）</p>
<p>以“移除只允许192.168.1.1的主机连接3306端口”为例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --remove-rich-rule&#x3D;&quot;rule family&#x3D;&quot;ipv4&quot; source address&#x3D;&quot;192.168.1.1&quot; port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;3306&quot; accept&quot; --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="九、程序命令"><a href="#九、程序命令" class="headerlink" title="九、程序命令"></a>九、程序命令</h2><h3 id="9-1-运行时获取信息方式"><a href="#9-1-运行时获取信息方式" class="headerlink" title="9.1 运行时获取信息方式"></a>9.1 运行时获取信息方式</h3><ol>
<li><p>配置文件</p>
<p>一般较复杂的程序会提供配置文件以存储配置信息或者偏好配置信息，分为系统级偏好设置和用户级偏好设置。</p>
</li>
</ol>
<p>   例如 bash 的 <strong>/etc/profile</strong> 和 <strong>~.bash_profile</strong> </p>
<p>   配置文件提供了灵活性(同一个程序文件因用户不同读取的配置文件不同而表现不同),变更这些信息不很方便,一般不需要变化的配置信息或选项信息存入配置文件,持久化存储</p>
<ol start="2">
<li><p>环境变量</p>
<p>命令env可以打印出当前的环境变量。</p>
<p>一般是些与“环境”相关的配置或选项信息,信息量不大。这些选择在一段时间内反复使用同一个命令或者不同命令时保持不变。</p>
<p>虽然运行的程序(可执行文件)是完全相同的一个文件,程序通过获得环境变量感知环境的不同,控制自己的行为。</p>
<p>性能问题：比读取配置文件需要的系统开支要小。（但是越来越多的用配置文件）</p>
</li>
<li><p>命令行参数（三种风格）</p>
<ul>
<li><p>类似find和gcc的风格（gcc -O0 -Wall -c shudu.c）</p>
</li>
<li><p>类似dd命令风格（dd if=/dev/urandom of=test.dat）</p>
</li>
<li><p>类似ls和grep风格（现今流行）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls --classify --all --site --human-readable --width&#x3D;80 &#x2F;home&#x2F;jiang长选项</span><br><span class="line">ls -Fashw80 &#x2F;home&#x2F;jiang   多个选项挤在一起</span><br><span class="line">ls -F -a -s -h -w 80 &#x2F;home&#x2F;jiang  多个选项分开</span><br><span class="line">ls -F -w80 &#x2F;home&#x2F;jiang -has  可以把选项放到后面</span><br><span class="line">用独立的命令行参数--显式地标识选项结束</span><br><span class="line">选项的处理统一由C语言标准动态链接库libc.so中库 getopt函数_long()完成</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>人机交互方式（Linux很少用）如C语言的scanf</p>
</li>
</ol>
<h3 id="9-2-启动-bash"><a href="#9-2-启动-bash" class="headerlink" title="9.2 启动 bash"></a>9.2 启动 bash</h3><p><strong>自动执行的一批命令</strong></p>
<p><strong>用户偏好</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@centos7 &#x2F;home&#x2F;wbw]$ls -al</span><br><span class="line">total 48</span><br><span class="line">drwx------. 15 wbw  wbw  4096 Apr 22 13:09 .</span><br><span class="line">drwxr-xr-x.  5 root root   45 Mar 20 22:17 ..</span><br><span class="line">-rw-------.  1 wbw  wbw  2663 Apr 16 23:36 .bash_history</span><br><span class="line">-rw-r--r--.  1 wbw  wbw    18 Aug  8  2019 .bash_logout</span><br><span class="line">-rw-r--r--.  1 wbw  wbw   193 Aug  8  2019 .bash_profile</span><br><span class="line">-rw-r--r--.  1 wbw  wbw   258 Mar 11 23:56 .bashrc</span><br></pre></td></tr></table></figure></div>

<ul>
<li>当bash作为注册shell被启动时：自动执行用户主目录下的 <strong>.bash_profile</strong></li>
<li>退出时： <strong>.bash_logout</strong></li>
<li>交互式： <strong>.bashrc</strong></li>
</ul>
<p><strong>系统级</strong></p>
<ul>
<li>注册shell（启动时）：/etc/profile</li>
<li>交互式shell：/etc/bash.bashrc</li>
<li>注册shell（退出时）：/etc/bash.bash.logou</li>
</ul>
<h3 id="9-3-Shell-编程"><a href="#9-3-Shell-编程" class="headerlink" title="9.3 Shell 编程"></a>9.3 Shell 编程</h3><h4 id="9-3-1-变量"><a href="#9-3-1-变量" class="headerlink" title="9.3.1 变量"></a>9.3.1 变量</h4><ul>
<li><p>变量名和等号之间不能有空格。</p>
</li>
<li><p>不能使用bash里的关键字（可用help命令查看保留关键字）</p>
</li>
</ul>
<p><strong>赋值（定义变量）</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">addr=1.1.1.1</span><br></pre></td></tr></table></figure></div>

<p><strong>引用（使用变量）</strong></p>
<p>使用一个定义过的变量，只要在变量名前面加美元符号即可。但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符。</p>
<p>命令行中有$符号的变量引用，会先被完成替换。</p>
<p>引用未定义的变量，变量值为空字符串。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">addr 或 <span class="variable">$&#123;addr&#125;</span></span></span><br></pre></td></tr></table></figure></div>

<p><strong>只读变量</strong></p>
<p> 使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">myUrl="http://www.google.com"</span><br><span class="line">readonly myUrl</span><br></pre></td></tr></table></figure></div>

<p><strong>删除变量</strong></p>
<p>使用 unset 命令可以删除变量。语法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure></div>

<p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p>
<h4 id="9-3-2-命令替换"><a href="#9-3-2-命令替换" class="headerlink" title="9.3.2 命令替换"></a>9.3.2 命令替换</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">now=`date`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以date命令的stdout替换`date`</span></span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-3-位置参数"><a href="#9-3-3-位置参数" class="headerlink" title="9.3.3 位置参数"></a>9.3.3 位置参数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">0		<span class="comment"># 脚本文件本身的名字</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">1 <span class="variable">$2</span>	<span class="comment"># 第一个命令行参数、第二个命令行参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#		# 命令行参数的个数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">*		<span class="comment"># 等同于 "$1 $2 ..."，把所有参数连在一起的字符串</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@		<span class="comment"># 等同于 "$1" "$2" ...，用于把变长的命令行参数传递给其他命令</span></span></span><br><span class="line">shift	# 左移，即丢弃第一个参数，第二个参数代替第一个参数。以此类推</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-4-字符串"><a href="#9-3-4-字符串" class="headerlink" title="9.3.4 字符串"></a>9.3.4 字符串</h4><p><strong>单引号</strong></p>
<p>单引号字符串的限制：</p>
<ul>
<li><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p>
</li>
<li><p>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为<strong>字符串拼接</strong>使用。</p>
<p>示例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印：Don<span class="string">'t remvoe dir "C:\PETER"!</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">'Don'</span>\<span class="string">''</span>t remove dir <span class="string">"C:\PETER"</span><span class="string">'</span></span></span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<p><strong>双引号</strong></p>
<p>除$和`外特殊字符的特殊含义被取消，用于替换。需要转义的有：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&quot;</span><br><span class="line">\$</span><br><span class="line">\&#39;</span><br><span class="line">\\</span><br></pre></td></tr></table></figure></div>

<p><strong>字符串长度</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></figure></div>

<p><strong>子字符串</strong></p>
<p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string="runoob is a great site"</span><br><span class="line">echo $&#123;string:1:4&#125; # 输出 unoo</span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong>：第一个字符的索引值为 <strong>0</strong>。</p>
<h4 id="9-3-5-数组"><a href="#9-3-5-数组" class="headerlink" title="9.3.5 数组"></a>9.3.5 数组</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">my_array=(A B "C" D)</span><br><span class="line"></span><br><span class="line">echo "第一个元素为: $&#123;my_array[0]&#125;"</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-6-注释"><a href="#9-3-6-注释" class="headerlink" title="9.3.6 注释"></a>9.3.6 注释</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .....</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-7-流程控制"><a href="#9-3-7-流程控制" class="headerlink" title="9.3.7 流程控制"></a>9.3.7 流程控制</h4><p>可以用 [ ] 来作为一个条件判断！？</p>
<p>命令组合的两种方式：</p>
<ul>
<li>{ list;}  ：<ul>
<li>在当前shell中执行一组命令。</li>
<li>左花括号后必须有一个空格！</li>
<li>多行并为一行一定要注意有分号</li>
</ul>
</li>
<li>(list)     ：在子shell中执行一组命令</li>
</ul>
<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><p>test 文件特性检查</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test -t &#x2F;etc&#x2F;motd		# 判断该文件是否可读可执行</span><br><span class="line">[ -r &#x2F;etc&#x2F;mortd ]		# [是一个命令，要有空格</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">-f：普通文件</span><br><span class="line">-d：目录文件</span><br><span class="line">-r：可读</span><br><span class="line">-w：可写</span><br><span class="line">-x：可执行</span><br><span class="line">-s：size&gt;0</span><br></pre></td></tr></table></figure></div>



<p>字符串的比较</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注意！一定要在等号左右加空格</span><br><span class="line">str1 &#x3D; str2</span><br><span class="line">str1 !&#x3D; str2</span><br></pre></td></tr></table></figure></div>



<p>整数的比较</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-eq		&#x3D;</span><br><span class="line">-ne		!&#x3D;</span><br><span class="line">-gt		&gt;</span><br><span class="line">-ge		&gt;&#x3D;</span><br><span class="line">-lt		&lt;</span><br><span class="line">-le		&lt;&#x3D;</span><br></pre></td></tr></table></figure></div>



<p>复合条件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!	:NOT（非）</span><br><span class="line">-o	:OR（或）</span><br><span class="line">-a	:AND（与）</span><br></pre></td></tr></table></figure></div>



<h5 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h5><p><strong>if</strong></p>
<p>if 语句语法格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p>写成一行（适用于终端命令提示符）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi</span><br></pre></td></tr></table></figure></div>

<p>末尾的fi就是if倒过来拼写，后面还会遇到类似的。</p>
<p><strong>TIP：</strong>有时候为了图方便也可以这样</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ true ] &amp;&amp; command</span><br><span class="line">如果条件正确，执行command</span><br></pre></td></tr></table></figure></div>



<p><strong>if else</strong></p>
<p>if else 语法格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p><strong>if else-if else</strong></p>
<p>if else-if else 语法格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p>以下实例判断两个变量是否相等：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;10</span><br><span class="line">b&#x3D;20</span><br><span class="line">if [ $a &#x3D;&#x3D; $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 等于 b&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 大于 b&quot;</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;没有符合的条件&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a 小于 b</span><br></pre></td></tr></table></figure></div>

<p>if else语句经常与test命令结合使用，如下所示：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num1&#x3D;$[2*3]</span><br><span class="line">num2&#x3D;$[1+5]</span><br><span class="line">if test $[num1] -eq $[num2]</span><br><span class="line">then</span><br><span class="line">    echo &#39;两个数字相等!&#39;</span><br><span class="line">else</span><br><span class="line">    echo &#39;两个数字不相等!&#39;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个数字相等!</span><br></pre></td></tr></table></figure></div>



<h5 id="case-多条件分支"><a href="#case-多条件分支" class="headerlink" title="case 多条件分支"></a>case 多条件分支</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case word in</span><br><span class="line">  pattern1) list1;;</span><br><span class="line">  pattern2) list2;;</span><br><span class="line">  ...</span><br><span class="line">  *) list3;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></div>

<p>其中;;是一个整体</p>
<h5 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h5><p>与其他编程语言类似，Shell支持for循环。有break,break2,continue,exit 0(返回码，不一定是0)</p>
<p>for循环一般格式为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>

<p>写成一行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for var in item1 item2 ... itemN; do command1; command2… done;</span><br></pre></td></tr></table></figure></div>

<p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p>
<p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p>
<p>例如，顺序输出当前列表中的数字：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The value is: 1</span><br><span class="line">The value is: 2</span><br><span class="line">The value is: 3</span><br><span class="line">The value is: 4</span><br><span class="line">The value is: 5</span><br></pre></td></tr></table></figure></div>

<p>顺序输出字符串中的字符：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for str in &#39;This is a string&#39;</span><br><span class="line">do</span><br><span class="line">    echo $str</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is a string</span><br></pre></td></tr></table></figure></div>



<p>*<em>没有 for (i=0;i&lt;n;i++)语法，但是可以用seq命令生成序列： *</em></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in &#96;seq 1 254&#96;</span><br><span class="line">do</span><br><span class="line">  ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>



<h5 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h5><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>

<p>以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">int&#x3D;1</span><br><span class="line">while(( $int&lt;&#x3D;5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>

<p>运行脚本，输出：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>

<p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：<a href="https://www.runoob.com/linux/linux-comm-let.html" target="_blank" rel="noopener">Bash let 命令</a></p>
<h4 id="9-3-8-expr-表达式运算"><a href="#9-3-8-expr-表达式运算" class="headerlink" title="9.3.8 expr 表达式运算"></a>9.3.8 expr 表达式运算</h4><p>shell不支持除字符串意外的数据类型，不支持四则运算等！需要这些功能，借助于shell外的可执行程序/usr/bin/expr实现，为了提高执行效率这里内置了。也可以实现自己的命令来达到复杂运算的目的。</p>
<p>如果直接进行运算会出问题，简单的加法运算如下，需要用到expr命令：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">x=`expr 1 + 2`</span><br><span class="line">echo "$&#123;x&#125;"</span><br></pre></td></tr></table></figure></div>



<p>运算表达式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">括号</span><br><span class="line">()</span><br><span class="line">算数运算</span><br><span class="line">+ - * &#x2F; %</span><br><span class="line">关系运算</span><br><span class="line">&gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D; !&#x3D;</span><br><span class="line">逻辑运算</span><br><span class="line">| &amp;</span><br><span class="line">正则表达式运算</span><br><span class="line">&quot;待匹配字符串&quot; : &#39;匹配模式&#39;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<ul>
<li><p>应该有空格的地方不允许漏掉</p>
</li>
<li><p>应该转义的地方必须要加反斜线，如计算 3*(1+2),和1&lt;2判断：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">x&#x3D;&#96;expr 3 \* \( 1 + 2 \)&#96;</span><br><span class="line">echo &quot;x &#x3D; $&#123;x&#125;, &#96;expr 1 \&lt; 2&#96;&quot;</span><br><span class="line"></span><br><span class="line"># 这里的*会被翻译成通配，所以要转移成普通的*表示乘法运算</span><br><span class="line"># 这里&lt;是重定向，因此需要转移</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h4 id="9-3-9-eval-命令"><a href="#9-3-9-eval-命令" class="headerlink" title="9.3.9 eval 命令"></a>9.3.9 eval 命令</h4><p>将参数以命令的方式运行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">read line</span><br><span class="line">eval &quot;$line&quot;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入 </span><br><span class="line">echo hello world</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-10-函数"><a href="#9-3-10-函数" class="headerlink" title="9.3.10 函数"></a>9.3.10 函数</h4><p>语法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name() &#123;list;&#125;</span><br></pre></td></tr></table></figure></div>

<p>参数引用：</p>
<ul>
<li><p>函数定义完成后，该函数名作为一个自定义内部命令执行，后面可以调用。</p>
</li>
<li><p>调用时函数名后附加上0到多个参数</p>
</li>
<li><p>在函数体内部以$1 , $2 等方式引用</p>
</li>
</ul>
<p>返回值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return 0</span><br><span class="line"></span><br><span class="line">0: 成功</span><br><span class="line">非0：失败</span><br></pre></td></tr></table></figure></div>



<h2 id="十、文件系统"><a href="#十、文件系统" class="headerlink" title="十、文件系统"></a>十、文件系统</h2><h3 id="10-1-文件系统的创建和安装（挂载）"><a href="#10-1-文件系统的创建和安装（挂载）" class="headerlink" title="10.1 文件系统的创建和安装（挂载）"></a>10.1 文件系统的创建和安装（挂载）</h3><h4 id="10-1-1-U盘挂载"><a href="#10-1-1-U盘挂载" class="headerlink" title="10.1.1 U盘挂载"></a>10.1.1 U盘挂载</h4><p>教程：<a href="https://www.jianshu.com/p/74b8a204b36f" target="_blank" rel="noopener">https://www.jianshu.com/p/74b8a204b36f</a></p>
<p>主要命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk -l		&#x2F;&#x2F; 列表</span><br><span class="line">mount			&#x2F;&#x2F; 安装</span><br><span class="line">umount [-l]		&#x2F;&#x2F; 卸载</span><br></pre></td></tr></table></figure></div>



<h4 id="10-1-2-新增磁盘"><a href="#10-1-2-新增磁盘" class="headerlink" title="10.1.2 新增磁盘"></a>10.1.2 新增磁盘</h4><p>教程：<a href="https://blog.csdn.net/hanpengyu/article/details/7475645" target="_blank" rel="noopener">https://blog.csdn.net/hanpengyu/article/details/7475645</a></p>
<p>主要命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk</span><br><span class="line">mkfs [-t]</span><br></pre></td></tr></table></figure></div>



<h3 id="10-2-文件系统的结构"><a href="#10-2-文件系统的结构" class="headerlink" title="10.2 文件系统的结构"></a>10.2 文件系统的结构</h3><p>把整个逻辑设备以块（扇区）为单位划分，编号0，1，2……（每块512字节或其他更大的2^n字节大小，因此不能取1字节，最小也要取512）</p>
<p><a href="/postImages/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png" class="lazyload"></a></p>
<ul>
<li><p>引导块(0号块)：用于启动系统,只有根文件系统的引导块有效</p>
</li>
<li><p>专用块(1号块)：也叫管理块,或者超级块</p>
<ul>
<li><p>存放文件系统的管理信息。</p>
<p>如:文件系统的大小,i节点区的大小,空闲空间大小,空闲块链表的头等等</p>
</li>
<li><p>mkfs命令时初始化,df命令读出部分信息,df-i和df</p>
</li>
</ul>
</li>
<li><p>i节点区：i节点(index node,简记为i-node)</p>
<ul>
<li><p>每个文件都对应一个i节点,i节点中的信息包括:</p>
<p>指向文件存储区数据块的一些索引(index)</p>
<p>指针(组成文件的逻辑块与硬盘的物理块之间的映射)</p>
<p>文件类型,属主,组,权限,link数,大小,时戳(i节点内不含文件名)</p>
</li>
<li><p>i节点信息查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw]$stat anthorized_keys </span><br><span class="line">  File: ‘anthorized_keys’</span><br><span class="line">  Size: 390       	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h&#x2F;64768d	Inode: 17284854    Links: 1</span><br><span class="line">Access: (0664&#x2F;-rw-rw-r--)  Uid: ( 1000&#x2F;     wbw)   Gid: ( 1000&#x2F;     wbw)</span><br><span class="line">Context: unconfined_u:object_r:user_home_t:s0</span><br><span class="line">Access: 2020-02-26 21:08:42.211841272 +0800</span><br><span class="line">Modify: 2020-02-26 21:09:17.293839845 +0800</span><br><span class="line">Change: 2020-02-26 21:09:17.293839845 +0800</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>数据存储块：每块可容若干个i节点,每个节点的大小是固定的(比如64字节)</p>
</li>
</ul>
<h3 id="10-3-目录存储结构"><a href="#10-3-目录存储结构" class="headerlink" title="10.3 目录存储结构"></a>10.3 目录存储结构</h3><ul>
<li><p>目录表</p>
<ul>
<li><p>每个目录表也作为一个文件来管理，存于“文件存储区”种，有其自己的i节点和数据存储块</p>
</li>
<li><p>目录表由若干个“目录项”构成，目录项只含有两部分信息：文件名，i节点号</p>
<p>目录表和i节点两级结构：</p>
<p><a href="/postImages/%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E7%9B%AE%E5%BD%95%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" class="lazyload"></a></p>
<ul>
<li>目的：分开存放为了提高目录检索效率</li>
</ul>
</li>
<li><p>用ls命令列出的目录大小是目录表文件本身的长度</p>
</li>
</ul>
</li>
<li><p>软（硬）链接：参考 <strong>4.9 ln 链接</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT客户端Java实现</title>
    <url>/2019/10/20/MQTT%E5%AE%A2%E6%88%B7%E7%AB%AFJava%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="MQTT客户端Java实现"><a href="#MQTT客户端Java实现" class="headerlink" title="MQTT客户端Java实现"></a>MQTT客户端Java实现</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>自定义MQTT类继承AbstractMqttClient抽象类</li>
<li>实现自定义处理消息回调方法processMessage</li>
<li>方法解析（可调用函数）<ul>
<li>init：根据参数初始化MQTT客户端</li>
<li>publish：发布主题</li>
<li>subscribe：订阅主题（每次订阅成功，会缓存主题信息到topicMap）</li>
<li>unsubscribe：取消订阅主题</li>
<li>unsubscribeAll：取消所有订阅主题</li>
<li>disconnect：断开连接</li>
<li>close：关闭客户端</li>
</ul>
</li>
</ul>
<h2 id="二、源码"><a href="#二、源码" class="headerlink" title="二、源码"></a>二、源码</h2><p>提供阿里云物联网平台MQTT客户端工具类、简易的版MQTT服务器（发布、订阅分离）、自定义MQTT服务器客户端</p>
<p>github地址：<a href="https://github.com/wangbowen1024/mqttClientUtils" target="_blank" rel="noopener">https://github.com/wangbowen1024/mqttClientUtils</a></p>
<p>以下仅展示，自定义MQTT服务器客户端：</p>
<h3 id="AbstractMqttClient-java"><a href="#AbstractMqttClient-java" class="headerlink" title="AbstractMqttClient.java"></a>AbstractMqttClient.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.mqtt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.*;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MQTT客户端抽象类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMqttClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MQTT服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceUri;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MQTT客户端ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否清除会话(默认清楚)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isCleanSession;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 心跳检测时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aliveInterval;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MqttClient mqttClient;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端连接参数对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MqttConnectOptions mqttConnectOptions;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅主题列表（重连后会断开所有订阅）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; topicMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMqttClient</span><span class="params">(String serviceUri, String clientId, String userName, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(serviceUri, clientId, userName, password, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMqttClient</span><span class="params">(String serviceUri, String clientId, String userName, String password, <span class="keyword">boolean</span> isCleanSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(serviceUri, clientId, userName, password, isCleanSession, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractMqttClient</span><span class="params">(String serviceUri, String clientId, String userName, String password, <span class="keyword">boolean</span> isCleanSession, <span class="keyword">int</span> timeout, <span class="keyword">int</span> aliveInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceUri = serviceUri;</span><br><span class="line">        <span class="keyword">this</span>.clientId = clientId;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.isCleanSession = isCleanSession;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">        <span class="keyword">this</span>.aliveInterval = aliveInterval;</span><br><span class="line">        topicMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(<span class="number">16</span>);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 客户端连接参数对象</span></span><br><span class="line">            mqttConnectOptions = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">            <span class="comment">// 内存存储</span></span><br><span class="line">            MqttClientPersistence persistence = <span class="keyword">new</span> MemoryPersistence();</span><br><span class="line">            <span class="comment">// 创建客户端</span></span><br><span class="line">            mqttClient = <span class="keyword">new</span> MqttClient(serviceUri, clientId, persistence);</span><br><span class="line">            <span class="comment">// 在重新启动和重新连接时记住状态</span></span><br><span class="line">            mqttConnectOptions.setCleanSession(isCleanSession);</span><br><span class="line">            <span class="comment">// 设置连接的用户名、密码</span></span><br><span class="line">            mqttConnectOptions.setUserName(userName);</span><br><span class="line">            mqttConnectOptions.setPassword(password.toCharArray());</span><br><span class="line">            <span class="comment">// 设置超时时间 单位为秒</span></span><br><span class="line">            mqttConnectOptions.setConnectionTimeout(timeout);</span><br><span class="line">            <span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔一定时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></span><br><span class="line">            mqttConnectOptions.setKeepAliveInterval(aliveInterval);</span><br><span class="line">            <span class="comment">// 设置回调函数</span></span><br><span class="line">            mqttClient.setCallback(<span class="keyword">new</span> MqttCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")连接丢失！"</span>);</span><br><span class="line">                    reConnect(<span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        processMessage(topic, message);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"处理主题\""</span> + topic + <span class="string">"\"的消息\""</span> + message + <span class="string">"\"失败"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            mqttClient.connect(mqttConnectOptions);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            mqttClient = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mqttClient &amp;&amp; mqttClient.isConnected()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")初始化成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")初始化失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接断开重连（默认5次）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  剩余重连次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reConnect</span><span class="params">(<span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")重连失败！"</span>);</span><br><span class="line">            mqttClient = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")正在尝试重连...(剩余"</span> + time + <span class="string">"次)"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != mqttClient) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!mqttClient.isConnected()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">null</span> != mqttConnectOptions) &#123;</span><br><span class="line">                        mqttClient.connect(mqttConnectOptions);</span><br><span class="line">                        <span class="keyword">if</span> (mqttClient.isConnected()) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")重连成功！"</span>);</span><br><span class="line">                            <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : topicMap.entrySet()) &#123;</span><br><span class="line">                                subscribe(entry.getKey(), entry.getValue());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"mqttConnectOptions is null"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"mqttClient is null or connect"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                init();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        reConnect(time - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MQTT消息处理函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic     主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message   MQTT消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(String topic, MqttMessage message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic     主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content   内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qos       消息服务质量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String topic, String content, <span class="keyword">int</span> qos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mqttClient &amp;&amp; mqttClient.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 创建消息</span></span><br><span class="line">                MqttMessage mqttMessage = <span class="keyword">new</span> MqttMessage(content.getBytes());</span><br><span class="line">                <span class="comment">// 设置消息的服务质量</span></span><br><span class="line">                mqttMessage.setQos(qos);</span><br><span class="line">                <span class="comment">// 发布信息</span></span><br><span class="line">                MqttTopic mqttTopic = mqttClient.getTopic(topic);</span><br><span class="line">                MqttDeliveryToken deliveryToken = mqttTopic.publish(mqttMessage);</span><br><span class="line">                <span class="keyword">if</span> (!deliveryToken.isComplete()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"【成功】MQTT客户端("</span> + clientId + <span class="string">")向\""</span> + topic + <span class="string">"\"主题发送："</span> + content);</span><br><span class="line">                    deliveryToken.waitForCompletion();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"【失败】MQTT客户端("</span> + clientId + <span class="string">")向\""</span> + topic + <span class="string">"\"主题发送："</span> + content);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException me) &#123;</span><br><span class="line">                System.out.println(<span class="string">"reason:"</span> + me.getReasonCode());</span><br><span class="line">                System.out.println(<span class="string">"msg:"</span> + me.getMessage());</span><br><span class="line">                System.out.println(<span class="string">"loc:"</span> + me.getLocalizedMessage());</span><br><span class="line">                System.out.println(<span class="string">"cause:"</span> + me.getCause());</span><br><span class="line">                System.out.println(<span class="string">"exception:"</span> + me);</span><br><span class="line">                me.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String topic, String content)</span> </span>&#123;</span><br><span class="line">        publish(topic, content, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qos   消息服务质量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String topic, <span class="keyword">int</span> qos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mqttClient &amp;&amp; mqttClient.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//订阅者连接订阅主题</span></span><br><span class="line">                mqttClient.subscribe(topic, qos);</span><br><span class="line">                topicMap.put(topic, qos);</span><br><span class="line">                System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")订阅\""</span> + topic + <span class="string">"\"主题成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")订阅\""</span> + topic + <span class="string">"\"主题失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        subscribe(topic, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订阅</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mqttClient &amp;&amp; mqttClient.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mqttClient.unsubscribe(topic);</span><br><span class="line">                System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")取消订阅\""</span> + topic + <span class="string">"\"主题成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")取消订阅\""</span> + topic + <span class="string">"\"主题失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消所有订阅</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribeAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String topic : topicMap.keySet()) &#123;</span><br><span class="line">            unsubscribe(topic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开MQTT客户端连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 断开连接</span></span><br><span class="line">            <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mqttClient.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")断开连接失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭MQTT客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭客户端</span></span><br><span class="line">            <span class="keyword">if</span> (mqttClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mqttClient.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"MQTT客户端("</span> + clientId + <span class="string">")关闭失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServiceUri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serviceUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServiceUri</span><span class="params">(String serviceUri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceUri = serviceUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClientId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClientId</span><span class="params">(String clientId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientId = clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCleanSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isCleanSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCleanSession</span><span class="params">(<span class="keyword">boolean</span> cleanSession)</span> </span>&#123;</span><br><span class="line">        isCleanSession = cleanSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MqttClient <span class="title">getMqttClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mqttClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeout</span><span class="params">(<span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAliveInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aliveInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAliveInterval</span><span class="params">(<span class="keyword">int</span> aliveInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aliveInterval = aliveInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MqttConnectOptions <span class="title">getMqttConnectOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mqttConnectOptions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title">getTopicMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> topicMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTopicMap</span><span class="params">(Map&lt;String, Integer&gt; topicMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.topicMap = topicMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="MyMqttClient-java"><a href="#MyMqttClient-java" class="headerlink" title="MyMqttClient.java"></a>MyMqttClient.java</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.mqtt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MQTT客户端处理测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMqttClient</span> <span class="keyword">extends</span> <span class="title">AbstractMqttClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMqttClient</span><span class="params">(String serviceUri, String clientId, String userName, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(serviceUri, clientId, userName, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMqttClient</span><span class="params">(String serviceUri, String clientId, String userName, String password, <span class="keyword">boolean</span> isCleanSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(serviceUri, clientId, userName, password, isCleanSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMqttClient</span><span class="params">(String serviceUri, String clientId, String userName, String password, <span class="keyword">boolean</span> isCleanSession, <span class="keyword">int</span> timeout, <span class="keyword">int</span> aliveInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(serviceUri, clientId, userName, password, isCleanSession, timeout, aliveInterval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发者自定义订阅消息回调处理函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic     主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message   MQTT消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(String topic, MqttMessage message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-------------begin-----------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"MQTT客户端("</span> + <span class="keyword">super</span>.getClientId() + <span class="string">")接收到\""</span> + topic + <span class="string">"\"主题的消息： "</span> + message.toString());</span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(message.toString());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : jsonObject.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" : "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------end------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.mqtt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String topic1 = <span class="string">"/test/topic1"</span>;</span><br><span class="line">        String topic2 = <span class="string">"/test/topic2"</span>;</span><br><span class="line">        String topic3 = <span class="string">"/test/topic3"</span>;</span><br><span class="line">        MyMqttClient myMqttClient = <span class="keyword">new</span> MyMqttClient(<span class="string">"tcp://xxx.xxx.xxx.xxx:1883"</span>, <span class="string">"MyMqttUtil"</span>, <span class="string">"test"</span>, <span class="string">"test"</span>);</span><br><span class="line">        myMqttClient.subscribe(topic1);</span><br><span class="line">        myMqttClient.subscribe(topic2);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"resub"</span>.equals(s)) &#123;</span><br><span class="line">                myMqttClient.subscribe(topic1);</span><br><span class="line">                myMqttClient.subscribe(topic2);</span><br><span class="line">                System.out.println(myMqttClient.getTopicMap().size());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"c"</span>.equals(s)) &#123;</span><br><span class="line">                myMqttClient.unsubscribe(topic1);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"clean"</span>.equals(s)) &#123;</span><br><span class="line">                myMqttClient.unsubscribeAll();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                myMqttClient.publish(topic3, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>通讯协议</category>
        <category>MQTT</category>
      </categories>
      <tags>
        <tag>MQTT</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx快速上手</title>
    <url>/2020/02/22/Nginx%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h1 id="Nginx快速上手"><a href="#Nginx快速上手" class="headerlink" title="Nginx快速上手"></a>Nginx快速上手</h1><h2 id="一、安装nginx"><a href="#一、安装nginx" class="headerlink" title="一、安装nginx"></a>一、安装nginx</h2><h3 id="1-1-安装步骤"><a href="#1-1-安装步骤" class="headerlink" title="1.1 安装步骤"></a>1.1 安装步骤</h3><ol>
<li><p>官网下载安装包</p>
</li>
<li><p>解压到指定目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginxxxxxxx</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;xxx&#x2F;xxx&#x2F;xxx # 进入解压目录</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查找安装路径</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$whereis nginx</span><br><span class="line">nginx: &#x2F;usr&#x2F;local&#x2F;nginx  #默认路径</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="1-2-可能的问题"><a href="#1-2-可能的问题" class="headerlink" title="1.2 可能的问题"></a>1.2 可能的问题</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><ul>
<li><p>报错信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checking for OS</span><br><span class="line"> + Linux 3.10.0-1062.9.1.el7.x86_64 x86_64</span><br><span class="line">checking for C compiler ... not found</span><br><span class="line"></span><br><span class="line">.&#x2F;configure: error: C compiler cc is not found</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>报错原因</p>
<p>因为没有装编译程序。</p>
</li>
<li><p>解决方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudu yum -y install gcc</span><br><span class="line">sudo yum -y install gcc-c++</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><ul>
<li><p>报错信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure: error: the HTTP rewrite module requires the PCRE(或者zlib) library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre&#x3D;&lt;path&gt; option.</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>报错原因</p>
<p>没有安装PCRE(或者zlib)库。</p>
</li>
<li><p>解决方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install pcre-devel</span><br><span class="line">sudo yum install -y zlib-devel</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>要使用命令，先进入nginx安装目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-1-启动"><a href="#2-1-启动" class="headerlink" title="2.1 启动"></a>2.1 启动</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;nginx </span><br><span class="line">ps aux|grep nginx	# 查看进程</span><br></pre></td></tr></table></figure></div>

<p>在浏览器输入服务器IP或者域名会看到如下界面，即启动成功：</p>
<p><a href="/postImages/%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%88%9D%E5%A7%8B%E7%95%8C%E9%9D%A2.png" class="lazyload"></a></p>
<h3 id="2-2-停止"><a href="#2-2-停止" class="headerlink" title="2.2 停止"></a>2.2 停止</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;nginx -s stop		# 此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">sudo .&#x2F;nginx -s quit		# 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</span><br></pre></td></tr></table></figure></div>



<h3 id="2-3-配置更新生效"><a href="#2-3-配置更新生效" class="headerlink" title="2.3 配置更新生效"></a>2.3 配置更新生效</h3><p>在不停止nginx服务的情况下，使配置生效：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure></div>



<h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><h3 id="3-1-配置首页"><a href="#3-1-配置首页" class="headerlink" title="3.1 配置首页"></a>3.1 配置首页</h3><p>nginx默认是占用80端口，也就是说当输入域名或IP的时候，会显示2.1中的欢迎页面。这里我们可以进行修改。</p>
<ol>
<li><p>进入配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</span><br><span class="line">sudo vim nginx.conf</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    	# 这里就是网站的根目录（在nginx安装目录下的html目录）</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        # 配置错误页面</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到根目录在（/usr/local/nginx/html），所以我们可以把自己的页面放到这个文件夹下。</p>
</li>
<li><p>将自己的页面文件放到html目录下</p>
<p><a href="/postImages/%E9%85%8D%E7%BD%AE%E9%A6%96%E9%A1%B51.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%85%8D%E7%BD%AE%E9%A6%96%E9%A1%B51.png" class="lazyload"></a></p>
</li>
<li><p>再次刷新浏览器，可以看到成功替换成我们自己的页面了</p>
<p><a href="/postImages/%E9%85%8D%E7%BD%AE%E9%A6%96%E9%A1%B52.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E9%85%8D%E7%BD%AE%E9%A6%96%E9%A1%B52.png" class="lazyload"></a></p>
</li>
</ol>
<h3 id="3-2-配置SSL"><a href="#3-2-配置SSL" class="headerlink" title="3.2 配置SSL"></a>3.2 配置SSL</h3><h4 id="3-2-1-安装-with-http-ssl-module-模块"><a href="#3-2-1-安装-with-http-ssl-module-模块" class="headerlink" title="3.2.1 安装 with-http_ssl_module 模块"></a>3.2.1 安装 with-http_ssl_module 模块</h4><p>SSL需要安装该模块，否则会报错：（如果已经安装过了，可以跳过）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- nginx: [emerg] unknown directive &quot;ssl&quot; </span><br><span class="line">- .&#x2F;configure: error: SSL modules require the OpenSSL library.</span><br></pre></td></tr></table></figure></div>

<p>安装教程: <a href="https://blog.csdn.net/weiyangdong/article/details/80008543" target="_blank" rel="noopener">https://blog.csdn.net/weiyangdong/article/details/80008543</a></p>
<h4 id="3-2-2-配置流程"><a href="#3-2-2-配置流程" class="headerlink" title="3.2.2 配置流程"></a>3.2.2 配置流程</h4><ol>
<li><p>要记得打开服务器443端口！！！！</p>
</li>
<li><p>添加域名解析（这里以阿里云二级域名为例）</p>
<p><a href="/postImages/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D.png" class="lazyload"></a></p>
</li>
<li><p>给域名申请SSL证书并下载nginx版</p>
<p><a href="/postImages/SSL%E8%AE%A4%E8%AF%81.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/SSL%E8%AE%A4%E8%AF%81.png" class="lazyload"></a></p>
<p><a href="/postImages/SSL2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/SSL2.png" class="lazyload"></a></p>
</li>
<li><p>登录您的Nginx服务器，在Nginx安装目录（默认Nginx安装目录为/usr/local/nginx/conf）下创建<strong>cert</strong>目录，并将下载的证书文件和密钥文件拷贝到<strong>cert</strong>目录中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</span><br><span class="line">sudo mkdir cert</span><br><span class="line"># 拷贝文件到该目录下</span><br><span class="line">[X@X &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;cert]$ll</span><br><span class="line">total 8</span><br><span class="line">-rw-rw-r-- 1 wbw wbw 1679 Apr  1 17:49 3697502_cygf.wangbowen.cn.key</span><br><span class="line">-rw-rw-r-- 1 wbw wbw 3663 Apr  1 17:49 3697502_cygf.wangbowen.cn.pem</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动一个项目（这里以springboot项目为例，端口为9000）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 后台运行</span><br><span class="line">$nohup java -jar cygf-web-1.0.1.jar &gt; cygf-web-1.0.1.log 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 1617</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看9000端口占用情况，确定项目启动成功</span><br><span class="line">$netstat -lnpt</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      1617&#x2F;java           </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN      -                   </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改Nginx安装目录/conf/nginx.conf文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># http 80 端口重定向到 http 443 </span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">    server_name [::]:80 default_server;</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 创意工坊</span><br><span class="line">server &#123;</span><br><span class="line">	#监听443端口（如果是http那么直接80就可以了）</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    #对应的域名，把cygf.wangbowen.cn改成你们自己的域名就可以了</span><br><span class="line">    server_name cygf.wangbowen.cn;</span><br><span class="line">    #限制文件上传大小（这个是我自己项目的设置）</span><br><span class="line">    client_max_body_size 10M;</span><br><span class="line">	</span><br><span class="line">    #这里是SSL才有的，如果是http协议，那么不用写</span><br><span class="line">    #获取到的第一个文件的全路径(腾讯云获取的是crt，阿里云是pem)</span><br><span class="line">    ssl_certificate /usr/local/nginx/conf/cert/3697502_cygf.wangbowen.cn.pem;</span><br><span class="line">    #获取到的第二个文件的全路径</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/conf/cert/3697502_cygf.wangbowen.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    #这是我的主页访问地址，因为使用的是静态的html网页，所以直接使用location就可以完成了。</span><br><span class="line">    location / &#123;</span><br><span class="line">        #代理</span><br><span class="line">        proxy_pass http://localhost:9000/;</span><br><span class="line">        #主页文件</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #解决跨域API请求前缀（这里我的项目用到了跨域，如果没有可以不用加）</span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        proxy_pass  http://localhost:9000/;</span><br><span class="line">        #如果有跨域问题加上下面的内容</span><br><span class="line">        #add_header Access-Control-Allow-Origin *;</span><br><span class="line">        #add_header Access-Control-Allow-Methods "POST, GET, OPTIONS";</span><br><span class="line">        #add_header Access-Control-Allow-Headers "Origin, Authorization, Accept";</span><br><span class="line">        #add_header Access-Control-Allow-Credentials true;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>刷新配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sudo .&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>访问域名</p>
<p><a href="/postImages/SSL3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/SSL3.png" class="lazyload"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>服务器</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle学习笔记</title>
    <url>/2020/03/02/Oracle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Oracle学习笔记"><a href="#Oracle学习笔记" class="headerlink" title="Oracle学习笔记"></a>Oracle学习笔记</h1><p>【菜鸟教程SQL】<a href="https://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/sql/sql-tutorial.html</a></p>
<h2 id="一、数据库基本概念"><a href="#一、数据库基本概念" class="headerlink" title="一、数据库基本概念"></a>一、数据库基本概念</h2><h3 id="1-1-构成"><a href="#1-1-构成" class="headerlink" title="1.1 构成"></a>1.1 构成</h3><p>数据、字段、记录</p>
<h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><ul>
<li>永久存储</li>
<li>有组织</li>
<li>可共享</li>
</ul>
<h3 id="1-2-DBMS"><a href="#1-2-DBMS" class="headerlink" title="1.2 DBMS"></a>1.2 DBMS</h3><p>数据库管理系统（管理数据）：</p>
<ul>
<li>软件</li>
<li>数据库</li>
<li>数据库管理员</li>
</ul>
<h3 id="1-3-数据库"><a href="#1-3-数据库" class="headerlink" title="1.3 数据库"></a>1.3 数据库</h3><p><a href="/postImages/DB.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB.png" class="lazyload"></a></p>
<h2 id="二、Oracle安装与启动"><a href="#二、Oracle安装与启动" class="headerlink" title="二、Oracle安装与启动"></a>二、Oracle安装与启动</h2><h3 id="2-1-版本"><a href="#2-1-版本" class="headerlink" title="2.1 版本"></a>2.1 版本</h3><p><a href="/postImages/DB2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB2.png" class="lazyload"></a></p>
<h3 id="2-2-OEM数据库管理"><a href="#2-2-OEM数据库管理" class="headerlink" title="2.2 OEM数据库管理"></a>2.2 OEM数据库管理</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p><a href="/postImages/DB3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB3.png" class="lazyload"></a></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><a href="/postImages/DB4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB4.png" class="lazyload"></a></p>
<p><a href="/postImages/DB5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/DB5.png" class="lazyload"></a></p>
<h3 id="2-3-SQL-Plus"><a href="#2-3-SQL-Plus" class="headerlink" title="2.3 SQL Plus"></a>2.3 SQL Plus</h3><p>使用SQL Plus程序打开命令行窗口。</p>
<h2 id="三、结构"><a href="#三、结构" class="headerlink" title="三、结构"></a>三、结构</h2><h3 id="3-1-逻辑存储结构"><a href="#3-1-逻辑存储结构" class="headerlink" title="3.1 逻辑存储结构"></a>3.1 逻辑存储结构</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库</span><br><span class="line">  - 表空间1</span><br><span class="line">  	- 段1</span><br><span class="line">  	  - 区1</span><br><span class="line">  	  	- 数据块</span><br><span class="line">  	  - 区2</span><br><span class="line">  	- 段2</span><br><span class="line">  	- 段3</span><br><span class="line">  - 表空间2</span><br><span class="line">  - 表空间3</span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-数据块"><a href="#3-2-数据块" class="headerlink" title="3.2 数据块"></a>3.2 数据块</h3><p>Oracle逻辑存储结构中的最小逻辑单位。</p>
<p>大小由SB_BLOCK_SIZE决定。</p>
<p>组成：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据块</span><br><span class="line">  - 块头</span><br><span class="line">  	- 数据库标题</span><br><span class="line">  	- 表目录</span><br><span class="line">  	- 行目录</span><br><span class="line">  - 存储区</span><br><span class="line">    - 自由空间</span><br><span class="line">    - 行数据</span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-数据区"><a href="#3-3-数据区" class="headerlink" title="3.3 数据区"></a>3.3 数据区</h3><p>由连续的数据块结合而成。</p>
<p>Oracle存储分配的最小单位。</p>
<h3 id="3-4-段"><a href="#3-4-段" class="headerlink" title="3.4 段"></a>3.4 段</h3><p>数据段：存储表中所有数据</p>
<p>索引段：存储表最佳查询的所有索引数据</p>
<p>临时段：存储表排序操作期间建立的临时表的数据</p>
<p>回滚段：存储修改之前的位置和值</p>
<h3 id="3-5-表空间"><a href="#3-5-表空间" class="headerlink" title="3.5 表空间"></a>3.5 表空间</h3><p>表空间是数据库的最大逻辑划分区域。</p>
<p>一个表空间有一个或多个数据据文件组成，一个数据文件只属于一个表空间。</p>
<p>表空间的大小是它对应的数据文件大小的总和。</p>
<p>默认创建的表空间</p>
<ul>
<li>系统表空间</li>
<li>辅助表空间</li>
<li>撤销表空间</li>
<li>用户表空间</li>
</ul>
<h3 id="3-6-总结（重要）"><a href="#3-6-总结（重要）" class="headerlink" title="3.6 总结（重要）"></a>3.6 总结（重要）</h3><p><a href="/postImages/%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E7%BB%93%E6%9E%84.png" class="lazyload"></a></p>
<p><a href="/postImages/%E7%BB%93%E6%9E%842.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E7%BB%93%E6%9E%842.png" class="lazyload"></a></p>
<p>【B站视频解释 5:18开始】<a href="https://www.bilibili.com/video/BV1AE411p79z?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1AE411p79z?p=3</a></p>
<ul>
<li>实例：在Oracle的数据库中可有多个实例，通常我们只用一个实例</li>
<li>用户：一个实例下有多个用户</li>
<li>表空间：一个实例下有个表空间，表空间是<strong>逻辑概念</strong>，一个表空间对应着一个或多个物理存储文件（.dbf或.ora）。<strong>也就是说表空间仅仅是一个概念，用户产生的数据存放在表空间（磁盘上对应目录）中仅此而已。</strong></li>
<li>用户和表空间的关系：一个用户有一个默认表空间。一个表空间可以为多个用户作为默认表空间，但是用户和用户之间的数据是隔离的，数据不会混。</li>
<li>Oracle数据源：<ul>
<li>driver：oracle.jdbc.OracleDriver</li>
<li>url：jdbc:oracle:thin:@localhost:1521:实例名</li>
<li>username</li>
<li>password</li>
</ul>
</li>
</ul>
<p><strong>TIP : 可以理解为用户就是MySQL中database的概念</strong></p>
<ul>
<li>模式：一个用户一般对应一个schema,该用户的schema名等于用户名，并作为该用户缺省schema。这也就是我们在企业管理器的方案下看到schema名都为数据库用户名的原因。Oracle数据库中不能新创建一个schema，要想创建一个schema，只能通过创建一个用户的方法解决(Oracle中虽然有create schema语句，但是它并不是用来创建一个schema的)，在创建一个用户的同时为这个用户创建一个与用户名同名的schem并作为该用户的缺省shcema。即schema的个数同user的个数相同，而且schema名字同user名字一一 对应并且相同，所有我们可以称schema为user的别名，虽然这样说并不准确，但是更容易理解一些。</li>
</ul>
<h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><h3 id="4-1-CHAR-n-和-VARCHAR2-n"><a href="#4-1-CHAR-n-和-VARCHAR2-n" class="headerlink" title="4.1 CHAR(n) 和 VARCHAR2(n)"></a>4.1 CHAR(n) 和 VARCHAR2(n)</h3><p><strong>字符串类型</strong></p>
<p>CHAR(N)：固定长度（速度快）</p>
<p>VARCHAR2(N)：长度可变（耗空间）</p>
<h3 id="4-2-NUMBER-m-n"><a href="#4-2-NUMBER-m-n" class="headerlink" title="4.2 NUMBER(m, n)"></a>4.2 NUMBER(m, n)</h3><p><strong>数字类型</strong></p>
<p>m：总位数</p>
<p>n：小数位数</p>
<p>m-n：整数位数</p>
<p>例子：</p>
<p>number(6,2) ==&gt; 1234.56</p>
<h3 id="4-3-DATE-和-TIMESTAMP"><a href="#4-3-DATE-和-TIMESTAMP" class="headerlink" title="4.3 DATE 和 TIMESTAMP"></a>4.3 DATE 和 TIMESTAMP</h3><p><strong>时间类型</strong></p>
<p>DATE：保存时间，不含毫秒</p>
<p>TIMESTAMP：精确到毫秒</p>
<h3 id="4-4-CLOB-和-BLOB"><a href="#4-4-CLOB-和-BLOB" class="headerlink" title="4.4 CLOB 和 BLOB"></a>4.4 CLOB 和 BLOB</h3><p><strong>大数据存储</strong></p>
<p>CLOB：可以存放海量文字（推荐）</p>
<p>BLOB：存放图片、电影、音乐等二进制文件</p>
<h2 id="五、CURD命令操作"><a href="#五、CURD命令操作" class="headerlink" title="五、CURD命令操作"></a>五、CURD命令操作</h2><h3 id="5-1-创建表空间"><a href="#5-1-创建表空间" class="headerlink" title="5.1 创建表空间"></a>5.1 创建表空间</h3><p>相当于MYSQL中的数据库。</p>
<p>注意：只有sys用户具有创建表空间的权限，除非sys给其他用户授权。</p>
<p><strong>SYS直接创建</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLESPACE</span> LiYu</span><br><span class="line">	<span class="comment">-- 存盘位置</span></span><br><span class="line">	<span class="keyword">DATAFILE</span> <span class="string">'G:\ORACLE\ORADATA\ORCL\LiYu.DBF'</span></span><br><span class="line">	<span class="comment">-- 存储大小</span></span><br><span class="line">	<span class="keyword">SIZE</span> <span class="number">50</span>M</span><br><span class="line">	<span class="comment">-- 本地管理</span></span><br><span class="line">	<span class="keyword">EXTENT</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">LOCAL</span></span><br><span class="line">	<span class="comment">-- 自动扩容</span></span><br><span class="line">	<span class="keyword">AUTOALLOCATE</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>SYS授权</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> wbw <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> Bow1024</span><br><span class="line">	<span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span></span><br><span class="line">    <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> LiYu;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">TABLESPACE</span> <span class="keyword">TO</span> wbw;</span><br><span class="line"><span class="comment">-- 赋予DBA权限（可选）还有其他角色 CONNECT 和 RESOURCE </span></span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> wbw;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-2-表操作"><a href="#5-2-表操作" class="headerlink" title="5.2 表操作"></a>5.2 表操作</h3><h4 id="5-2-1-CREATE-创建表"><a href="#5-2-1-CREATE-创建表" class="headerlink" title="5.2.1 CREATE 创建表"></a>5.2.1 CREATE 创建表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">	字段名称 字段类型 [<span class="keyword">DEFAULT</span> 默认值],</span><br><span class="line">    字段名称 字段类型 [<span class="keyword">DEFAULT</span> 默认值]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<ul>
<li><p>表名要以字母开头（不建议汉字）</p>
</li>
<li><p>长度1~30个字符</p>
</li>
<li><p>不能用保留字</p>
</li>
</ul>
<p><strong>其他关键字</strong></p>
<ul>
<li>NOT NULL：非空</li>
<li>PRIMARY KEY：主键</li>
</ul>
<p><a href="undefined" data-fancybox="group" data-caption class="fancybox"><img alt title data-src class="lazyload"></a></p>
<h4 id="5-2-2-DROP-删除表"><a href="#5-2-2-DROP-删除表" class="headerlink" title="5.2.2 DROP 删除表"></a>5.2.2 DROP 删除表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名称;</span><br></pre></td></tr></table></figure></div>



<h4 id="5-2-3-ALTER-修改表"><a href="#5-2-3-ALTER-修改表" class="headerlink" title="5.2.3 ALTER 修改表"></a>5.2.3 ALTER 修改表</h4><h5 id="ADD-添加列"><a href="#ADD-添加列" class="headerlink" title="ADD 添加列"></a>ADD 添加列</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span>(字段名 字段类型 <span class="keyword">DEFAULT</span> 默认值, ...);</span><br></pre></td></tr></table></figure></div>

<h5 id="MODIFY-修改字段类型"><a href="#MODIFY-修改字段类型" class="headerlink" title="MODIFY 修改字段类型"></a>MODIFY 修改字段类型</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span>(字段名 字段类型 <span class="keyword">DEFAULT</span> 默认值);</span><br></pre></td></tr></table></figure></div>

<h5 id="RENAME-修改字段名称"><a href="#RENAME-修改字段名称" class="headerlink" title="RENAME 修改字段名称"></a>RENAME 修改字段名称</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> 原名称 <span class="keyword">TO</span> 修改后名称;</span><br></pre></td></tr></table></figure></div>

<h5 id="DROP-删除字段"><a href="#DROP-删除字段" class="headerlink" title="DROP 删除字段"></a>DROP 删除字段</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名称;</span><br></pre></td></tr></table></figure></div>



<h4 id="5-2-4-INSERT-INTO-插入记录"><a href="#5-2-4-INSERT-INTO-插入记录" class="headerlink" title="5.2.4 INSERT INTO 插入记录"></a>5.2.4 INSERT INTO 插入记录</h4><p><strong>单条插入</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段名, 字段名, ...) <span class="keyword">VALUES</span>(值, 值, ...);</span><br></pre></td></tr></table></figure></div>

<p><strong>批量插入</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert all into student values(&#39;张三&#39;, 18, to_date(&#39;2015-01-01&#39;,&#39;yyyy-mm-dd&#39;))</span><br><span class="line">into student values(&#39;李四&#39;, 17, to_date(&#39;1997-12-03&#39;,&#39;yyyy-mm-dd&#39;))</span><br><span class="line">into student values(&#39;王五&#39;, 17, to_date(&#39;2000-03-01&#39;,&#39;yyyy-mm-dd&#39;))</span><br><span class="line">select 1 from dual;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>和mysql不同，这里要用 <code>insert all into</code></li>
<li>和Mysql直接用逗号不一样，中间要用 <code>into 表名 values(...)</code>，但是不用逗号分割</li>
<li>最后一句要用 <code>select 1 from dual;</code>  </li>
</ul>
<h4 id="5-2-5-UPDATE-修改记录"><a href="#5-2-5-UPDATE-修改记录" class="headerlink" title="5.2.5 UPDATE 修改记录"></a>5.2.5 UPDATE 修改记录</h4><p><strong>更新单条记录</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名=新值 [条件];</span><br></pre></td></tr></table></figure></div>

<p><strong>批量更新</strong></p>
<p>添加where条件。</p>
<h4 id="5-2-6-DELETE-FROM-TRUNCATE-删除记录"><a href="#5-2-6-DELETE-FROM-TRUNCATE-删除记录" class="headerlink" title="5.2.6 DELETE FROM (TRUNCATE) 删除记录"></a>5.2.6 DELETE FROM (TRUNCATE) 删除记录</h4><p>删除指定条件记录，不加条件删除整个表：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [条件];</span><br></pre></td></tr></table></figure></div>

<p>删除所有数据：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">table</span> 表名; <span class="comment">-- 推荐</span></span><br></pre></td></tr></table></figure></div>



<h3 id="5-3-SELECT-查询数据"><a href="#5-3-SELECT-查询数据" class="headerlink" title="5.3 SELECT 查询数据"></a>5.3 SELECT 查询数据</h3><h4 id="5-3-1-选择、投影、连接"><a href="#5-3-1-选择、投影、连接" class="headerlink" title="5.3.1 选择、投影、连接"></a>5.3.1 选择、投影、连接</h4><ul>
<li>选择：表中的一行记录</li>
<li>投影：表中的某几列</li>
<li>连接<ul>
<li>等值连接：表A的X列和表B的Y列值相等的组合成新的表</li>
<li>自然连接：在AB两表中相同字段列上，进行等值连接</li>
</ul>
</li>
</ul>
<h4 id="5-3-2-简单查询"><a href="#5-3-2-简单查询" class="headerlink" title="5.3.2 简单查询"></a>5.3.2 简单查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 【查询需求】<span class="keyword">FROM</span> 表名称 [表别名] [查询条件];</span><br></pre></td></tr></table></figure></div>

<p><strong>查询需求</strong></p>
<ul>
<li>DISTINCT：重复项过滤，只保留一条记录</li>
<li>*：查询所有列</li>
<li>列名称 [AS] [列别名]：查询指定列，多个列用逗号分隔</li>
</ul>
<p><strong>查询表：</strong></p>
<p>如果要查询多个表，FROM后面加上多个表名，用逗号隔开</p>
<h4 id="5-3-3-子查询"><a href="#5-3-3-子查询" class="headerlink" title="5.3.3 子查询"></a>5.3.3 子查询</h4><p>即将一个select语句的查询结果，作为另一个select语句的条件的查询。</p>
<p><strong>单行子查询</strong></p>
<p>只返回一个数值，如使用MAX()函数，返回一个最大值。</p>
<p><strong>多行子查询</strong></p>
<p>返回多行记录，可以理解为返回一个临时表。</p>
<h4 id="5-3-4-复杂查询"><a href="#5-3-4-复杂查询" class="headerlink" title="5.3.4 复杂查询"></a>5.3.4 复杂查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>子句 [ <span class="keyword">INTO</span> 子句 ] </span><br><span class="line"><span class="keyword">FROM</span> 子句</span><br><span class="line">[ <span class="keyword">WHERE</span> 子句 ] </span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> 子句] </span><br><span class="line">[ <span class="keyword">HAVING</span> 子句 ] </span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>|<span class="keyword">DESC</span> ]</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<p>WHERE 后不能跟聚合函数</p>
<p>GROUP BY 后面可以跟聚合函数</p>
<p>ASC：升序、DESC：降序。可以有多个列，按顺序进行前后排序。</p>
<h4 id="5-3-5-空值比较"><a href="#5-3-5-空值比较" class="headerlink" title="5.3.5 空值比较"></a>5.3.5 空值比较</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">... where xxx is null;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-4-高级查询"><a href="#5-4-高级查询" class="headerlink" title="5.4 高级查询"></a>5.4 高级查询</h3><h4 id="5-4-1-LIKE-模糊查询"><a href="#5-4-1-LIKE-模糊查询" class="headerlink" title="5.4.1 LIKE 模糊查询"></a>5.4.1 LIKE 模糊查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name [<span class="keyword">NOT</span>] <span class="keyword">LIKE</span> pattern;</span><br></pre></td></tr></table></figure></div>

<p>在 SQL 中，通配符与 SQL LIKE 操作符一起使用。</p>
<p>SQL 通配符用于搜索表中的数据。</p>
<p>在 SQL 中，可使用以下通配符：</p>
<table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%</td>
<td align="left">替代 0 个或多个字符</td>
</tr>
<tr>
<td align="left">_</td>
<td align="left">替代一个字符</td>
</tr>
<tr>
<td align="left">[<em>charlist</em>]</td>
<td align="left">字符列中的任何单一字符</td>
</tr>
<tr>
<td align="left">[^<em>charlist</em>] 或 [!<em>charlist</em>]</td>
<td align="left">不在字符</td>
</tr>
</tbody></table>
<h4 id="5-4-2-IN、ANY、ALL-范围关键字"><a href="#5-4-2-IN、ANY、ALL-范围关键字" class="headerlink" title="5.4.2 IN、ANY、ALL 范围关键字"></a>5.4.2 IN、ANY、ALL 范围关键字</h4><p><strong>IN</strong></p>
<p>IN 操作符允许您在 WHERE 子句中规定多个值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name [<span class="keyword">NOT</span>] <span class="keyword">IN</span> (value1,value2,...);</span><br></pre></td></tr></table></figure></div>

<p><strong>ANY</strong></p>
<p>查询符合条件中任意一个就可以。</p>
<p><strong>ALL</strong></p>
<p>查询符合所有条件的。</p>
<h4 id="5-4-3-BETWEEN-范围关键字"><a href="#5-4-3-BETWEEN-范围关键字" class="headerlink" title="5.4.3 BETWEEN 范围关键字"></a>5.4.3 BETWEEN 范围关键字</h4><p>BETWEEN 操作符选取介于两个值之间的数据范围内的值。这些值可以是数值、文本或者日期。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name [<span class="keyword">NOT</span>] <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure></div>



<h4 id="5-4-4-NULL-空值比较"><a href="#5-4-4-NULL-空值比较" class="headerlink" title="5.4.4 NULL 空值比较"></a>5.4.4 NULL 空值比较</h4><p>NULL 值代表遗漏的未知数据。</p>
<p>默认地，表的列可以存放 NULL 值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName,FirstName,Address <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> [<span class="keyword">NOT</span>] <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></div>



<h4 id="5-4-5-INNER-JOIN-内连接"><a href="#5-4-5-INNER-JOIN-内连接" class="headerlink" title="5.4.5 INNER JOIN 内连接"></a>5.4.5 INNER JOIN 内连接</h4><p>常用的多表关联查询，INNER关键字可以省略，当只使用JOIN时，表示内连接。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line">[<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></div>

<p><strong>注释：</strong>INNER JOIN 与 JOIN 是相同的。</p>
<p><a href="https://www.runoob.com/wp-content/uploads/2013/09/img_innerjoin.gif" data-fancybox="group" data-caption="SQL INNER JOIN" class="fancybox"><img alt="SQL INNER JOIN" title="SQL INNER JOIN" data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_innerjoin.gif" class="lazyload"></a></p>
<h4 id="5-4-6-LEFT-JOIN-左外连接"><a href="#5-4-6-LEFT-JOIN-左外连接" class="headerlink" title="5.4.6 LEFT JOIN 左外连接"></a>5.4.6 LEFT JOIN 左外连接</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></div>

<p><strong>注释：</strong>在某些数据库中，LEFT JOIN 称为 LEFT OUTER JOIN。</p>
<p><a href="https://www.runoob.com/wp-content/uploads/2013/09/img_leftjoin.gif" data-fancybox="group" data-caption="SQL LEFT JOIN" class="fancybox"><img alt="SQL LEFT JOIN" title="SQL LEFT JOIN" data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_leftjoin.gif" class="lazyload"></a></p>
<h4 id="5-4-7-RIGHT-JOIN-右外连接"><a href="#5-4-7-RIGHT-JOIN-右外连接" class="headerlink" title="5.4.7 RIGHT JOIN 右外连接"></a>5.4.7 RIGHT JOIN 右外连接</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></div>

<p><strong>注释：</strong>在某些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。</p>
<p><a href="https://www.runoob.com/wp-content/uploads/2013/09/img_rightjoin.gif" data-fancybox="group" data-caption="SQL RIGHT JOIN" class="fancybox"><img alt="SQL RIGHT JOIN" title="SQL RIGHT JOIN" data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_rightjoin.gif" class="lazyload"></a></p>
<h4 id="5-4-8-FULL-JOIN-全外连接"><a href="#5-4-8-FULL-JOIN-全外连接" class="headerlink" title="5.4.8 FULL JOIN 全外连接"></a>5.4.8 FULL JOIN 全外连接</h4><p>FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行.</p>
<p>FULL OUTER JOIN 关键字结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></div>

<p><a href="https://www.runoob.com/wp-content/uploads/2013/09/img_fulljoin.gif" data-fancybox="group" data-caption="SQL FULL OUTER JOIN" class="fancybox"><img alt="SQL FULL OUTER JOIN" title="SQL FULL OUTER JOIN" data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_fulljoin.gif" class="lazyload"></a></p>
<h4 id="5-4-9-NATURAL-JOIN-自然连接"><a href="#5-4-9-NATURAL-JOIN-自然连接" class="headerlink" title="5.4.9 NATURAL JOIN 自然连接"></a>5.4.9 NATURAL JOIN 自然连接</h4><p>Oracle会将第一个表中的列与第二个表中的列具有相同名称的列进行自动连接。用户不需要明确指定列，由系统自动完成。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,ename,job,dname</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure></div>



<h4 id="5-4-10-自连接"><a href="#5-4-10-自连接" class="headerlink" title="5.4.10 自连接"></a>5.4.10 自连接</h4><p>自连接主要用在自参考表上显示上下级关系或层次关系。</p>
<h3 id="5-5-统计"><a href="#5-5-统计" class="headerlink" title="5.5 统计"></a>5.5 统计</h3><h4 id="5-5-1-聚合函数"><a href="#5-5-1-聚合函数" class="headerlink" title="5.5.1 聚合函数"></a>5.5.1 聚合函数</h4><ul>
<li>AVG：平均数</li>
<li>COUNT</li>
<li>MAX</li>
<li>MIN</li>
<li>SUM</li>
<li>VARIANCE：方差</li>
<li>STDDEV：标准差</li>
</ul>
<h4 id="5-5-2-GROUP-BY-函数"><a href="#5-5-2-GROUP-BY-函数" class="headerlink" title="5.5.2 GROUP BY 函数"></a>5.5.2 GROUP BY 函数</h4><p>经常于聚集函数一起使用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job,<span class="keyword">avg</span>(sal),<span class="keyword">sum</span>(sal),<span class="keyword">max</span>(sal),<span class="keyword">count</span>(sal) <span class="keyword">from</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br></pre></td></tr></table></figure></div>



<h4 id="5-5-3-HAVING-子句"><a href="#5-5-3-HAVING-子句" class="headerlink" title="5.5.3 HAVING 子句"></a>5.5.3 HAVING 子句</h4><p>通常与GROUP BY一起使用，吐过没有GROUP BY那么与WHERE效果一样。</p>
<p>但是HAVING子句中可以包含聚合函数，WHERE则不可以。</p>
<h4 id="5-5-4-ORDER-BY-排序"><a href="#5-5-4-ORDER-BY-排序" class="headerlink" title="5.5.4 ORDER BY 排序"></a>5.5.4 ORDER BY 排序</h4><ul>
<li>ASC：升序（默认）</li>
<li>DESC：降序</li>
</ul>
<h2 id="六、视图"><a href="#六、视图" class="headerlink" title="六、视图"></a>六、视图</h2><p>一个虚拟表，视图并不在数据库中存储数据值。但是对视图进行修改数据，实际上就是再修改实际数据，修改实际表也会影响视图。</p>
<h3 id="6-1-创建、修改"><a href="#6-1-创建、修改" class="headerlink" title="6.1 创建、修改"></a>6.1 创建、修改</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>] <span class="keyword">VIEW</span> &lt;视图名&gt; [别名]</span><br><span class="line"><span class="keyword">AS</span> &lt;查询子句&gt;</span><br><span class="line">[<span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">only</span>]</span><br></pre></td></tr></table></figure></div>



<h3 id="6-2-查询"><a href="#6-2-查询" class="headerlink" title="6.2 查询"></a>6.2 查询</h3><p>查询视图就和查询普通的数据表一样的操作</p>
<h3 id="6-3-更新"><a href="#6-3-更新" class="headerlink" title="6.3 更新"></a>6.3 更新</h3><p>可更新视图满足以下条件:</p>
<ul>
<li>没有使用连接函数、聚合函数和组函数;</li>
<li>创建视图的 SELECT语句中没有聚合函数且没有 GROUP BY、 ONNECT BY、<br> START WITDISTINCT子句及关键字</li>
<li>创建视图没有包含只读属性。</li>
</ul>
<p>然后就和操作普通表一样进行INSERT \ UPDATE \ DELETE</p>
<h3 id="6-4-删除视图"><a href="#6-4-删除视图" class="headerlink" title="6.4 删除视图"></a>6.4 删除视图</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名;</span><br></pre></td></tr></table></figure></div>



<h2 id="七、索引"><a href="#七、索引" class="headerlink" title="七、索引"></a>七、索引</h2><p>如果不用索引，那么查询的时候会把表里全部记录都读取出来。用了索引后，只读取索引列。然后根据ROWID快速找到表中对应记录。</p>
<h3 id="7-1-创建索引"><a href="#7-1-创建索引" class="headerlink" title="7.1 创建索引"></a>7.1 创建索引</h3><p>创建表时，如果表中包含唯一关键字或主关键字，会自动为这两种关键字所包含的列建立索引。</p>
<p>在创建索引时，Oracle首先对将要建立索引的字段进行排序，然后将排序后的字段值和对应记录的ROWID存储在索引段中。</p>
<h4 id="7-1-1-注意事项"><a href="#7-1-1-注意事项" class="headerlink" title="7.1.1 注意事项"></a>7.1.1 注意事项</h4><ol>
<li>索引应该建立在 <strong>WHERE子句频繁引用表列</strong>上,如果在大表上频繁使用某列或某几个列作为条件执行索引操作,并<strong>且检索行数低于总行数15%</strong>,那么应该考虑在这些列上建立索引。</li>
<li><strong>限制表中索引的个数</strong>。索引主要用于加快查询速度,但<strong>会降低DM操作的速度</strong>。索引越多,DM操作速度越慢,尤其会极大地影响 INSERT和DELETE操作的速度。因此,规划索引时,必须仔细权衡查询和DML的需求。</li>
<li>指定索引块空间的使用参数。基于表建立索引时, Oracle会将相应表列数据添加到索引块。为索引块添加数据时, OraclePCTFREE会按照参数在索引块上预留部分空间,该预留空间时为将来的 INSERT操作准备的。如果将来在表上执行大量 INSERT操作,那么应该在建立索引时设置较大的 PCTFREE</li>
<li><strong>将表和索引部署到相同的表空间</strong>,可以简化表空间的管理;将表和索引部署到不同的表空间,可以提高访问性能。</li>
<li>当在大表上建立索时,<strong>使用 NOLOGGING选项可以最小化重做记录使用选项</strong>可以节省重做日志空间、降低索引建立时间、提高索引并行建立的性能。<strong>不要在小表上建立索引</strong>。</li>
<li>为了提高多表连接的性能,应该<strong>在连接列上建立索引</strong>。</li>
</ol>
<h4 id="7-1-2-B树索引（默认）"><a href="#7-1-2-B树索引（默认）" class="headerlink" title="7.1.2 B树索引（默认）"></a>7.1.2 B树索引（默认）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(列名[<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...) [pctfree 预留空闲空间值] [<span class="keyword">tablespace</span> 索引段所在的表空间];</span><br></pre></td></tr></table></figure></div>



<h4 id="7-1-3-函数索引"><a href="#7-1-3-函数索引" class="headerlink" title="7.1.3 函数索引"></a>7.1.3 函数索引</h4><p>让索引有一定的计算能力。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(<span class="keyword">LOWER</span>(ename));</span><br></pre></td></tr></table></figure></div>



<h4 id="7-1-4-位图索引"><a href="#7-1-4-位图索引" class="headerlink" title="7.1.4 位图索引"></a>7.1.4 位图索引</h4><p>当列的基数很低时，为其建立B树索引显然不合适。“基数低”表示在索引列中，所有取值的数量比表中行的数据量少。（如，性别，只有男或者女两个选项。但是，记录却有10 000条。Oracle推荐当一个列的基数小于1%时，不建议用B树，而用位图索引）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">BITMAP</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(列名[<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...);</span><br></pre></td></tr></table></figure></div>



<h3 id="7-2-维护索引"><a href="#7-2-维护索引" class="headerlink" title="7.2 维护索引"></a>7.2 维护索引</h3><h4 id="7-2-1-修改索引名"><a href="#7-2-1-修改索引名" class="headerlink" title="7.2.1 修改索引名"></a>7.2.1 修改索引名</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">RENAME</span> <span class="keyword">TO</span> 新索引名;</span><br></pre></td></tr></table></figure></div>



<h3 id="7-3-删除索引"><a href="#7-3-删除索引" class="headerlink" title="7.3 删除索引"></a>7.3 删除索引</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名;</span><br></pre></td></tr></table></figure></div>



<h2 id="八、数据的完整性和约束"><a href="#八、数据的完整性和约束" class="headerlink" title="八、数据的完整性和约束"></a>八、数据的完整性和约束</h2><p>SQL 约束用于规定表中的数据规则。</p>
<p>如果存在违反约束的数据行为，行为会被约束终止。</p>
<p>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</p>
<h3 id="8-1-创建约束"><a href="#8-1-创建约束" class="headerlink" title="8.1 创建约束"></a>8.1 创建约束</h3><h4 id="8-1-1-SQL-CREATE-TABLE-CONSTRAINT-创建表时约束"><a href="#8-1-1-SQL-CREATE-TABLE-CONSTRAINT-创建表时约束" class="headerlink" title="8.1.1 SQL CREATE TABLE + CONSTRAINT 创建表时约束"></a>8.1.1 SQL CREATE TABLE + CONSTRAINT 创建表时约束</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> *table_name*</span><br><span class="line">(</span><br><span class="line">    *column_name1 data_type*(*<span class="keyword">size</span>*) *constraint_name*,</span><br><span class="line">    *column_name2 data_type*(*<span class="keyword">size</span>*) *constraint_name*,</span><br><span class="line">    *column_name3 data_type*(*<span class="keyword">size</span>*) *constraint_name*,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p>在 SQL 中，我们有如下约束：</p>
<ul>
<li><strong>NOT NULL</strong> - 指示某列不能存储 NULL 值。</li>
<li><strong>UNIQUE</strong> - 保证某列的每行必须有唯一的值。</li>
<li><strong>PRIMARY KEY</strong> - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li>
<li><strong>FOREIGN KEY</strong> - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li>
<li><strong>CHECK</strong> - 保证列中的值符合指定的条件。</li>
<li><strong>DEFAULT</strong> - 规定没有给列赋值时的默认值。</li>
</ul>
<h4 id="8-1-2-非空约束"><a href="#8-1-2-非空约束" class="headerlink" title="8.1.2 非空约束"></a>8.1.2 非空约束</h4><p>空值（NULL），不存在的值。而不是0或者空字符串。</p>
<p><strong>创建表时约束</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- not null</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Books &#123;</span><br><span class="line">	BookNo <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	bookname <span class="built_in">varchar2</span>(<span class="number">20</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><strong>已经存在的表</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> books <span class="keyword">modify</span> bookname <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></div>



<h4 id="8-1-3-主键约束"><a href="#8-1-3-主键约束" class="headerlink" title="8.1.3 主键约束"></a>8.1.3 主键约束</h4><p>主键约束 = 非空约束 + 唯一性约束</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- primary key</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> member3 &#123;</span><br><span class="line">	<span class="keyword">mid</span> <span class="built_in">number</span> primary <span class="keyword">key</span>,			<span class="comment">-- 主键约束 = 非空约束 + 唯一性约束</span></span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,		<span class="comment">-- 非空约束</span></span><br><span class="line">	email <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">constraint</span> email_uk <span class="keyword">unique</span>		<span class="comment">-- constraint约束，约束名，唯一约束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="8-1-4-唯一性约束"><a href="#8-1-4-唯一性约束" class="headerlink" title="8.1.4 唯一性约束"></a>8.1.4 唯一性约束</h4><p>上面例子中的Email</p>
<h4 id="8-1-5-外键约束"><a href="#8-1-5-外键约束" class="headerlink" title="8.1.5 外键约束"></a>8.1.5 外键约束</h4><p><strong>创表时候</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE departments(</span><br><span class="line">	dep_id NUMBER primary key,</span><br><span class="line">	dep_name VARCHAR2(20)	</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE employees(</span><br><span class="line">	emp_id NUMBER primary key,</span><br><span class="line">	emp_name VARCHAR2(20),</span><br><span class="line">	dep_id,</span><br><span class="line">	foreign key(dep_id) references departments(dep_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p><strong>创表之后</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> 约束名</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(本表列名)</span><br><span class="line"><span class="keyword">references</span> 其他表名(其他列名)</span><br></pre></td></tr></table></figure></div>

<p>如果两个列名相同，第二个可以省略。</p>
<ul>
<li>在定义外键约束时，还可以通过关键字<code>NO ACTION</code> ，那么当删除被引用表中被引用列的数据时将违反外键约束。</li>
<li>使用<code>SET NULL</code>关键字，那么当删除被引用表中被引用列的数据时，外键表中外键列被设置为NULL。要注意外键列必须要支持NULL值</li>
<li>使用<code>CASCADE</code>关键字，那么当删除被引用表中被引用列的数据时，外键表中对应的数据也将被删除（即，级联删除）</li>
</ul>
<h3 id="8-2-删除约束"><a href="#8-2-删除约束" class="headerlink" title="8.2 删除约束"></a>8.2 删除约束</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">constraint</span> 约束名;</span><br></pre></td></tr></table></figure></div>



<h3 id="8-3-禁用约束"><a href="#8-3-禁用约束" class="headerlink" title="8.3 禁用约束"></a>8.3 禁用约束</h3><p>如果直到要插入的数据都是符合条件的，那么可以在插入的时候先关闭约束检查。以达到提高性能。</p>
<ol>
<li><p>在定义约束时禁用（disable）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">	Age <span class="built_in">int</span> <span class="keyword">constraint</span> Age_CK <span class="keyword">check</span> (age &gt; <span class="number">0</span> <span class="keyword">and</span> age &lt; <span class="number">120</span>) <span class="keyword">disable</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>禁用已经存在的约束</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">disable</span> <span class="keyword">constraint</span> 约束名;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="8-4-激活"><a href="#8-4-激活" class="headerlink" title="8.4 激活"></a>8.4 激活</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">enable</span> [<span class="keyword">novalidate</span> | <span class="keyword">validate</span>] <span class="keyword">constraint</span> 约束名;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>novalidate：表示在激活约束时不验证表中已经存在的数据是否满足约束，如过没有该关键字，或者使用validate关键字，则在激活的时候检查。</li>
</ul>
<h2 id="九、PL-SQL"><a href="#九、PL-SQL" class="headerlink" title="九、PL/SQL"></a>九、PL/SQL</h2><h3 id="9-1-运算符"><a href="#9-1-运算符" class="headerlink" title="9.1 运算符"></a>9.1 运算符</h3><h4 id="9-1-1-算术运算符"><a href="#9-1-1-算术运算符" class="headerlink" title="9.1.1 算术运算符"></a>9.1.1 算术运算符</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line">-	（对日期也有效）</span><br><span class="line">*</span><br><span class="line">&#x2F;</span><br><span class="line">**	（指数）</span><br><span class="line">||	（连接字符）</span><br></pre></td></tr></table></figure></div>

<p> extract(year from date1)，改函数用来取date1的年部分。</p>
<h4 id="9-1-2-关系运算符"><a href="#9-1-2-关系运算符" class="headerlink" title="9.1.2 关系运算符"></a>9.1.2 关系运算符</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;、 &lt;&gt;或!&#x3D; 、 &lt;、 &gt;、 &gt;&#x3D;、 &lt;&#x3D;</span><br><span class="line">BETWEEN ... END ...</span><br><span class="line">IN ...</span><br><span class="line">LIKE ...</span><br><span class="line">... IS NULL</span><br></pre></td></tr></table></figure></div>



<h4 id="9-1-3-逻辑运算符"><a href="#9-1-3-逻辑运算符" class="headerlink" title="9.1.3 逻辑运算符"></a>9.1.3 逻辑运算符</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AND</span><br><span class="line">OR </span><br><span class="line">NOT</span><br></pre></td></tr></table></figure></div>



<h4 id="9-1-4-其他"><a href="#9-1-4-其他" class="headerlink" title="9.1.4 其他"></a>9.1.4 其他</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:&#x3D;	赋值符号</span><br></pre></td></tr></table></figure></div>



<h3 id="9-2-变量、常量、数据类型"><a href="#9-2-变量、常量、数据类型" class="headerlink" title="9.2 变量、常量、数据类型"></a>9.2 变量、常量、数据类型</h3><h4 id="9-2-1-定义变量、常量"><a href="#9-2-1-定义变量、常量" class="headerlink" title="9.2.1 定义变量、常量"></a>9.2.1 定义变量、常量</h4><ol>
<li><p>变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;变量名&gt; &lt;数据类型&gt; [(长度):=&lt;初始值&gt;];</span><br></pre></td></tr></table></figure></div>

<p>长度并不是所有类型都有的。</p>
</li>
<li><p>常量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;常量名&gt; constant &lt;数据类型&gt;:=&lt;常量值&gt;;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化：如果没有赋值，那么自动为<strong>NULL</strong></p>
</li>
</ol>
<h4 id="9-2-2-基本数据类型"><a href="#9-2-2-基本数据类型" class="headerlink" title="9.2.2 基本数据类型"></a>9.2.2 基本数据类型</h4><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><ul>
<li>NUMBER、NUMBER(P, S)：整数和浮点数</li>
<li>PLS_INTEGER、BINARY_INTEGER：只能存整数</li>
</ul>
<h5 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h5><ul>
<li>VARCHAR2(maxlength)：maxlength最大值是32767字节，数据库里的是4000字节。不能赋值给数据库的，只能给LONG。</li>
<li>CHAR(maxlength)：最大长度32767字节，默认长度是1。后面空格补齐</li>
<li>LONG：可变字符串</li>
<li>NCHAR、NVARCHAR2：PL/SQL8.0以后加入的</li>
</ul>
<h5 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h5><ul>
<li>DATE：7字节，分别存世纪、年、月、天、时、分、秒</li>
</ul>
<h5 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h5><ul>
<li>BOOLEAN：取值为TRUE,FALSE,NULL</li>
</ul>
<h4 id="9-2-3-特殊数据类型"><a href="#9-2-3-特殊数据类型" class="headerlink" title="9.2.3 特殊数据类型"></a>9.2.3 特殊数据类型</h4><h5 id="TYPE"><a href="#TYPE" class="headerlink" title="%TYPE"></a>%TYPE</h5><p>根据已有字段数据类型自动推断</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_name 表名.列名%TYPE</span><br></pre></td></tr></table></figure></div>

<h5 id="RECORD"><a href="#RECORD" class="headerlink" title="RECORD"></a>RECORD</h5><p>可以理解为自定义结构类型，可以存储由多个列值组成的一行数据。</p>
<p>要先定义，才能声明（和C语言的结构体那样）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type my_record_type is record (</span><br><span class="line">  变量名1 数据类型 [not null][:&#x3D;默认值],</span><br><span class="line">    ...</span><br><span class="line">  变量名n 数据类型 [not null][:&#x3D;默认值]</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<h5 id="ROWTYPE"><a href="#ROWTYPE" class="headerlink" title="%ROWTYPE"></a>%ROWTYPE</h5><p>根据已有记录行自动推断类型 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_row 表名%ROWTYPE</span><br></pre></td></tr></table></figure></div>



<h3 id="9-3-基本程序结构和语句"><a href="#9-3-基本程序结构和语句" class="headerlink" title="9.3 基本程序结构和语句"></a>9.3 基本程序结构和语句</h3><h4 id="9-3-1-程序块"><a href="#9-3-1-程序块" class="headerlink" title="9.3.1 程序块"></a>9.3.1 程序块</h4><p>PL/SQL程序以块为单位</p>
<ol>
<li>声明部分</li>
<li>执行部分</li>
<li>异常处理部分</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DECLARE]</span><br><span class="line">BEGIN</span><br><span class="line">[EXCEPTION]</span><br><span class="line">END</span><br></pre></td></tr></table></figure></div>

<p>示例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; declare</span><br><span class="line">	  a int:&#x3D;100;</span><br><span class="line">	  b int:&#x3D;200;</span><br><span class="line">	  c number;</span><br><span class="line">	begin</span><br><span class="line">	  c:&#x3D;a+b;</span><br><span class="line">	  dbms_output.put_line(c);</span><br><span class="line">	exception</span><br><span class="line">	  when zero_divide then</span><br><span class="line">        dbms_output.put_line(&quot;除数不能为0&quot;);</span><br><span class="line">	end;</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-2-选择语句"><a href="#9-3-2-选择语句" class="headerlink" title="9.3.2 选择语句"></a>9.3.2 选择语句</h4><ol>
<li><p><strong>if…then</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">	if 1 &gt; 0 then</span><br><span class="line">		dbms_output.put_line(&#39;yes&#39;);</span><br><span class="line">	end if;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>if…then…else</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">	if -1 &gt; 0 then</span><br><span class="line">		dbms_output.put_line(&#39;yes&#39;);</span><br><span class="line">	else </span><br><span class="line">	    dbms_output.put_line(&#39;no&#39;);</span><br><span class="line">  end if;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>if…then…elsif</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">  num NUMBER:&#x3D;0;</span><br><span class="line">BEGIN</span><br><span class="line">  if num &gt; 0 then</span><br><span class="line">    dbms_output.put_line(&#39;&gt;&#39;);</span><br><span class="line">  elsif num &#x3D; 0 then</span><br><span class="line">    dbms_output.put_line(&#39;&#x3D;&#x3D;&#39;);</span><br><span class="line">  end if;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="9-3-3-循环语句"><a href="#9-3-3-循环语句" class="headerlink" title="9.3.3 循环语句"></a>9.3.3 循环语句</h4><ol>
<li><p><strong>while</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">  num NUMBER :&#x3D; 0;</span><br><span class="line">BEGIN</span><br><span class="line">  while num &lt; 10 loop</span><br><span class="line">    dbms_output.put_line(num);</span><br><span class="line">    num :&#x3D; num + 1;</span><br><span class="line">  end loop;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>for</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">  for i in reverse 5..10 loop</span><br><span class="line">	  dbms_output.put_line(i);</span><br><span class="line">  end loop;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>

<p>其中，[reverse]可选，不写就是递增。写了就是递减。后面给一个范围。</p>
</li>
</ol>
<h4 id="9-3-4-选择和跳转"><a href="#9-3-4-选择和跳转" class="headerlink" title="9.3.4 选择和跳转"></a>9.3.4 选择和跳转</h4><ol>
<li><p><strong>case</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">	num NUMBER :&#x3D; 2;</span><br><span class="line">BEGIN</span><br><span class="line">	case num</span><br><span class="line">		when 1 then</span><br><span class="line">			dbms_output.put_line(1);</span><br><span class="line">		when 2 then</span><br><span class="line">			dbms_output.put_line(2);</span><br><span class="line">			dbms_output.put_line(&#39;...&#39;);</span><br><span class="line">		when 3 then</span><br><span class="line">			dbms_output.put_line(3);</span><br><span class="line">		end case;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>GOTO</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">	num NUMBER :&#x3D; 0;</span><br><span class="line">BEGIN</span><br><span class="line">	while num &lt; 5 loop </span><br><span class="line">		&lt;&lt;top&gt;&gt;</span><br><span class="line">		num :&#x3D; num + 1;</span><br><span class="line">		if num &#x3D; 3 then</span><br><span class="line">			goto top;</span><br><span class="line">		end if;</span><br><span class="line">		dbms_output.put_line(num);</span><br><span class="line">	end loop;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="9-3-5-异常"><a href="#9-3-5-异常" class="headerlink" title="9.3.5 异常"></a>9.3.5 异常</h4><ol>
<li><p><strong>异常处理语法</strong>（及自定义异常）</p>
<ul>
<li>声明异常</li>
<li>为内部异常命名</li>
<li>异常定义</li>
<li>异常处理</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">	num NUMBER :&#x3D; 0;</span><br><span class="line">	my_exception EXCEPTION; -- 声明异常</span><br><span class="line">	my_exception2 EXCEPTION;</span><br><span class="line">	my_exception3 EXCEPTION;</span><br><span class="line">	PRAGMA EXCEPTION_INIT(my_exception, -8888);	-- 为内部异常命名,关联错误编号(要负数)和异常名</span><br><span class="line">BEGIN</span><br><span class="line">	if num &#x3D; 0 then</span><br><span class="line">		RAISE my_exception3;	-- 抛出异常</span><br><span class="line">	end if;</span><br><span class="line"></span><br><span class="line">EXCEPTION</span><br><span class="line">	when my_exception then	-- 接受处理异常</span><br><span class="line">		dbms_output.put_line(&#39;my_exception&#39;);</span><br><span class="line">	when my_exception2 then</span><br><span class="line">		dbms_output.put_line(&#39;my_exception2&#39;);</span><br><span class="line">	when others then</span><br><span class="line">		dbms_output.put_line(&#39;other&#39;);</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">other</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>预定义异常</strong></p>
<p>系统内部预定义的异常。（太多了，去百度查把）</p>
</li>
<li><p><strong>空操作和空值</strong></p>
<p>即，占位。可以在IF语句中直接用NULL来占位，表示什么都不做。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">	num NUMBER :&#x3D; 0;</span><br><span class="line">BEGIN</span><br><span class="line">	if num &#x3D; 0 then</span><br><span class="line">		NULL;</span><br><span class="line">	end if;</span><br><span class="line">	dbms_output.put_line(&#39;hello oracle&#39;);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="9-4-系统内置函数"><a href="#9-4-系统内置函数" class="headerlink" title="9.4 系统内置函数"></a>9.4 系统内置函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from dual	-- dual是一个临时表，系统内置的。用这些函数要from表，所以用一个临时表来计算</span><br></pre></td></tr></table></figure></div>



<h5 id="9-4-1-字符类"><a href="#9-4-1-字符类" class="headerlink" title="9.4.1 字符类"></a>9.4.1 字符类</h5><h6 id="ASCII-ch-字符转数字"><a href="#ASCII-ch-字符转数字" class="headerlink" title="ASCII(ch) 字符转数字"></a>ASCII(ch) 字符转数字</h6><p>用于返回对应字符的ASCII码</p>
<h6 id="CHR-i-数字转字符"><a href="#CHR-i-数字转字符" class="headerlink" title="CHR(i) 数字转字符"></a>CHR(i) 数字转字符</h6><p>用于返回ASCII码对应的字符</p>
<h6 id="CONCAT-s1-s2-字符串连接"><a href="#CONCAT-s1-s2-字符串连接" class="headerlink" title="CONCAT(s1,s2) 字符串连接"></a>CONCAT(s1,s2) 字符串连接</h6><p>将S2连接到S1后面</p>
<h6 id="INICAP-s-首字母大写"><a href="#INICAP-s-首字母大写" class="headerlink" title="INICAP(s) 首字母大写"></a>INICAP(s) 首字母大写</h6><p>将s中的单词，首字母大写。单词之间用空格、控制符、标点符号来区分。</p>
<h6 id="INSTR-s1-s2-i-j-查询子字符串"><a href="#INSTR-s1-s2-i-j-查询子字符串" class="headerlink" title="INSTR(s1,s2[,i] [,j]) 查询子字符串"></a>INSTR(s1,s2[,i] [,j]) 查询子字符串</h6><p>查找<strong>s2</strong>在<strong>s1</strong>中，从<strong>i</strong>位置开始，第<strong>j</strong>次出现的位置。（<strong>下标从1开始，如果i是负数，则反向查找。但是返回的下标还是正序</strong>）。没找到返回0</p>
<h6 id="LENGTH-s-计算长度"><a href="#LENGTH-s-计算长度" class="headerlink" title="LENGTH(s) 计算长度"></a>LENGTH(s) 计算长度</h6><p>如果s为null，那么返回值为null</p>
<h6 id="LOWER-s-UPPER-s-小-大写"><a href="#LOWER-s-UPPER-s-小-大写" class="headerlink" title="LOWER(s) / UPPER(s) 小/大写"></a>LOWER(s) / UPPER(s) 小/大写</h6><p> 所有字母转为大小写</p>
<h6 id="LTRIM-s1-s2-RTRIM-TRIM-左-右-左右清除字符串"><a href="#LTRIM-s1-s2-RTRIM-TRIM-左-右-左右清除字符串" class="headerlink" title="LTRIM(s1,s2) / RTRIM / TRIM 左/右/左右清除字符串"></a>LTRIM(s1,s2) / RTRIM / TRIM 左/右/左右清除字符串</h6><p>删除字符串s1中左侧/右侧/两端的s2（如果不写s2，那么默认空格）</p>
<h6 id="REPLACE-s1-s2-s3-替换"><a href="#REPLACE-s1-s2-s3-替换" class="headerlink" title="REPLACE(s1,s2[,s3]) 替换"></a>REPLACE(s1,s2[,s3]) 替换</h6><p>用s3替换s1中出现s2的所有地方（s3默认是空字符串）</p>
<h6 id="SUBSTR-s-i-j-取子串"><a href="#SUBSTR-s-i-j-取子串" class="headerlink" title="SUBSTR(s,i[,j]) 取子串"></a>SUBSTR(s,i[,j]) 取子串</h6><p>截取字符串s，从i开始，长度为j的字符串（如果省略j，默认取到尾部）</p>
<h5 id="9-4-2-数字类"><a href="#9-4-2-数字类" class="headerlink" title="9.4.2 数字类"></a>9.4.2 数字类</h5><h6 id="ABS-n-绝对值"><a href="#ABS-n-绝对值" class="headerlink" title="ABS(n) 绝对值"></a>ABS(n) 绝对值</h6><h6 id="CELL-n-向上取整"><a href="#CELL-n-向上取整" class="headerlink" title="CELL(n) 向上取整"></a>CELL(n) 向上取整</h6><h6 id="COS-n-余弦【2PI-360°】"><a href="#COS-n-余弦【2PI-360°】" class="headerlink" title="COS(n) 余弦【2PI = 360°】"></a>COS(n) 余弦【2PI = 360°】</h6><h6 id="EXP-n-n次幂"><a href="#EXP-n-n次幂" class="headerlink" title="EXP(n) n次幂"></a>EXP(n) n次幂</h6><h6 id="FLOOR-n-向下取整"><a href="#FLOOR-n-向下取整" class="headerlink" title="FLOOR(n) 向下取整"></a>FLOOR(n) 向下取整</h6><h6 id="LOG-n1-n2-对数"><a href="#LOG-n1-n2-对数" class="headerlink" title="LOG(n1,n2) 对数"></a>LOG(n1,n2) 对数</h6><h6 id="MOD-n1-n2-取余"><a href="#MOD-n1-n2-取余" class="headerlink" title="MOD(n1,n2) 取余"></a>MOD(n1,n2) 取余</h6><h6 id="POWER-n1-n2-次方"><a href="#POWER-n1-n2-次方" class="headerlink" title="POWER(n1,n2) 次方"></a>POWER(n1,n2) 次方</h6><h6 id="ROUND-n1-n2-四舍五入"><a href="#ROUND-n1-n2-四舍五入" class="headerlink" title="ROUND(n1,n2) 四舍五入"></a>ROUND(n1,n2) 四舍五入</h6><p>n2是小数点右边几位（要整数）。如果n2是负数，截尾在小数点左边</p>
<h6 id="SIGN-n"><a href="#SIGN-n" class="headerlink" title="SIGN(n)"></a>SIGN(n)</h6><p>负数返回-1，0返回0，正数返回1</p>
<h6 id="SQTR-n-开方"><a href="#SQTR-n-开方" class="headerlink" title="SQTR(n) 开方"></a>SQTR(n) 开方</h6><h6 id="TRUNC-n1-n2-截取小数"><a href="#TRUNC-n1-n2-截取小数" class="headerlink" title="TRUNC(n1,n2) 截取小数"></a>TRUNC(n1,n2) 截取小数</h6><p>截取小数点n2位的数，默认0。如果n2是负数，截尾在小数点左边</p>
<h5 id="9-4-3-日期和时间类"><a href="#9-4-3-日期和时间类" class="headerlink" title="9.4.3 日期和时间类"></a>9.4.3 日期和时间类</h5><h6 id="ADD-MONTHS-d-i"><a href="#ADD-MONTHS-d-i" class="headerlink" title="ADD_MONTHS(d,i)"></a>ADD_MONTHS(d,i)</h6><p>当前日期d加上i个月</p>
<h6 id="LAST-DAY-d"><a href="#LAST-DAY-d" class="headerlink" title="LAST_DAY(d)"></a>LAST_DAY(d)</h6><p>返回d日期，该月最后一天</p>
<h6 id="NEW-TIME-d1-t1-t2"><a href="#NEW-TIME-d1-t1-t2" class="headerlink" title="NEW_TIME(d1,t1,t2)"></a>NEW_TIME(d1,t1,t2)</h6><p>时区转换？将t1时区中的d1时间转换成t2时区的时间</p>
<h6 id="SYSDATE-当前时间"><a href="#SYSDATE-当前时间" class="headerlink" title="SYSDATE() 当前时间"></a>SYSDATE() 当前时间</h6><h5 id="9-4-4-转换类"><a href="#9-4-4-转换类" class="headerlink" title="9.4.4 转换类"></a>9.4.4 转换类</h5><p>to_char(日期变量, ‘YYYY-MM-DD’)</p>
<h3 id="9-5-自定义函数"><a href="#9-5-自定义函数" class="headerlink" title="9.5 自定义函数"></a>9.5 自定义函数</h3><p><strong>函数必须有返回值！</strong></p>
<h4 id="9-5-1-函数的定义"><a href="#9-5-1-函数的定义" class="headerlink" title="9.5.1 函数的定义"></a>9.5.1 函数的定义</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace function my_fun(num NUMBER) return number is</span><br><span class="line">	var_tmp number;</span><br><span class="line">BEGIN</span><br><span class="line">	var_tmp :&#x3D; num + 1;</span><br><span class="line">	return(var_tmp);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>

<p>其中 <code>or replace</code> 可选，如果存在会替换。return 后面跟着类型，begin 和 end之间要有return语句。</p>
<h4 id="9-5-2-函数的调用"><a href="#9-5-2-函数的调用" class="headerlink" title="9.5.2 函数的调用"></a>9.5.2 函数的调用</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">	dbms_output.put_line(&#39;new number: &#39; || my_fun(0));</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>



<h4 id="9-5-3-函数的删除"><a href="#9-5-3-函数的删除" class="headerlink" title="9.5.3 函数的删除"></a>9.5.3 函数的删除</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop function my_fun;</span><br></pre></td></tr></table></figure></div>



<h3 id="9-6-游标"><a href="#9-6-游标" class="headerlink" title="9.6 游标"></a>9.6 游标</h3><p>类似C语言指针对查询结果集进行操作。</p>
<h4 id="9-6-1-显示游标"><a href="#9-6-1-显示游标" class="headerlink" title="9.6.1 显示游标"></a>9.6.1 显示游标</h4><h5 id="声明游标"><a href="#声明游标" class="headerlink" title="声明游标"></a>声明游标</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cursor 游标名[(参数名 参数类型[:&#x3D;默认值])...]</span><br><span class="line">[return 返回类型]</span><br><span class="line">is select语句;</span><br></pre></td></tr></table></figure></div>

<p>返回语句可以不写，如果写了select查询结果的类型则必须要符合返回类型。</p>
<p>参数主要是用来放在select语句的where中用的。</p>
<h5 id="打开游标"><a href="#打开游标" class="headerlink" title="打开游标"></a>打开游标</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open 游标名(参数列表);</span><br></pre></td></tr></table></figure></div>

<p>打开以后，游标会指向select的结果集的第一个记录之前的位置。（有一个属性%found用来判断游标是否有数据）</p>
<h5 id="读取游标"><a href="#读取游标" class="headerlink" title="读取游标"></a>读取游标</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fetch 游标名 into 变量名;</span><br></pre></td></tr></table></figure></div>

<p>将游标指向下一个位置，并且把指向的记录赋值给变量。（最后一条记录之后的记录 和 第一条之前的记录都是不存在的。调用会报错）。一般配合循环语句while。</p>
<h5 id="关闭游标"><a href="#关闭游标" class="headerlink" title="关闭游标"></a>关闭游标</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">close 游标名;</span><br></pre></td></tr></table></figure></div>



<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">    -- 声明游标(这是一个游标变量，类型是后面select返回的记录类型)</span><br><span class="line">    cursor cursor_stu(var_age NUMBER:&#x3D;18) is select * from student where age &#x3D; var_age;</span><br><span class="line">   </span><br><span class="line">    -- 定义临时存放游标的记录类型</span><br><span class="line">    var_tmp student%ROWTYPE;</span><br><span class="line">BEGIN</span><br><span class="line">    -- 打开游标</span><br><span class="line">    open cursor_stu(17);</span><br><span class="line">    </span><br><span class="line">    -- 读取游标（这里要先获取一次，移动到第一条记录，不然条件过不了）</span><br><span class="line">    fetch cursor_stu into var_tmp;</span><br><span class="line">    while cursor_stu%found loop</span><br><span class="line">        dbms_output.put_line(&#39;姓名：&#39;||var_tmp.name||&#39;;年龄：&#39;||var_tmp.age||&#39;出生日期：&#39;||var_tmp.birthday);</span><br><span class="line">        fetch cursor_stu into var_tmp;	-- 读取下一条</span><br><span class="line">    end loop;</span><br><span class="line">    </span><br><span class="line">    -- 关闭游标</span><br><span class="line">    close cursor_stu;</span><br><span class="line">END;	-- 注意结尾END后面还有一个分号（;）</span><br></pre></td></tr></table></figure></div>



<h4 id="9-6-2-隐式游标"><a href="#9-6-2-隐式游标" class="headerlink" title="9.6.2 隐式游标"></a>9.6.2 隐式游标</h4><p>这个一般适用于update、delete这样的处理数据的操纵语句。（就是那个结果：Affected rows: 1）</p>
<p>使用时需要在属性前面加上隐式游标的默认名称——SQL</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">	update student set age &#x3D; 18 where age &#x3D; 12;</span><br><span class="line">	if SQL%notfound then</span><br><span class="line">		dbms_output.put_line(&#39;没有数据被修改&#39;);</span><br><span class="line">	else</span><br><span class="line">		dbms_output.put_line(&#39;修改的行数：&#39;||SQL%rowcount);</span><br><span class="line">	end if;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>



<h4 id="9-6-3-游标变量"><a href="#9-6-3-游标变量" class="headerlink" title="9.6.3 游标变量"></a>9.6.3 游标变量</h4><h5 id="声明游标变量"><a href="#声明游标变量" class="headerlink" title="声明游标变量"></a>声明游标变量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type 游标变量类型名 is ref cursor</span><br><span class="line">return 返回类型;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>返回类型是记录类型</li>
</ul>
<h5 id="打开游标变量"><a href="#打开游标变量" class="headerlink" title="打开游标变量"></a>打开游标变量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open 游标变量 for select语句;</span><br></pre></td></tr></table></figure></div>



<h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">	-- 定义游标变量类型（type_stu_ref是一个游标类型，类型是student%ROWTYPE）</span><br><span class="line">	type type_stu_ref is ref cursor return student%ROWTYPE;</span><br><span class="line">	-- 定义游标变量（cursor_stu是一个游标，类型是type_stu_red）</span><br><span class="line">	cursor_stu type_stu_ref;	</span><br><span class="line">	</span><br><span class="line">	-- 自定义类型（匹配游标变量类型的）</span><br><span class="line">	type my_type is RECORD(</span><br><span class="line">		name student.name%TYPE,</span><br><span class="line">		age student.age%TYPE,</span><br><span class="line">		birthday student.birthday%TYPE</span><br><span class="line">	);</span><br><span class="line">	-- 利用自定义临时变量（var_tmp%TYPE 和 my_type 和 type_stu_ref 都是匹配的）</span><br><span class="line">	var_tmp my_type; </span><br><span class="line">BEGIN</span><br><span class="line">	-- 打开游标</span><br><span class="line">	open cursor_stu for select * from student where age &#x3D; 17;</span><br><span class="line">	</span><br><span class="line">	--读取游标</span><br><span class="line">	fetch cursor_stu into var_tmp;</span><br><span class="line">	while cursor_stu%found loop</span><br><span class="line">		dbms_output.put_line(&#39;姓名：&#39;||var_tmp.name||&#39;;年龄：&#39;||var_tmp.age||&#39;出生日期：&#39;||var_tmp.birthday);</span><br><span class="line">		fetch cursor_stu into var_tmp;</span><br><span class="line">	end loop;</span><br><span class="line">	</span><br><span class="line">	-- 关闭游标(使用关闭后的游标是非法的)</span><br><span class="line">	close cursor_stu;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></div>



<h4 id="9-6-4-游标表达式（暂无，书上没例子）"><a href="#9-6-4-游标表达式（暂无，书上没例子）" class="headerlink" title="9.6.4 游标表达式（暂无，书上没例子）"></a>9.6.4 游标表达式（暂无，书上没例子）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CURSOR(subquery)</span><br></pre></td></tr></table></figure></div>



<h2 id="十、程序包"><a href="#十、程序包" class="headerlink" title="十、程序包"></a>十、程序包</h2><h3 id="10-1-程序包的规范"><a href="#10-1-程序包的规范" class="headerlink" title="10.1 程序包的规范"></a>10.1 程序包的规范</h3><p>其实就类似JAVA的接口或者抽象类，只是声明了变量、类型、游标、函数、过程等，而没有具体的实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create [or replace] package 程序包规范名 is</span><br><span class="line">    [declare_variable];</span><br><span class="line">    [declare_type];</span><br><span class="line">    [declare_cursor];</span><br><span class="line">    [declare_function];</span><br><span class="line">    -- 如：function fun_avg_sal(num_deptno number) return number;</span><br><span class="line">    [declare_procedure];</span><br><span class="line">    -- 如：procedure pro_regulate_sal(var_job varchar2);</span><br><span class="line">end [包名];</span><br></pre></td></tr></table></figure></div>



<h3 id="10-2-程序包的主体"><a href="#10-2-程序包的主体" class="headerlink" title="10.2 程序包的主体"></a>10.2 程序包的主体</h3><p>在主体中实现对应“规范”中声明的函数和存储过程，就像JAVA中对接口或者抽象类进行实现。如果没有实现，直接调用规范里的声明会报错。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create [or replace] package body 程序包规范名（这里同名噢，前面多了一个body关键字） is</span><br><span class="line">    [程序包主体的内部变量]</span><br><span class="line">    [游标主体]</span><br><span class="line">    [从“规范”中引入的函数头部声明]</span><br><span class="line">    function fun_avg_sal(num_deptno number) return number is</span><br><span class="line">    	num_avg_sal number; -- 定义内部变量</span><br><span class="line">    begin</span><br><span class="line">        spl语句;</span><br><span class="line">    [exception]</span><br><span class="line">        ...</span><br><span class="line">    end [fun_avg_sal];</span><br><span class="line">    -- 过程也是一样</span><br><span class="line">end 包名;</span><br></pre></td></tr></table></figure></div>



<h2 id="十一、存储过程"><a href="#十一、存储过程" class="headerlink" title="十一、存储过程"></a>十一、存储过程</h2><p>和函数基本一样，就是少了一个返回类型。</p>
<p>不能在SQL语句中被调用。</p>
<h3 id="11-1-创建-存储过程"><a href="#11-1-创建-存储过程" class="headerlink" title="11.1 创建 存储过程"></a>11.1 创建 存储过程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create [or replace] procedure 存储过程名[(参数列表...)] is | as</span><br><span class="line">begin</span><br><span class="line">	plsql语句;</span><br><span class="line">[exception]</span><br><span class="line">	...</span><br><span class="line">end [存储过程名];</span><br></pre></td></tr></table></figure></div>



<h3 id="11-2-调用-存储过程"><a href="#11-2-调用-存储过程" class="headerlink" title="11.2 调用 存储过程"></a>11.2 调用 存储过程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execute 存储过程名;</span><br></pre></td></tr></table></figure></div>

<p>也可以在PL/SQL块中使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin</span><br><span class="line">	存储过程名;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div>



<h3 id="11-3-删除-存储过程"><a href="#11-3-删除-存储过程" class="headerlink" title="11.3 删除 存储过程"></a>11.3 删除 存储过程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop 存储过程名;</span><br></pre></td></tr></table></figure></div>



<h2 id="十二、触发器"><a href="#十二、触发器" class="headerlink" title="十二、触发器"></a>十二、触发器</h2><p>就是在指定对象上执行某操作的前后进行一些自己的操作，或者用自己的操作直接替换掉该操作。</p>
<h3 id="12-1-创建-触发器"><a href="#12-1-创建-触发器" class="headerlink" title="12.1 创建 触发器"></a>12.1 创建 触发器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create [or replace] trigger 触发器名</span><br><span class="line">	[before | after | instead of] 触发事件（如：insert、update、create等）</span><br><span class="line">	on 表名 | 视图名 | 用户模式名 | 数据库名</span><br><span class="line">	[for each row [when 条件]]</span><br><span class="line">begin</span><br><span class="line">	plsql语句;</span><br><span class="line">end 触发器名;</span><br></pre></td></tr></table></figure></div>

<p><strong>解释：</strong>在（表 | 视图 | 用户模式 | 数据库）上进行insert、update、create等操作时，在执行该操作的前（before）、后（after）执行的plsql，或者用plsql语句代替该操作。如果设置了行级触发器（for each row）那么对于每一行的操作都会触发一次，还可以增加条件，使符合条件的执行触发器。如果米有指定行级触发器那么不管操作了多少行数据，都只会触发一次。</p>
<h3 id="12-2-启用-禁用-触发器"><a href="#12-2-启用-禁用-触发器" class="headerlink" title="12.2 启用/禁用 触发器"></a>12.2 启用/禁用 触发器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter trigger [schema.]触发器名 DISABLE | ENABLE;</span><br></pre></td></tr></table></figure></div>



<h3 id="12-3-删除-触发器"><a href="#12-3-删除-触发器" class="headerlink" title="12.3 删除 触发器"></a>12.3 删除 触发器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop trigger 触发器名;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Phoenix使用</title>
    <url>/2020/04/12/Phoenix%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Phoenix使用"><a href="#Phoenix使用" class="headerlink" title="Phoenix使用"></a>Phoenix使用</h1><p>Phoenix是构建在HBase上的一个SQL层，能让我们用标准的JDBC APIs而不是HBase客户端APIs来创建表，插入数据和对HBase数据进行查询。Phoenix完全使用Java编写，作为HBase内嵌的JDBC驱动。Phoenix查询引擎会将SQL查询转换为一个或多个HBase扫描，并编排执行以生成标准的JDBC结果集。</p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ol>
<li><p>下载 apache-phoenix-4.15.0-HBase-1.4-bin.tar.gz，使用传输工具将下载的tar包上传到hbase集群的master结点中。</p>
</li>
<li><p>tar开，并放到自己想要的路径下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf apache-phoenix-4.15.0-HBase-1.4-bin.tar.gz </span><br><span class="line">$sudo mv apache-phoenix-4.15.0-HBase-1.4-bin &#x2F;soft&#x2F;phoenix</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>添加 phoenix-[version]-server.jar 到所有master和regionserver的lib/下，并重启hbase</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;phoenix]$sudo cp phoenix-4.15.0-HBase-1.4-server.jar &#x2F;soft&#x2F;hbase&#x2F;lib&#x2F;</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;phoenix]$scp -r phoenix-4.15.0-HBase-1.4-server.jar wbw@s202:&#x2F;soft&#x2F;hbase&#x2F;lib&#x2F;</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;phoenix]$scp -r phoenix-4.15.0-HBase-1.4-server.jar wbw@s203:&#x2F;soft&#x2F;hbase&#x2F;lib&#x2F;</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;phoenix]$scp -r phoenix-4.15.0-HBase-1.4-server.jar wbw@s204:&#x2F;soft&#x2F;hbase&#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">$stop-hbase.sh </span><br><span class="line">$start-hbase.sh</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="二、命令行使用"><a href="#二、命令行使用" class="headerlink" title="二、命令行使用"></a>二、命令行使用</h2><h3 id="2-1-进入命令行"><a href="#2-1-进入命令行" class="headerlink" title="2.1 进入命令行"></a>2.1 进入命令行</h3><p>进入phoenix的bin目，录执行$./sqlline.py  master 其中的master为Zookeeper所在节点的主机名。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;phoenix&#x2F;bin]$.&#x2F;sqlline.py s202</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-tables"><a href="#2-2-tables" class="headerlink" title="2.2 !tables"></a>2.2 !tables</h3><p>自动生成的Phoenix系统表。</p>
<p><a href="/postImages/phoenix.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/phoenix.png" class="lazyload"></a></p>
<h3 id="2-3-help"><a href="#2-3-help" class="headerlink" title="2.3 !help"></a>2.3 !help</h3><p>帮助</p>
<h3 id="2-4-exit"><a href="#2-4-exit" class="headerlink" title="2.4 !exit"></a>2.4 !exit</h3><p>退出</p>
<h2 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h2><p>官方语法：<a href="http://phoenix.apache.org/language/index.html" target="_blank" rel="noopener">http://phoenix.apache.org/language/index.html</a></p>
<p><strong>注意</strong>：无论列名还是表名有大小写区分，若为小写需要用双引号，否则默认转大写。</p>
<h3 id="3-1-建表"><a href="#3-1-建表" class="headerlink" title="3.1 建表"></a>3.1 建表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"test"</span>(</span><br><span class="line">    <span class="string">"Row"</span> <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line">    <span class="string">"cf1"</span>.<span class="string">"name"</span> <span class="built_in">VARCHAR</span>,</span><br><span class="line">    <span class="string">"cf1"</span>.<span class="string">"sex"</span> <span class="built_in">VARCHAR</span>,</span><br><span class="line">    <span class="string">"cf2"</span>.<span class="string">"age"</span> <span class="built_in">VARCHAR</span>,</span><br><span class="line">    <span class="string">"cf2"</span>.<span class="string">"address"</span> <span class="built_in">VARCHAR</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<p>命令行显示：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:s202&gt; create table &quot;test&quot;(</span><br><span class="line">. . . . . . . . . . &gt;     &quot;Row&quot; INTEGER PRIMARY KEY, </span><br><span class="line">. . . . . . . . . . &gt;     &quot;cf1&quot;.&quot;name&quot; VARCHAR,</span><br><span class="line">. . . . . . . . . . &gt;     &quot;cf1&quot;.&quot;sex&quot; VARCHAR,</span><br><span class="line">. . . . . . . . . . &gt;     &quot;cf2&quot;.&quot;age&quot; VARCHAR,</span><br><span class="line">. . . . . . . . . . &gt;     &quot;cf2&quot;.&quot;address&quot; VARCHAR</span><br><span class="line">. . . . . . . . . . &gt; );</span><br><span class="line">No rows affected (3.456 seconds)</span><br></pre></td></tr></table></figure></div>

<p>我们打开hbase shell查看一下：可以看到有很多的系统表以及刚创建的test表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):004:0&gt; list_namespace_tables &#39;default&#39;</span><br><span class="line">TABLE     </span><br><span class="line">SYSTEM.CATALOG              </span><br><span class="line">SYSTEM.CHILD_LINK</span><br><span class="line">SYSTEM.FUNCTION</span><br><span class="line">SYSTEM.LOG</span><br><span class="line">SYSTEM.MUTEX</span><br><span class="line">SYSTEM.SEQUENCE</span><br><span class="line">SYSTEM.STATS</span><br><span class="line">SYSTEM.TASK</span><br><span class="line">test</span><br></pre></td></tr></table></figure></div>

<p>查看test表信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):005:0&gt; desc &#39;test&#39;</span><br><span class="line">Table test is ENABLED                                                                                                </span><br><span class="line">test, &#123;TABLE_ATTRIBUTES &#x3D;&gt; &#123;coprocessor$1 &#x3D;&gt; &#39;|org.apache.phoenix.coprocessor.ScanRegionObserver|805306366|&#39;, coproce</span><br><span class="line">ssor$2 &#x3D;&gt; &#39;|org.apache.phoenix.coprocessor.UngroupedAggregateRegionObserver|805306366|&#39;, coprocessor$3 &#x3D;&gt; &#39;|org.apach</span><br><span class="line">e.phoenix.coprocessor.GroupedAggregateRegionObserver|805306366|&#39;, coprocessor$4 &#x3D;&gt; &#39;|org.apache.phoenix.coprocessor.S</span><br><span class="line">erverCachingEndpointImpl|805306366|&#39;, coprocessor$5 &#x3D;&gt; &#39;|org.apache.phoenix.hbase.index.IndexRegionObserver|805306366</span><br><span class="line">|org.apache.hadoop.hbase.index.codec.class&#x3D;org.apache.phoenix.index.PhoenixIndexCodec,index.builder&#x3D;org.apache.phoeni</span><br><span class="line">x.index.PhoenixIndexBuilder&#39;&#125;                                                                                        </span><br><span class="line">COLUMN FAMILIES DESCRIPTION                                                                                          </span><br><span class="line">&#123;NAME &#x3D;&gt; &#39;cf1&#39;, BLOOMFILTER &#x3D;&gt; &#39;NONE&#39;, VERSIONS &#x3D;&gt; &#39;1&#39;, IN_MEMORY &#x3D;&gt; &#39;false&#39;, KEEP_DELETED_CELLS &#x3D;&gt; &#39;FALSE&#39;, DATA_BLO</span><br><span class="line">CK_ENCODING &#x3D;&gt; &#39;FAST_DIFF&#39;, TTL &#x3D;&gt; &#39;FOREVER&#39;, COMPRESSION &#x3D;&gt; &#39;NONE&#39;, MIN_VERSIONS &#x3D;&gt; &#39;0&#39;, BLOCKCACHE &#x3D;&gt; &#39;true&#39;, BLOCK</span><br><span class="line">SIZE &#x3D;&gt; &#39;65536&#39;, REPLICATION_SCOPE &#x3D;&gt; &#39;0&#39;&#125;                                                                           </span><br><span class="line">&#123;NAME &#x3D;&gt; &#39;cf2&#39;, BLOOMFILTER &#x3D;&gt; &#39;NONE&#39;, VERSIONS &#x3D;&gt; &#39;1&#39;, IN_MEMORY &#x3D;&gt; &#39;false&#39;, KEEP_DELETED_CELLS &#x3D;&gt; &#39;FALSE&#39;, DATA_BLO</span><br><span class="line">CK_ENCODING &#x3D;&gt; &#39;FAST_DIFF&#39;, TTL &#x3D;&gt; &#39;FOREVER&#39;, COMPRESSION &#x3D;&gt; &#39;NONE&#39;, MIN_VERSIONS &#x3D;&gt; &#39;0&#39;, BLOCKCACHE &#x3D;&gt; &#39;true&#39;, BLOCK</span><br><span class="line">SIZE &#x3D;&gt; &#39;65536&#39;, REPLICATION_SCOPE &#x3D;&gt; &#39;0&#39;&#125;                                                                           </span><br><span class="line">2 row(s) in 0.1690 seconds</span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-添加（更新）数据"><a href="#3-2-添加（更新）数据" class="headerlink" title="3.2 添加（更新）数据"></a>3.2 添加（更新）数据</h3><p><strong>注意：</strong>太坑了！这里VALUES里面的字符串，需要用 <strong>单引号</strong> ！不能用 <strong>双引号</strong> ！</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPSERT INTO &quot;test&quot;(&quot;Row&quot;,&quot;cf1&quot;.&quot;name&quot;,&quot;cf1&quot;.&quot;sex&quot;,&quot;cf2&quot;.&quot;age&quot;,&quot;cf2&quot;.&quot;address&quot;) VALUES(1,&#39;tom&#39;,&#39;male&#39;,&#39;18&#39;,&#39;USA&#39;);</span><br></pre></td></tr></table></figure></div>

<p>查看数据：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:s202&gt; select * from &quot;test&quot;;</span><br><span class="line">+------+-------+-------+------+----------+</span><br><span class="line">| Row  | name  |  sex  | age  | address  |</span><br><span class="line">+------+-------+-------+------+----------+</span><br><span class="line">| 1    | tom   | male  | 18   | USA      |</span><br><span class="line">+------+-------+-------+------+----------+</span><br><span class="line">1 row selected (0.035 seconds)</span><br><span class="line">0: jdbc:phoenix:s202&gt;</span><br></pre></td></tr></table></figure></div>

<p>利用hbase shell查看：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):006:0&gt; scan &#39;test&#39;</span><br><span class="line">ROW                            COLUMN+CELL                                                                           </span><br><span class="line"> \x80\x00\x00\x01              column&#x3D;cf1:\x00\x00\x00\x00, timestamp&#x3D;1586705443984, value&#x3D;x                         </span><br><span class="line"> \x80\x00\x00\x01              column&#x3D;cf1:\x80\x0B, timestamp&#x3D;1586705443984, value&#x3D;tom                               </span><br><span class="line"> \x80\x00\x00\x01              column&#x3D;cf1:\x80\x0C, timestamp&#x3D;1586705443984, value&#x3D;male                              </span><br><span class="line"> \x80\x00\x00\x01              column&#x3D;cf2:\x80\x0D, timestamp&#x3D;1586705443984, value&#x3D;18                                </span><br><span class="line"> \x80\x00\x00\x01              column&#x3D;cf2:\x80\x0E, timestamp&#x3D;1586705443984, value&#x3D;USA                               </span><br><span class="line">1 row(s) in 0.2330 seconds</span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-删除数据"><a href="#3-3-删除数据" class="headerlink" title="3.3 删除数据"></a>3.3 删除数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:s202&gt; DELETE FROM &quot;test&quot; WHERE &quot;Row&quot; &#x3D; 1;</span><br></pre></td></tr></table></figure></div>

<p>查看结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:s202&gt; select * from &quot;test&quot;;</span><br><span class="line">+------+-------+------+------+----------+</span><br><span class="line">| Row  | name  | sex  | age  | address  |</span><br><span class="line">+------+-------+------+------+----------+</span><br><span class="line">+------+-------+------+------+----------+</span><br><span class="line">No rows selected (0.023 seconds)</span><br></pre></td></tr></table></figure></div>





<h2 id="四、安装SQuirrel客户端"><a href="#四、安装SQuirrel客户端" class="headerlink" title="四、安装SQuirrel客户端"></a>四、安装SQuirrel客户端</h2><p>SQuirreL 客户端是基于java安装，是一个可视化工具。</p>
<p><strong>步骤</strong></p>
<ol>
<li><p>下载 squirrel-sql-4.0.0-standard.jar</p>
</li>
<li><p>打开cmd，运行jar</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\开发安装包\大数据系列软件&gt;java -jar squirrel-sql-4.0.0-standard.jar</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装引导</p>
<p><a href="/postImages/squirrel.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/squirrel.png" class="lazyload"></a></p>
</li>
<li><p>根据需要安装数据库插件（当然我全装了，免得以后麻烦）</p>
<p><a href="/postImages/squirrel2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/squirrel2.png" class="lazyload"></a></p>
</li>
<li><p>开始菜单中，找到客户端程序</p>
<p><a href="/postImages/squirrel3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/squirrel3.png" class="lazyload"></a></p>
</li>
<li><p>配置SQuirrel</p>
<ul>
<li><p>添加phoenix服务器安装目录下的phoenix-[version]-client.jar(即phoenix-4.15.0-HBase-1.4-client.jar)到squirrel-sql安装目录lib/下（重启一下客户端）</p>
</li>
<li><p>添加驱动</p>
<p>URL                    ：jdbc:phoenix:yourHost</p>
<p>Driverclass        :  org.apache.phoenix.jdbc.PhoenixDriver    </p>
</li>
</ul>
</li>
</ol>
<pre><code>![avatar](/postImages/squirrel5.png)

![avatar](/postImages/squirrel6.png)</code></pre><ul>
<li><p>添加别名</p>
<p><a href="/postImages/squirrel7.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/squirrel7.png" class="lazyload"></a></p>
</li>
<li><p>然后点击确定，查看我们创建的表</p>
<p><a href="/postImages/squirrel8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/squirrel8.png" class="lazyload"></a></p>
</li>
</ul>
<ol start="7">
<li><p>开始编写SQL语句</p>
<p><a href="/postImages/squirrel9.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/squirrel9.png" class="lazyload"></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>HBase</category>
      </categories>
      <tags>
        <tag>Phoenix</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC入门案例（基于Hadoop中的类）</title>
    <url>/2019/10/21/RPC%E5%85%A5%E9%97%A8%EF%BC%88%E5%9F%BA%E4%BA%8EHadoop%E4%B8%AD%E7%9A%84%E7%B1%BB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="RPC入门案例（基于Hadoop中的类）"><a href="#RPC入门案例（基于Hadoop中的类）" class="headerlink" title="RPC入门案例（基于Hadoop中的类）"></a>RPC入门案例（基于Hadoop中的类）</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>RPC是远程过程调用（Remote Procedure Call）的缩写形式。SAP系统RPC调用的原理其实很简单，有一些类似于三层构架的C/S系统，第三方的客户程序通过接口调用SAP内部的标准或自定义函数，获得函数返回的数据进行处理后显示或打印。</p>
<h2 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h2><ol>
<li><p>导入依赖</p>
<p>pom.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>RPC-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.rpc.server.TestServer<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写公共接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rpc.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRpc</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RemoteException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">pay</span><span class="params">(<span class="keyword">double</span> money)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写公共接口的实现类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rpc.api.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rpc.api.IRpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IRpc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">682805210518738166L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pay</span><span class="params">(<span class="keyword">double</span> money)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (money &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"付款成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"付款失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写测试服务端并启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rpc.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rpc.api.IRpc;</span><br><span class="line"><span class="keyword">import</span> com.rpc.api.impl.RpcImpl;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"java.rmi.server.hostname"</span>,<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">// 注册管理器</span></span><br><span class="line">        Registry registry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个服务注册管理器</span></span><br><span class="line">            registry = LocateRegistry.createRegistry(<span class="number">30009</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个服务</span></span><br><span class="line">            IRpc server = <span class="keyword">new</span> RpcImpl();</span><br><span class="line">            <span class="comment">// 将服务绑定命名</span></span><br><span class="line">            registry.rebind(<span class="string">"payServer"</span>, server);</span><br><span class="line">            System.out.println(<span class="string">"bind server payServer"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**运行结果显示</span></span><br><span class="line"><span class="comment">bind server payServer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写客户端进行通信</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rpc.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rpc.api.IRpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端（Web端Controller）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册管理器</span></span><br><span class="line">        Registry registry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取服务注册管理器</span></span><br><span class="line">            registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>,<span class="number">30009</span>);</span><br><span class="line">            <span class="comment">// 列出所有注册的服务</span></span><br><span class="line">            String[] list = registry.list();</span><br><span class="line">            <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据命名获取服务</span></span><br><span class="line">            IRpc server = (IRpc) registry.lookup(<span class="string">"payServer"</span>);</span><br><span class="line">            <span class="comment">// 调用远程方法</span></span><br><span class="line">            String result = server.pay(<span class="number">10000</span>);</span><br><span class="line">            <span class="comment">// 输出调用结果</span></span><br><span class="line">            System.out.println(<span class="string">"result from remote : "</span> + result);</span><br><span class="line">            <span class="comment">// 调用远程方法</span></span><br><span class="line">            String result2 = server.pay(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">// 输出调用结果</span></span><br><span class="line">            System.out.println(<span class="string">"result from remote2 : "</span> + result2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException | NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**运行结果显示</span></span><br><span class="line"><span class="comment">payServer</span></span><br><span class="line"><span class="comment">result from remote : 付款成功</span></span><br><span class="line"><span class="comment">result from remote2 : 付款失败</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>




</li>
</ol>
]]></content>
      <categories>
        <category>通讯协议</category>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala学习笔记</title>
    <url>/2020/04/21/Scala%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Scala学习笔记"><a href="#Scala学习笔记" class="headerlink" title="Scala学习笔记"></a>Scala学习笔记</h1><p>java语言的脚本化。</p>
<p>【菜鸟教程】<a href="https://www.runoob.com/scala/scala-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/scala/scala-tutorial.html</a></p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ol>
<li><p>下载 <a href="https://www.scala-lang.org/download/" target="_blank" rel="noopener">https://www.scala-lang.org/download/</a></p>
</li>
<li><p>安装【推荐下载2.11.12，后面spark2.4.3匹配这个版本】</p>
</li>
<li><p>配置环境变量（菜鸟上有教程）</p>
</li>
<li><p>CMD中运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;scala</span><br><span class="line">Welcome to Scala 2.13.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_251).</span><br><span class="line">Type in expressions for evaluation. Or try :help.</span><br><span class="line"></span><br><span class="line">scala&gt; println(&quot;Hello World!&quot;)</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<p><strong>注意 JDK版本，可能会报错</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;java -version</span><br><span class="line">java version &quot;1.8.0_251&quot;</span><br></pre></td></tr></table></figure></div>



<h2 id="二、IDEA中的Scala插件"><a href="#二、IDEA中的Scala插件" class="headerlink" title="二、IDEA中的Scala插件"></a>二、IDEA中的Scala插件</h2><ol>
<li><p>安装插件</p>
<p><a href="/postImages/scalaPlug.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scalaPlug.png" class="lazyload"></a></p>
</li>
<li><p>创建项目/模块</p>
<p><a href="/postImages/scalaPlug1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scalaPlug1.png" class="lazyload"></a></p>
<p><a href="/postImages/scalaPlug2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scalaPlug2.png" class="lazyload"></a></p>
</li>
<li><p>创建一个对象</p>
<p><a href="/postImages/scalaPlug4.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scalaPlug4.png" class="lazyload"></a></p>
</li>
<li><p>编写代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行</p>
<p><a href="/postImages/scalaPlug5.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scalaPlug5.png" class="lazyload"></a></p>
<p><a href="/postImages/scalaPlug6.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scalaPlug6.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><h3 id="3-1-分类"><a href="#3-1-分类" class="headerlink" title="3.1 分类"></a>3.1 分类</h3><ul>
<li>val：常量，不可变</li>
<li>var：变量</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; 1</span><br><span class="line">a: Int &#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; val b &#x3D; 2</span><br><span class="line">b: Int &#x3D; 2</span><br><span class="line"></span><br><span class="line">scala&gt; b &#x3D; 5</span><br><span class="line">         ^</span><br><span class="line">       error: reassignment to val</span><br><span class="line">       </span><br><span class="line">scala&gt; val str:String &#x3D; &quot;kkk&quot;</span><br><span class="line">str: String &#x3D; kkk</span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-类型"><a href="#3-2-类型" class="headerlink" title="3.2 类型"></a>3.2 类型</h3><p><a href="/postImages/scala%E7%B1%BB%E5%9E%8B.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/scala%E7%B1%BB%E5%9E%8B.png" class="lazyload"></a></p>
<p>Scala 与 Java有着相同的数据类型，下表列出了 Scala 支持的数据类型：</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Byte</td>
<td align="left">8位有符号补码整数。数值区间为 -128 到 127</td>
</tr>
<tr>
<td align="left">Short</td>
<td align="left">16位有符号补码整数。数值区间为 -32768 到 32767</td>
</tr>
<tr>
<td align="left">Int</td>
<td align="left">32位有符号补码整数。数值区间为 -2147483648 到 2147483647</td>
</tr>
<tr>
<td align="left">Long</td>
<td align="left">64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807</td>
</tr>
<tr>
<td align="left">Float</td>
<td align="left">32 位, IEEE 754 标准的单精度浮点数</td>
</tr>
<tr>
<td align="left">Double</td>
<td align="left">64 位 IEEE 754 标准的双精度浮点数</td>
</tr>
<tr>
<td align="left">Char</td>
<td align="left">16位无符号Unicode字符, 区间值为 U+0000 到 U+FFFF</td>
</tr>
<tr>
<td align="left">String</td>
<td align="left">字符序列</td>
</tr>
<tr>
<td align="left">Boolean</td>
<td align="left">true或false</td>
</tr>
<tr>
<td align="left">Unit</td>
<td align="left">表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()。</td>
</tr>
<tr>
<td align="left">Null</td>
<td align="left">null 或空引用</td>
</tr>
<tr>
<td align="left">Nothing</td>
<td align="left">Nothing类型在Scala的类层级的最底端；它是任何其他类型的子类型。</td>
</tr>
<tr>
<td align="left">Any</td>
<td align="left">Any是所有其他类的超类</td>
</tr>
<tr>
<td align="left">AnyRef</td>
<td align="left">AnyRef类是Scala里所有引用类(reference class)的基类</td>
</tr>
</tbody></table>
<p>上表中列出的数据类型都是对象，也就是说scala没有java中的原生类型。在scala是可以对数字等基础类型调用方法的。</p>
<h3 id="3-3-类型转换"><a href="#3-3-类型转换" class="headerlink" title="3.3 类型转换"></a>3.3 类型转换</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; 111</span><br><span class="line">a: Int &#x3D; 111</span><br><span class="line"></span><br><span class="line">scala&gt; var b &#x3D; a.toString</span><br><span class="line">b: String &#x3D; 111</span><br></pre></td></tr></table></figure></div>

<p><strong>自定义类型检查和转换</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$scala&gt;class Animal&#123;&#125;</span><br><span class="line">$scala&gt;class Dog extends Animal&#123;&#125;</span><br><span class="line">$scala&gt;val d &#x3D; new Dog();</span><br><span class="line">$scala&gt;d.isInstanceOf[Animal]			&#x2F;&#x2F;true,&#x3D;&#x3D;&#x3D;&gt; instanceOf</span><br><span class="line">$scala&gt;val a &#x3D; d.asInstanceOf[Animal]	&#x2F;&#x2F;强转,&#x3D;&#x3D;&#x3D;&gt; (Animal)d</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;得带对象的类</span><br><span class="line">$scala&gt;d.getClass						&#x2F;&#x2F;d.getClass();</span><br><span class="line">$scala&gt;d.getClass &#x3D;&#x3D; classOf[Dog]		&#x2F;&#x2F;精确匹配</span><br></pre></td></tr></table></figure></div>



<h3 id="3-4-lazy-延迟计算"><a href="#3-4-lazy-延迟计算" class="headerlink" title="3.4 lazy 延迟计算"></a>3.4 lazy 延迟计算</h3><p>有时候可以按需加载，即需要的时候再进行计算。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; lazy val x &#x3D; scala.io.Source.fromFile(&quot;d:&#x2F;tmp&quot;)</span><br><span class="line">x: scala.io.BufferedSource &#x3D; &lt;lazy&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当我们使用x的时候，才会进行计算</span><br><span class="line">scala&gt; x</span><br><span class="line">java.io.FileNotFoundException: d:\tmp (拒绝访问。)</span><br><span class="line">  at java.io.FileInputStream.open0(Native Method)</span><br><span class="line">  at java.io.FileInputStream.open(FileInputStream.java:195)</span><br><span class="line">  at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:138)</span><br><span class="line">  at scala.io.Source$.fromFile(Source.scala:92)</span><br><span class="line">  at scala.io.Source$.fromFile(Source.scala:77)</span><br><span class="line">  at scala.io.Source$.fromFile(Source.scala:55)</span><br><span class="line">  at .x$lzycompute(&lt;console&gt;:1)</span><br><span class="line">  at .x(&lt;console&gt;:1)</span><br><span class="line">  ... 28 elided</span><br></pre></td></tr></table></figure></div>



<h3 id="3-5-表达式"><a href="#3-5-表达式" class="headerlink" title="3.5 表达式"></a>3.5 表达式</h3><p>任何一条表达式都有返回值。如果一个{}中，有多个表达式，其值为最后一个表达式的值。</p>
<p>如果只有一个表达式可以不加分号（；），多个就要用分号隔开。</p>
<h2 id="四、条件判断"><a href="#四、条件判断" class="headerlink" title="四、条件判断"></a>四、条件判断</h2><h3 id="4-1-if-else"><a href="#4-1-if-else" class="headerlink" title="4.1 if-else"></a>4.1 if-else</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; if (1 &gt; 2) &#123;</span><br><span class="line">     | print(&quot;if-1&quot;)</span><br><span class="line">     | &#125; else if (1 &#x3D;&#x3D; 2) &#123;</span><br><span class="line">     | print(&quot;if-2&quot;)</span><br><span class="line">     | &#125; else print(&quot;if-3&quot;)</span><br><span class="line">if-3</span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：如果要换行，要用{}包起来，不然会报错！</strong></p>
<h2 id="五、循环语句"><a href="#五、循环语句" class="headerlink" title="五、循环语句"></a>五、循环语句</h2><h3 id="5-1-while"><a href="#5-1-while" class="headerlink" title="5.1 while"></a>5.1 while</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; 1</span><br><span class="line">a: Int &#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; while(a &lt; 5) &#123;println(a); a +&#x3D; 1;&#125;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div>

<p>还有 <strong>do … while</strong></p>
<h3 id="5-2-for"><a href="#5-2-for" class="headerlink" title="5.2 for"></a>5.2 for</h3><p><strong>闭区间</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for (i &lt;- 1 to 5) println(i)</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>

<p><strong>左闭右开区间</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for (i &lt;- 1 until 5) println(i)</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div>



<h3 id="5-3-循环中断"><a href="#5-3-循环中断" class="headerlink" title="5.3 循环中断"></a>5.3 循环中断</h3><p>scala中没有break和continue来中止循环。但是提供了一个<em>break</em>语句来实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; 1</span><br><span class="line">a: Int &#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; while(true)&#123;</span><br><span class="line">     | println(a);</span><br><span class="line">     | a +&#x3D; 1;</span><br><span class="line">     | if(a &gt;&#x3D; 3) break();</span><br><span class="line">     | &#125;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">scala.util.control.BreakControl</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="5-4-for-循环过滤"><a href="#5-4-for-循环过滤" class="headerlink" title="5.4 for 循环过滤"></a>5.4 for 循环过滤</h3><p>可以在for中对不满足条件的进行过滤操作。</p>
<p>打印出偶数：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for (i &lt;- 1 to 10 if i % 2 &#x3D;&#x3D; 0) println(i)</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure></div>



<h3 id="5-4-for-双重循环"><a href="#5-4-for-双重循环" class="headerlink" title="5.4 for 双重循环"></a>5.4 for 双重循环</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for (i &lt;- 1 to 3; j &lt;- 1 to 2) &#123;</span><br><span class="line">     | printf(&quot;i: %d, j: %d\n&quot;, i, j);</span><br><span class="line">     | &#125;</span><br><span class="line">i: 1, j: 1</span><br><span class="line">i: 1, j: 2</span><br><span class="line">i: 2, j: 1</span><br><span class="line">i: 2, j: 2</span><br><span class="line">i: 3, j: 1</span><br><span class="line">i: 3, j: 2</span><br></pre></td></tr></table></figure></div>



<h3 id="5-5-for-使用-yield"><a href="#5-5-for-使用-yield" class="headerlink" title="5.5 for 使用 yield"></a>5.5 for 使用 yield</h3><p>你可以将 for 循环的返回值作为一个变量存储。语法格式如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for (x &lt;- 1 to 10) yield x</span><br><span class="line">res18: IndexedSeq[Int] &#x3D; Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br></pre></td></tr></table></figure></div>

<p>循环中的 yield 会把当前的元素记下来，保存在集合中，循环结束后将返回该集合。</p>
<h2 id="六、访问修饰符"><a href="#六、访问修饰符" class="headerlink" title="六、访问修饰符"></a>六、访问修饰符</h2><p>Scala 访问修饰符基本和Java的一样，分别有：<strong>private</strong>，<strong>protected</strong>，<strong>public</strong>。</p>
<p>如果没有指定访问修饰符，默认情况下，Scala 对象的访问级别都是 public。</p>
<p>Scala 中的 private 限定符，比 Java 更严格，在嵌套类情况下，外层类甚至不能访问被嵌套类的私有成员。</p>
<p><strong>作用域保护</strong></p>
<p>Scala中，访问修饰符可以通过使用限定词强调。格式为:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private[x] </span><br><span class="line"></span><br><span class="line">或 </span><br><span class="line"></span><br><span class="line">protected[x]</span><br></pre></td></tr></table></figure></div>

<p>这里的x指代某个所属的包、类或单例对象。如果写成private[x],读作”这个成员除了对[…]中的类或[…]中的包中的类及它们的伴生对像可见外，对其它所有类都是private。</p>
<p>这种技巧在横跨了若干包的大型项目中非常有用，它允许你定义一些在你项目的若干子包中可见但对于项目外部的客户却始终不可见的东西。</p>
<h2 id="七、方法与函数"><a href="#七、方法与函数" class="headerlink" title="七、方法与函数"></a>七、方法与函数</h2><p>Scala 有方法与函数，二者在语义上的区别很小。Scala 方法是类的一部分，而函数是一个对象可以赋值给一个变量。换句话来说在类中定义的函数即是方法。</p>
<p>Scala 中的方法跟 Java 的类似，方法是组成类的一部分。</p>
<p>Scala 中的函数则是一个完整的对象，Scala 中的函数其实就是继承了 Trait 的类的对象。</p>
<p>Scala 中使用 <strong>val</strong> 语句可以定义<strong>函数</strong>，<strong>def</strong> 语句定义<strong>方法</strong>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Test&#123;</span><br><span class="line">  def m(x: Int) &#x3D; x + 3</span><br><span class="line">  val f &#x3D; (x: Int) &#x3D;&gt; x + 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="7-1-方法定义"><a href="#7-1-方法定义" class="headerlink" title="7.1 方法定义"></a>7.1 方法定义</h3><p>方法定义由一个 <strong>def</strong> 关键字开始，紧接着是可选的参数列表，一个冒号 <strong>:</strong> 和方法的返回类型，一个等于号 <strong>=</strong> ，最后是方法的主体。</p>
<p>Scala 方法定义格式如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def functionName ([参数列表]) : [return type] &#x3D; &#123;</span><br><span class="line">   function body</span><br><span class="line">   return [expr]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>可以不用写return，每个表达式都有返回值 {}最后会有一个值给函数返回；</p>
</li>
<li><p>没有参数的话，可以不加()；</p>
</li>
</ul>
<p>例子：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def addInt( a:Int, b:Int ) : Int &#x3D; &#123;</span><br><span class="line">    var sum:Int &#x3D; 0</span><br><span class="line">    sum &#x3D; a + b</span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果返回类型是空（即JAVA中的void）,那么<strong>返回类型Unit</strong>可以省略；如果参数为空，那么<strong>()</strong>可以省略：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def printMe( ) : Unit &#x3D; &#123;</span><br><span class="line">	println(&quot;Hello, Scala!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>等价于：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def printMe &#x3D; println(&quot;Hello, Scala!&quot;)</span><br><span class="line">printMe: Unit</span><br><span class="line"></span><br><span class="line">scala&gt; printMe</span><br><span class="line">Hello, Scala!</span><br></pre></td></tr></table></figure></div>



<h3 id="7-2-递归函数"><a href="#7-2-递归函数" class="headerlink" title="7.2 递归函数"></a>7.2 递归函数</h3><p>递归函数必须显式定义返回类型！</p>
<p>打印阶乘：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def fac(n:Int):Int &#x3D; if(n &#x3D;&#x3D; 1) 1 else n * fac(n - 1);</span><br><span class="line">fac: (n: Int)Int</span><br><span class="line"></span><br><span class="line">scala&gt; fac(3)</span><br><span class="line">res24: Int &#x3D; 6</span><br></pre></td></tr></table></figure></div>



<h3 id="7-3-函数参数默认值"><a href="#7-3-函数参数默认值" class="headerlink" title="7.3 函数参数默认值"></a>7.3 函数参数默认值</h3><p>以下是定义了3个参数，其中1.3位带默认参数。的各种情况。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def decorate(prefix:String &#x3D; &quot;[[&quot;,str:String,suffix:String &#x3D; &quot;]]&quot;) &#x3D; &#123;</span><br><span class="line">     | prefix + str + suffix</span><br><span class="line">     | &#125;</span><br><span class="line">decorate: (prefix: String, str: String, suffix: String)String</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可以指定参数名赋值</span><br><span class="line">scala&gt; decorate(str&#x3D;&quot;hello&quot;)</span><br><span class="line">res26: String &#x3D; [[hello]]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 参数不够</span><br><span class="line">scala&gt; decorate(&quot;11&quot;)</span><br><span class="line">               ^</span><br><span class="line">       error: not enough arguments for method decorate: (prefix: String, str: String, suffix: String)String.</span><br><span class="line">       Unspecified value parameter str.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 部分参数</span><br><span class="line">scala&gt; decorate(&quot;11&quot;,&quot;22&quot;)</span><br><span class="line">res30: String &#x3D; 1122]]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全部参数</span><br><span class="line">scala&gt; decorate(&quot;&lt;&lt;&quot;,&quot;22&quot;,&quot;&gt;&gt;&quot;)</span><br><span class="line">res32: String &#x3D; &lt;&lt;22&gt;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 指定参数名，但不按定义顺序</span><br><span class="line">scala&gt; decorate(str&#x3D;&quot;hello&quot;,prefix&#x3D;&quot;&lt;&lt;&quot;)</span><br><span class="line">res34: String &#x3D; &lt;&lt;hello]]</span><br></pre></td></tr></table></figure></div>



<h3 id="7-4-可变参数"><a href="#7-4-可变参数" class="headerlink" title="7.4 可变参数"></a>7.4 可变参数</h3><p>可变参数带个星号（*）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def sum(a:Int*) &#x3D; &#123;</span><br><span class="line">     | var s &#x3D; 0;</span><br><span class="line">     | for (x &lt;- a) s +&#x3D; x;</span><br><span class="line">     | s</span><br><span class="line">     | &#125;</span><br><span class="line">sum: (a: Int*)Int</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 错误！scala.collection.immutable.Range.Inclusive &#x3D; Range 1 to 10</span><br><span class="line">scala&gt; sum(1 to 10)</span><br><span class="line">             ^</span><br><span class="line">       error: type mismatch;</span><br><span class="line">        found   : scala.collection.immutable.Range.Inclusive</span><br><span class="line">        required: Int</span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F; 正确！将1 to 10当做序列处理</span><br><span class="line">scala&gt; sum(1 to 10:_*)</span><br><span class="line">res36: Int &#x3D; 55</span><br></pre></td></tr></table></figure></div>



<h3 id="7-5-apply-和-update"><a href="#7-5-apply-和-update" class="headerlink" title="7.5 apply() 和 update()"></a>7.5 apply() 和 update()</h3><pre><code>Array(100)            //Array.apply(100);
Array(100) = 200    //Array.update(200)</code></pre><h3 id="7-6-闭包"><a href="#7-6-闭包" class="headerlink" title="7.6 闭包"></a>7.6 闭包</h3><p>可以简单的理解为：一个函数中，使用了函数外部的一个变量。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var factor &#x3D; 3  </span><br><span class="line">val multiplier &#x3D; (i:Int) &#x3D;&gt; i * factor</span><br></pre></td></tr></table></figure></div>



<h2 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h2><p>Scala 的异常处理和其它语言比如 Java 类似。</p>
<p>Scala 的方法可以通过抛出异常的方法的方式来终止相关代码的运行，不必通过返回值。</p>
<h3 id="7-1-抛出异常"><a href="#7-1-抛出异常" class="headerlink" title="7.1 抛出异常"></a>7.1 抛出异常</h3><p>Scala 抛出异常的方法和 Java一样，使用 throw 方法，例如，抛出一个新的参数异常：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">throw new IllegalArgumentException</span><br></pre></td></tr></table></figure></div>



<h3 id="7-2-try-catch-finally"><a href="#7-2-try-catch-finally" class="headerlink" title="7.2 try | catch | finally"></a>7.2 try | catch | finally</h3><p>异常捕捉的机制与其他语言中一样，如果有异常发生，catch字句是按次序捕捉的。因此，在catch字句中，越具体的异常越要靠前，越普遍的异常越靠后。 如果抛出的异常不在catch字句中，该异常则无法处理，会被升级到调用者处。</p>
<p>捕捉异常的catch子句，语法与其他语言中不太一样。在Scala里，借用了模式匹配的思想来做异常的匹配，因此，在catch的代码里，是一系列<strong>case</strong>字句。</p>
<p>finally 语句用于执行不管是正常处理还是有异常发生时都需要执行的步骤。</p>
<p>例子：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">FileReader</span></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">FileNotFoundException</span></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">val</span> f = <span class="keyword">new</span> <span class="type">FileReader</span>(<span class="string">"input.txt"</span>)</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">         <span class="keyword">case</span> ex: <span class="type">FileNotFoundException</span> =&gt; &#123;</span><br><span class="line">            println(<span class="string">"Missing file exception"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> ex: <span class="type">IOException</span> =&gt; &#123;</span><br><span class="line">            println(<span class="string">"IO Exception"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         println(<span class="string">"Exiting finally..."</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">Missing file exception</span><br><span class="line">Exiting finally...</span><br></pre></td></tr></table></figure></div>



<h2 id="八、字符串"><a href="#八、字符串" class="headerlink" title="八、字符串"></a>八、字符串</h2><p>在 Scala 中，字符串的类型实际上是 Java String，它本身没有 String 类。</p>
<p>在 Scala 中，String 是一个不可变的对象，所以该对象不可被修改。这就意味着你如果修改字符串就会产生一个新的字符串对象。</p>
<h3 id="8-1-创建字符串"><a href="#8-1-创建字符串" class="headerlink" title="8.1 创建字符串"></a>8.1 创建字符串</h3><p><strong>不可变</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var str &#x3D; &quot;Hello World!&quot;</span><br><span class="line">str: String &#x3D; Hello World!</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var str:String &#x3D; &quot;Hello World!&quot;</span><br><span class="line">str: String &#x3D; Hello World!</span><br></pre></td></tr></table></figure></div>

<p><strong>可变</strong></p>
<p>我们前面提到过 String 对象是不可变的，如果你需要创建一个可以修改的字符串，可以使用 String Builder 类，如下实例:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object Test &#123;</span><br><span class="line">   def main(args: Array[String]) &#123;</span><br><span class="line">      val buf &#x3D; new StringBuilder;</span><br><span class="line">      buf +&#x3D; &#39;a&#39;</span><br><span class="line">      buf ++&#x3D; &quot;bcdef&quot;</span><br><span class="line">      println( &quot;buf is : &quot; + buf.toString );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala</span><br><span class="line">$ scala Test</span><br><span class="line">buf is : abcdef</span><br></pre></td></tr></table></figure></div>



<h3 id="8-2-字符串长度"><a href="#8-2-字符串长度" class="headerlink" title="8.2 字符串长度"></a>8.2 字符串长度</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; str.length()</span><br><span class="line">res43: Int &#x3D; 12</span><br></pre></td></tr></table></figure></div>



<h3 id="8-3-字符串连接"><a href="#8-3-字符串连接" class="headerlink" title="8.3 字符串连接"></a>8.3 字符串连接</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; str.concat(&quot;I&#39;m Tom.&quot;)</span><br><span class="line">res45: String &#x3D; Hello World!I&#39;m Tom.</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; &quot;Hello,&quot; + &quot;Scala&quot;</span><br><span class="line">res46: String &#x3D; Hello,Scala</span><br></pre></td></tr></table></figure></div>



<h3 id="8-4-String-其他方法"><a href="#8-4-String-其他方法" class="headerlink" title="8.4 String 其他方法"></a>8.4 String 其他方法</h3><p>可以像使用JAVA中的String方法到Scala中来使用！</p>
<p>【菜鸟示例】<a href="https://www.runoob.com/scala/scala-strings.html" target="_blank" rel="noopener">https://www.runoob.com/scala/scala-strings.html</a></p>
<h2 id="八、数组"><a href="#八、数组" class="headerlink" title="八、数组"></a>八、数组</h2><h3 id="8-1-定长数组"><a href="#8-1-定长数组" class="headerlink" title="8.1 定长数组"></a>8.1 定长数组</h3><p>可以理解[]相当于JAVA中&lt;&gt;的泛型：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var z &#x3D; new Array[String](3)</span><br></pre></td></tr></table></figure></div>

<p>以上语法中，z 声明一个字符串类型的数组，数组长度为 3 ，可存储 3 个元素。我们可以为每个元素设置值，并通过索引来访问每个元素，如下所示：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var z &#x3D; new Array[String](3)</span><br><span class="line">z: Array[String] &#x3D; Array(null, null, null)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据下表赋值</span><br><span class="line">scala&gt; z(0) &#x3D; &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">scala&gt; z</span><br><span class="line">res48: Array[String] &#x3D; Array(hello, null, null)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据下表获取数据</span><br><span class="line">scala&gt; z(0)</span><br><span class="line">res49: String &#x3D; hello</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var z &#x3D; Array(1,2,3)</span><br><span class="line">z: Array[Int] &#x3D; Array(1, 2, 3)</span><br></pre></td></tr></table></figure></div>

<p>这里同样可以创建数组！但是这里代表的意思是：<strong>创建一个数组，并赋予3个初始值！</strong>而上面那个是创<strong>建一个长度为3的数组</strong>！</p>
<h3 id="8-2-变长数组"><a href="#8-2-变长数组" class="headerlink" title="8.2 变长数组"></a>8.2 变长数组</h3><p>类似C++中的Vector。</p>
<p><strong>创建数组缓冲区对象</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; import scala.collection.mutable.ArrayBuffer</span><br><span class="line">import scala.collection.mutable.ArrayBuffer</span><br><span class="line"></span><br><span class="line">scala&gt; val bufArray &#x3D; ArrayBuffer[Int]()</span><br><span class="line">bufArray: scala.collection.mutable.ArrayBuffer[Int] &#x3D; ArrayBuffer()</span><br></pre></td></tr></table></figure></div>

<p><strong>末尾追加一个元素</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; bufArray +&#x3D; 1</span><br><span class="line">res53: bufArray.type &#x3D; ArrayBuffer(1)</span><br></pre></td></tr></table></figure></div>

<p><strong>末尾追加一个数组</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; bufArray ++&#x3D; Array(2,3,4)</span><br><span class="line">res55: bufArray.type &#x3D; ArrayBuffer(1, 2, 3, 4)</span><br></pre></td></tr></table></figure></div>

<p><strong>删除末尾N个元素</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; bufArray.trimEnd(2)</span><br><span class="line"></span><br><span class="line">scala&gt; bufArray</span><br><span class="line">res59: scala.collection.mutable.ArrayBuffer[Int] &#x3D; ArrayBuffer(1, 2)</span><br></pre></td></tr></table></figure></div>

<p><strong>在索引处插入元素</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; bufArray.insert(0,0)</span><br><span class="line"></span><br><span class="line">scala&gt; bufArray</span><br><span class="line">res61: scala.collection.mutable.ArrayBuffer[Int] &#x3D; ArrayBuffer(0, 1, 2)</span><br></pre></td></tr></table></figure></div>

<p><strong>删除索引处元素</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; bufArray.remove(1)</span><br><span class="line">res62: Int &#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; bufArray</span><br><span class="line">res63: scala.collection.mutable.ArrayBuffer[Int] &#x3D; ArrayBuffer(0, 2)</span><br></pre></td></tr></table></figure></div>

<p><strong>删除索引处开始N个元素</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; bufArray.remove(0, 2)</span><br><span class="line"></span><br><span class="line">scala&gt; bufArray</span><br><span class="line">res66: scala.collection.mutable.ArrayBuffer[Int] &#x3D; ArrayBuffer()</span><br></pre></td></tr></table></figure></div>

<p><strong>转为普通数组</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bufArray.toArray</span><br></pre></td></tr></table></figure></div>



<h3 id="8-3-多维数组"><a href="#8-3-多维数组" class="headerlink" title="8.3 多维数组"></a>8.3 多维数组</h3><p>多维数组一个数组中的值可以是另一个数组，另一个数组的值也可以是一个数组。矩阵与表格是我们常见的二维数组。</p>
<p><strong>创建矩阵数组</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; Array.ofDim[Int](3,3)</span><br><span class="line">a: Array[Array[Int]] &#x3D; Array(Array(0, 0, 0), Array(0, 0, 0), Array(0, 0, 0))</span><br></pre></td></tr></table></figure></div>



<h3 id="8-4-数组常用方法"><a href="#8-4-数组常用方法" class="headerlink" title="8.4 数组常用方法"></a>8.4 数组常用方法</h3><p><strong>排序</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var a &#x3D; Array(1,5,3,2,4)</span><br><span class="line">a: Array[Int] &#x3D; Array(1, 5, 3, 2, 4)</span><br><span class="line"></span><br><span class="line">scala&gt; import scala.util.Sorting._</span><br><span class="line">import scala.util.Sorting._</span><br><span class="line"></span><br><span class="line">scala&gt; quickSort(a)</span><br><span class="line"></span><br><span class="line">scala&gt; a</span><br><span class="line">res71: Array[Int] &#x3D; Array(1, 2, 3, 4, 5)</span><br></pre></td></tr></table></figure></div>



<p><strong>求和</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; a.sum</span><br><span class="line">res67: Int &#x3D; 15</span><br></pre></td></tr></table></figure></div>



<p><strong>最大（小）值</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; a.min</span><br><span class="line">res68: Int &#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; a.max</span><br><span class="line">res69: Int &#x3D; 5</span><br></pre></td></tr></table></figure></div>



<p><strong>格式输出</strong></p>
<p>以什么字符串开头，什么作为分隔符，什么作为结束。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; a.mkString(&quot;[&quot;,&quot;,&quot;,&quot;]&quot;)</span><br><span class="line">res72: String &#x3D; [1,2,3,4,5]</span><br></pre></td></tr></table></figure></div>



<p><strong>数组合并</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var b &#x3D; Array(6,7,8)</span><br><span class="line">b: Array[Int] &#x3D; Array(6, 7, 8)</span><br><span class="line"></span><br><span class="line">scala&gt; a ++ b</span><br><span class="line">res76: Array[Int] &#x3D; Array(1, 2, 3, 4, 5, 6, 7, 8)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">scala&gt; a.concat(b)</span><br><span class="line">res77: Array[Int] &#x3D; Array(1, 2, 3, 4, 5, 6, 7, 8)</span><br></pre></td></tr></table></figure></div>



<p><strong>创建区间数组</strong></p>
<p>第三个参数是步长</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var c &#x3D; Array.range(1, 10, 2)</span><br><span class="line">c: Array[Int] &#x3D; Array(1, 3, 5, 7, 9)</span><br></pre></td></tr></table></figure></div>



<p><strong>Scala数组所有方法</strong></p>
<p>下表中为 Scala 语言中处理数组的重要方法，使用它前我们需要使用 <strong>import Array._</strong> 引入包。</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法和描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>def apply( x: T, xs: T* ): Array[T]</strong>创建指定对象 T 的数组, T 的值可以是 Unit, Double, Float, Long, Int, Char, Short, Byte, Boolean。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>def concat[T]( xss: Array[T]* ): Array[T]</strong>合并数组</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>def copy( src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int ): Unit</strong>复制一个数组到另一个数组上。相等于 Java’s System.arraycopy(src, srcPos, dest, destPos, length)。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>def empty[T]: Array[T]</strong>返回长度为 0 的数组</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>def iterate[T]( start: T, len: Int )( f: (T) =&gt; T ): Array[T]</strong>返回指定长度数组，每个数组元素为指定函数的返回值。以上实例数组初始值为 0，长度为 3，计算函数为<strong>a=&gt;a+1</strong>：<code>scala&gt; Array.iterate(0,3)(a=&gt;a+1) res1: Array[Int] = Array(0, 1, 2)</code></td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>def fill[T]( n: Int )(elem: =&gt; T): Array[T]</strong>返回数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>def fill[T]( n1: Int, n2: Int )( elem: =&gt; T ): Array[Array[T]]</strong>返回二数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>def ofDim[T]( n1: Int ): Array[T]</strong>创建指定长度的数组</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>def ofDim[T]( n1: Int, n2: Int ): Array[Array[T]]</strong>创建二维数组</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>def ofDim[T]( n1: Int, n2: Int, n3: Int ): Array[Array[Array[T]]]</strong>创建三维数组</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>def range( start: Int, end: Int, step: Int ): Array[Int]</strong>创建指定区间内的数组，step 为每个元素间的步长</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><strong>def range( start: Int, end: Int ): Array[Int]</strong>创建指定区间内的数组</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>def tabulate[T]( n: Int )(f: (Int)=&gt; T): Array[T]</strong>返回指定长度数组，每个数组元素为指定函数的返回值，默认从 0 开始。以上实例返回 3 个元素：<code>scala&gt; Array.tabulate(3)(a =&gt; a + 5) res0: Array[Int] = Array(5, 6, 7)</code></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><strong>def tabulate[T]( n1: Int, n2: Int )( f: (Int, Int ) =&gt; T): Array[Array[T]]</strong>返回指定长度的二维数组，每个数组元素为指定函数的返回值，默认从 0 开始。</td>
</tr>
</tbody></table>
<h2 id="九、集合"><a href="#九、集合" class="headerlink" title="九、集合"></a>九、集合</h2><p>【菜鸟集合文档】<a href="https://www.runoob.com/scala/scala-collections.html" target="_blank" rel="noopener">https://www.runoob.com/scala/scala-collections.html</a></p>
<h3 id="9-1-Map-映射"><a href="#9-1-Map-映射" class="headerlink" title="9.1 Map 映射"></a>9.1 Map 映射</h3><h4 id="9-1-1-创建"><a href="#9-1-1-创建" class="headerlink" title="9.1.1 创建"></a>9.1.1 创建</h4><p><strong>可变</strong> Map</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 空哈希表，键为字符串，值为整型</span><br><span class="line">var A:Map[Char,Int] &#x3D; Map()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Map 键值对演示</span><br><span class="line">scala&gt; var map &#x3D; Map(1-&gt;&quot;hello&quot;,2-&gt;&quot;world&quot;)</span><br><span class="line">map: scala.collection.immutable.Map[Int,String] &#x3D; Map(1 -&gt; hello, 2 -&gt; world)</span><br></pre></td></tr></table></figure></div>

<p><strong>不可变</strong> Map</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala.collection.immutable.Map[Int,String]</span><br></pre></td></tr></table></figure></div>



<h4 id="9-1-2-添加与删除"><a href="#9-1-2-添加与删除" class="headerlink" title="9.1.2 添加与删除"></a>9.1.2 添加与删除</h4><p><strong>添加</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map + (3-&gt;&quot;Scala&quot;)</span><br><span class="line">res81: scala.collection.immutable.Map[Int,String] &#x3D; Map(1 -&gt; hello, 2 -&gt; world, 3 -&gt; Scala)</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map +&#x3D; (3-&gt;&quot;Scala&quot;)</span><br><span class="line"></span><br><span class="line">scala&gt; map</span><br><span class="line">res84: scala.collection.immutable.Map[Int,String] &#x3D; Map(1 -&gt; hello, 2 -&gt; world, 3 -&gt; Scala)</span><br></pre></td></tr></table></figure></div>

<p><strong>合并</strong></p>
<p>注意！重复的Key会被后面覆盖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var map1 &#x3D; Map(1-&gt;&quot;one&quot;,2-&gt;&quot;two&quot;)</span><br><span class="line">map1: scala.collection.immutable.Map[Int,String] &#x3D; Map(1 -&gt; one, 2 -&gt; two)</span><br><span class="line"></span><br><span class="line">scala&gt; var map2 &#x3D; Map(2-&gt;&quot;towTmp&quot;,3-&gt;&quot;three&quot;)</span><br><span class="line">map2: scala.collection.immutable.Map[Int,String] &#x3D; Map(2 -&gt; towTmp, 3 -&gt; three)</span><br><span class="line"></span><br><span class="line">scala&gt; map1 ++ map2</span><br><span class="line">res93: scala.collection.immutable.Map[Int,String] &#x3D; Map(1 -&gt; one, 2 -&gt; towTmp, 3 -&gt; three)</span><br></pre></td></tr></table></figure></div>

<p><strong>删除</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map -&#x3D; 1</span><br><span class="line"></span><br><span class="line">scala&gt; map</span><br><span class="line">res90: scala.collection.immutable.Map[Int,String] &#x3D; Map(2 -&gt; world, 3 -&gt; Scala)</span><br></pre></td></tr></table></figure></div>





<h4 id="9-1-3-Key-Value-基本操作"><a href="#9-1-3-Key-Value-基本操作" class="headerlink" title="9.1.3 Key-Value 基本操作"></a>9.1.3 Key-Value 基本操作</h4><p><strong>获取元素</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map(2)</span><br><span class="line">res101: String &#x3D; world</span><br></pre></td></tr></table></figure></div>

<p><strong>返回所有Key</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map.keys</span><br><span class="line">res85: Iterable[Int] &#x3D; Set(1, 2, 3)</span><br></pre></td></tr></table></figure></div>

<p><strong>返回所有Value</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map.values</span><br><span class="line">res87: Iterable[String] &#x3D; Iterable(hello, world, Scala)</span><br></pre></td></tr></table></figure></div>

<p><strong>判断空</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map.isEmpty</span><br><span class="line">res88: Boolean &#x3D; false</span><br></pre></td></tr></table></figure></div>

<p><strong>查看Map中是否存在指定Key</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map.contains(3)</span><br><span class="line">res105: Boolean &#x3D; true</span><br></pre></td></tr></table></figure></div>



<h4 id="9-1-4-遍历"><a href="#9-1-4-遍历" class="headerlink" title="9.1.4 遍历"></a>9.1.4 遍历</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; map1</span><br><span class="line">res99: scala.collection.immutable.Map[Int,String] &#x3D; Map(1 -&gt; one, 2 -&gt; two, 3 -&gt; three)</span><br><span class="line"></span><br><span class="line">scala&gt; map1.keys.foreach&#123;i &#x3D;&gt; printf(&quot;Key: %d, Value: %s\n&quot;, i, map1(i))&#125;</span><br><span class="line">Key: 1, Value: one</span><br><span class="line">Key: 2, Value: two</span><br><span class="line">Key: 3, Value: three</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; for((k, v) &lt;- map1) printf(&quot;Key: %d, Value: %s\n&quot;, k, v)</span><br><span class="line">Key: 1, Value: one</span><br><span class="line">Key: 2, Value: two</span><br><span class="line">Key: 3, Value: three</span><br></pre></td></tr></table></figure></div>



<h3 id="9-2-Tuple-元组"><a href="#9-2-Tuple-元组" class="headerlink" title="9.2 Tuple 元组"></a>9.2 Tuple 元组</h3><p>元组：一组数据的集合</p>
<h4 id="9-2-1-创建"><a href="#9-2-1-创建" class="headerlink" title="9.2.1 创建"></a>9.2.1 创建</h4><p>以一个()返回</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var tuple &#x3D; (1,&quot;2&quot;,true)</span><br><span class="line">tuple: (Int, String, Boolean) &#x3D; (1,2,true)</span><br></pre></td></tr></table></figure></div>

<h4 id="9-2-2-获取元素"><a href="#9-2-2-获取元素" class="headerlink" title="9.2.2 获取元素"></a>9.2.2 获取元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; tuple._1</span><br><span class="line">res109: Int &#x3D; 1</span><br></pre></td></tr></table></figure></div>

<p>注意：下标是1开始</p>
<h4 id="9-2-3-zip-拉链操作"><a href="#9-2-3-zip-拉链操作" class="headerlink" title="9.2.3 zip 拉链操作"></a>9.2.3 zip 拉链操作</h4><p>数组进行ZIP，两两组合成一个元组，多余无法匹配的被丢弃。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; var array1 &#x3D; Array(1, 2, 3, 4)</span><br><span class="line">array1: Array[Int] &#x3D; Array(1, 2, 3, 4)</span><br><span class="line"></span><br><span class="line">scala&gt; var array2 &#x3D; Array(&quot;One&quot;,&quot;Two&quot;,&quot;Three&quot;)</span><br><span class="line">array2: Array[String] &#x3D; Array(One, Two, Three)</span><br><span class="line"></span><br><span class="line">scala&gt; array1.zip(array2)</span><br><span class="line">res111: Array[(Int, String)] &#x3D; Array((1,One), (2,Two), (3,Three))</span><br></pre></td></tr></table></figure></div>



<h3 id="9-3-List-列表"><a href="#9-3-List-列表" class="headerlink" title="9.3 List 列表"></a>9.3 List 列表</h3><p>Scala 列表类似于数组，它们所有元素的类型都相同，但是它们也有所不同：列表是不可变的，值一旦被定义了就不能改变，其次列表 具有递归的结构（也就是链接表结构）而数组不是。。</p>
<h4 id="9-3-1-创建"><a href="#9-3-1-创建" class="headerlink" title="9.3.1 创建"></a>9.3.1 创建</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串列表</span></span><br><span class="line"><span class="keyword">val</span> site: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">"Runoob"</span>, <span class="string">"Google"</span>, <span class="string">"Baidu"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整型列表</span></span><br><span class="line"><span class="keyword">val</span> nums: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空列表</span></span><br><span class="line"><span class="keyword">val</span> empty: <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维列表</span></span><br><span class="line"><span class="keyword">val</span> dim: <span class="type">List</span>[<span class="type">List</span>[<span class="type">Int</span>]] =</span><br><span class="line">   <span class="type">List</span>(</span><br><span class="line">      <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">      <span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">      <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">   )</span><br></pre></td></tr></table></figure></div>

<p>构造列表的两个基本单位是 <strong>Nil</strong> 和 <strong>::</strong>    (:: 是右结合)</p>
<p><strong>Nil</strong> 也可以表示为一个空列表。</p>
<p>以上实例我们可以写成如下所示：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串列表</span></span><br><span class="line"><span class="keyword">val</span> site = <span class="string">"Runoob"</span> :: (<span class="string">"Google"</span> :: (<span class="string">"Baidu"</span> :: <span class="type">Nil</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整型列表</span></span><br><span class="line"><span class="keyword">val</span> nums = <span class="number">1</span> :: (<span class="number">2</span> :: (<span class="number">3</span> :: (<span class="number">4</span> :: <span class="type">Nil</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空列表</span></span><br><span class="line"><span class="keyword">val</span> empty = <span class="type">Nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维列表</span></span><br><span class="line"><span class="keyword">val</span> dim = (<span class="number">1</span> :: (<span class="number">0</span> :: (<span class="number">0</span> :: <span class="type">Nil</span>))) ::</span><br><span class="line">          (<span class="number">0</span> :: (<span class="number">1</span> :: (<span class="number">0</span> :: <span class="type">Nil</span>))) ::</span><br><span class="line">          (<span class="number">0</span> :: (<span class="number">0</span> :: (<span class="number">1</span> :: <span class="type">Nil</span>))) :: <span class="type">Nil</span></span><br></pre></td></tr></table></figure></div>

<p><strong>fill</strong></p>
<p>我们可以使用 List.fill() 方法来创建一个指定重复数量的元素列表：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> site = <span class="type">List</span>.fill(<span class="number">3</span>)(<span class="string">"Runoob"</span>) <span class="comment">// 重复 Runoob 3次</span></span><br><span class="line">      println( <span class="string">"site : "</span> + site  )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> num = <span class="type">List</span>.fill(<span class="number">10</span>)(<span class="number">2</span>)         <span class="comment">// 重复元素 2, 10 次</span></span><br><span class="line">      println( <span class="string">"num : "</span> + num  )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="9-3-2-基本操作"><a href="#9-3-2-基本操作" class="headerlink" title="9.3.2 基本操作"></a>9.3.2 基本操作</h4><ul>
<li><p><code>head</code> 返回列表第一个元素</p>
</li>
<li><p><code>tail</code> 返回一个列表，包含除了第一元素之外的其他元素</p>
</li>
<li><p><code>isEmpty</code> 在列表为空时返回true</p>
</li>
<li><p><code>reverse</code> 用于将列表的顺序反转</p>
</li>
</ul>
<h4 id="9-3-3-连接列表"><a href="#9-3-3-连接列表" class="headerlink" title="9.3.3 连接列表"></a>9.3.3 连接列表</h4><p>你可以使用 <strong>:::</strong> 运算符或 <strong>List.:::()</strong> 方法或 <strong>List.concat()</strong> 方法或<strong>ListA ++ ListB</strong>来连接两个或多个列表。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> site1 = <span class="string">"Runoob"</span> :: (<span class="string">"Google"</span> :: (<span class="string">"Baidu"</span> :: <span class="type">Nil</span>))</span><br><span class="line">      <span class="keyword">val</span> site2 = <span class="string">"Facebook"</span> :: (<span class="string">"Taobao"</span> :: <span class="type">Nil</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用 ::: 运算符</span></span><br><span class="line">      <span class="keyword">var</span> fruit = site1 ::: site2</span><br><span class="line">      println( <span class="string">"site1 ::: site2 : "</span> + fruit )</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用 List.:::() 方法</span></span><br><span class="line">      fruit = site1.:::(site2)</span><br><span class="line">      println( <span class="string">"site1.:::(site2) : "</span> + fruit )</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用 concat 方法</span></span><br><span class="line">      fruit = <span class="type">List</span>.concat(site1, site2)</span><br><span class="line">      println( <span class="string">"List.concat(site1, site2) : "</span> + fruit  )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="9-4-Set-集合"><a href="#9-4-Set-集合" class="headerlink" title="9.4 Set 集合"></a>9.4 Set 集合</h3><p>Scala Set(集合)是没有重复的对象集合，所有的元素都是唯一的。</p>
<p>Scala 集合分为可变的和不可变的集合。</p>
<p>默认情况下，Scala 使用的是不可变集合，如果你想使用可变集合，需要引用 <strong>scala.collection.mutable.Set</strong> 包。</p>
<h4 id="9-4-1-创建、添加、删除"><a href="#9-4-1-创建、添加、删除" class="headerlink" title="9.4.1 创建、添加、删除"></a>9.4.1 创建、添加、删除</h4><p>默认引用 scala.collection.immutable.Set，不可变集合实例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> set = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">println(set.getClass.getName) <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">println(set.exists(_ % <span class="number">2</span> == <span class="number">0</span>)) <span class="comment">//true</span></span><br><span class="line">println(set.drop(<span class="number">1</span>)) <span class="comment">//Set(2,3)</span></span><br></pre></td></tr></table></figure></div>

<p>如果需要使用可变集合需要引入 scala.collection.mutable.Set：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">Set</span> <span class="comment">// 可以在任何地方引入 可变集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> mutableSet = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">println(mutableSet.getClass.getName) <span class="comment">// scala.collection.mutable.HashSet</span></span><br><span class="line"></span><br><span class="line">mutableSet.add(<span class="number">4</span>)		<span class="comment">// 添加</span></span><br><span class="line">mutableSet.remove(<span class="number">1</span>)	<span class="comment">// 删除</span></span><br><span class="line">mutableSet += <span class="number">5</span></span><br><span class="line">mutableSet -= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">println(mutableSet) <span class="comment">// Set(5, 3, 4)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> another = mutableSet.toSet</span><br><span class="line">println(another.getClass.getName) <span class="comment">// scala.collection.immutable.Set</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>注意：</strong> 虽然可变Set和不可变Set都有添加或删除元素的操作，但是有一个非常大的差别。对不可变Set进行操作，会产生一个新的set，原来的set并没有改变，这与List一样。 而对可变Set进行操作，改变的是该Set本身，与ListBuffer类似。</p>
</blockquote>
<h4 id="9-4-2-连接集合"><a href="#9-4-2-连接集合" class="headerlink" title="9.4.2 连接集合"></a>9.4.2 连接集合</h4><p>你可以使用 <strong>++</strong> 运算符或 <strong>Set.++()</strong> 方法来连接两个集合。如果元素有重复的就会移除重复的元素。实例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> site1 = <span class="type">Set</span>(<span class="string">"Runoob"</span>, <span class="string">"Google"</span>, <span class="string">"Baidu"</span>)</span><br><span class="line">      <span class="keyword">val</span> site2 = <span class="type">Set</span>(<span class="string">"Faceboook"</span>, <span class="string">"Taobao"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ++ 作为运算符使用</span></span><br><span class="line">      <span class="keyword">var</span> site = site1 ++ site2</span><br><span class="line">      println( <span class="string">"site1 ++ site2 : "</span> + site )</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  ++ 作为方法使用</span></span><br><span class="line">      site = site1.++(site2)</span><br><span class="line">      println( <span class="string">"site1.++(site2) : "</span> + site )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim Test.scala </span><br><span class="line">$ scala Test.scala </span><br><span class="line">site1 ++ site2 : Set(Faceboook, Taobao, Google, Baidu, Runoob)</span><br><span class="line">site1.++(site2) : Set(Faceboook, Taobao, Google, Baidu, Runoob)</span><br></pre></td></tr></table></figure></div>



<h4 id="9-4-3-交集"><a href="#9-4-3-交集" class="headerlink" title="9.4.3 交集"></a>9.4.3 交集</h4><p>你可以使用 <strong>Set.&amp;</strong> 方法或 <strong>Set.intersect</strong> 方法来查看两个集合的交集元素。实例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> num1 = <span class="type">Set</span>(<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">45</span>)</span><br><span class="line">      <span class="keyword">val</span> num2 = <span class="type">Set</span>(<span class="number">50</span>,<span class="number">60</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">35</span>,<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交集</span></span><br><span class="line">      println( <span class="string">"num1.&amp;(num2) : "</span> + num1.&amp;(num2) )</span><br><span class="line">      println( <span class="string">"num1.intersect(num2) : "</span> + num1.intersect(num2) )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim Test.scala </span><br><span class="line">$ scala Test.scala </span><br><span class="line">num1.&amp;(num2) : Set(20, 9)</span><br><span class="line">num1.intersect(num2) : Set(20, 9)</span><br></pre></td></tr></table></figure></div>



<h2 id="十、迭代器"><a href="#十、迭代器" class="headerlink" title="十、迭代器"></a>十、迭代器</h2><p>Scala Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法。</p>
<p>迭代器 it 的两个基本操作是 <strong>next</strong> 和 <strong>hasNext</strong>。</p>
<p>调用 <strong>it.next()</strong> 会返回迭代器的下一个元素，并且更新迭代器的状态。</p>
<p>调用 <strong>it.hasNext()</strong> 用于检测集合中是否还有元素。</p>
<p>让迭代器 it 逐个返回所有元素最简单的方法是使用 while 循环：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object Test &#123;</span><br><span class="line">   def main(args: Array[String]) &#123;</span><br><span class="line">      val it &#x3D; Iterator(&quot;Baidu&quot;, &quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;)</span><br><span class="line">      </span><br><span class="line">      while (it.hasNext)&#123;</span><br><span class="line">         println(it.next())</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">Baidu</span><br><span class="line">Google</span><br><span class="line">Runoob</span><br><span class="line">Taobao</span><br></pre></td></tr></table></figure></div>

<p><strong>最大最小值</strong></p>
<p>你可以使用 <strong>it.min</strong> 和 <strong>it.max</strong> 方法从迭代器中查找最大与最小元素，实例如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object Test &#123;</span><br><span class="line">   def main(args: Array[String]) &#123;</span><br><span class="line">      val ita &#x3D; Iterator(20,40,2,50,69, 90)</span><br><span class="line">      val itb &#x3D; Iterator(20,40,2,50,69, 90)</span><br><span class="line">      </span><br><span class="line">      println(&quot;最大元素是：&quot; + ita.max )</span><br><span class="line">      println(&quot;最小元素是：&quot; + itb.min )</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">最大元素是：90</span><br><span class="line">最小元素是：2</span><br></pre></td></tr></table></figure></div>

<p><strong>获取迭代器的长度</strong></p>
<p>你可以使用 <strong>it.size</strong> 或 <strong>it.length</strong> 方法来查看迭代器中的元素个数。实例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object Test &#123;</span><br><span class="line">   def main(args: Array[String]) &#123;</span><br><span class="line">      val ita &#x3D; Iterator(20,40,2,50,69, 90)</span><br><span class="line">      val itb &#x3D; Iterator(20,40,2,50,69, 90)</span><br><span class="line">      </span><br><span class="line">      println(&quot;ita.size 的值: &quot; + ita.size )</span><br><span class="line">      println(&quot;itb.length 的值: &quot; + itb.length )</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">ita.size 的值: 6</span><br><span class="line">itb.length 的值: 6</span><br></pre></td></tr></table></figure></div>

<p>【其他常用方法】<a href="https://www.runoob.com/scala/scala-iterators.html" target="_blank" rel="noopener">https://www.runoob.com/scala/scala-iterators.html</a></p>
<h2 id="十一、类-与-对象"><a href="#十一、类-与-对象" class="headerlink" title="十一、类 与 对象"></a>十一、类 与 对象</h2><p>类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。类是用于创建对象的蓝图，它是一个定义包括在特定类型的对象中的方法和变量的软件模板。</p>
<p>如果不什声明修饰符，那么默认是<strong>public</strong>。</p>
<h3 id="11-1-定义类"><a href="#11-1-定义类" class="headerlink" title="11.1 定义类"></a>11.1 定义类</h3><p><strong>示例</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params">val xc: <span class="type">Int</span>,var yc: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 编译后生成getter和setter方法:</span></span><br><span class="line">    <span class="comment">// public int x();</span></span><br><span class="line">    <span class="comment">// public void x_$eq(int);</span></span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> = xc</span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> = yc</span><br><span class="line">    <span class="comment">// 常量只有getter方法，没有setter方法</span></span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">"P1"</span></span><br><span class="line">    <span class="comment">// 私有变量必须赋初始值，getter和setter方法也是私有</span></span><br><span class="line">    <span class="comment">// 同时限定了id只能在本对象中使用，不加的话，在函数参数中其他Point对象也能用</span></span><br><span class="line">    <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(dx: <span class="type">Int</span>, dy: <span class="type">Int</span>) &#123;</span><br><span class="line">      x = x + dx</span><br><span class="line">      y = y + dy</span><br><span class="line">      println (<span class="string">"x 的坐标点: "</span> + x)</span><br><span class="line">      println (<span class="string">"y 的坐标点: "</span> + y)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="type">Point</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">//  public int x();           ==&gt;  p.x  因为没有参数()可以省略</span></span><br><span class="line">    println(p.x)</span><br><span class="line">    <span class="comment">//  public void x_$eq(int);   ==&gt;  p.x_=(5)</span></span><br><span class="line">    p.x_=(<span class="number">5</span>)</span><br><span class="line">    println(p.x)</span><br><span class="line">    <span class="comment">// public void x_$eq(int); 相当于C++里的运算符重载，可以直接用 =</span></span><br><span class="line">    p.x = <span class="number">4</span></span><br><span class="line">    println(p.x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行结果</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div>



<h3 id="11-2-BeanProperty-注解"><a href="#11-2-BeanProperty-注解" class="headerlink" title="11.2 BeanProperty 注解"></a>11.2 BeanProperty 注解</h3><p>为了能更好的配合JAVA的一些工具类，提供了注解的方式，来生成JAVA风格的getter和setter。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.beans.<span class="type">BeanProperty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后生成JAVA风格的getter和setter方法:</span></span><br><span class="line"><span class="comment">// public int getY();</span></span><br><span class="line"><span class="comment">// public void setY(int);</span></span><br><span class="line"><span class="meta">@BeanProperty</span></span><br><span class="line"><span class="keyword">var</span> y: <span class="type">Int</span> = yc</span><br></pre></td></tr></table></figure></div>



<h3 id="11-3-构造函数"><a href="#11-3-构造函数" class="headerlink" title="11.3 构造函数"></a>11.3 构造函数</h3><h4 id="11-3-1-主构造"><a href="#11-3-1-主构造" class="headerlink" title="11.3.1 主构造"></a>11.3.1 主构造</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val name:<span class="type">String</span>,var age:<span class="type">Int</span> , id :<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>() = println(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译 <strong>scalac test.scala</strong>、 <strong>javap Person.class</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> age_$eq(<span class="keyword">int</span>);</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(java.lang.String, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到如果在类参数中加上var\val或者不加，也会生成相应的属性。</p>
<ul>
<li><p>val：只读，即只有get</p>
</li>
<li><p>var：有get和set</p>
</li>
<li><p>无类型：虽然编译后没有该属性，但如果有用到该属性的时候，也会创建一个。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"tom"</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br><span class="line">p.hello()</span><br><span class="line">p.id  <span class="comment">// 错误！无法调用</span></span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h4 id="11-3-2-辅助构造"><a href="#11-3-2-辅助构造" class="headerlink" title="11.3.2 辅助构造"></a>11.3.2 辅助构造</h4><p><strong>注意：</strong>使用辅助构造的时候，第一行必须有this()或this(…)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"tom"</span> ;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助构造</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//辅助构造</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>,age:<span class="type">Int</span>)&#123;</span><br><span class="line">        <span class="comment">//调用辅助构造!</span></span><br><span class="line">        <span class="keyword">this</span>(name) ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="11-4-object-对象"><a href="#11-4-object-对象" class="headerlink" title="11.4 object 对象"></a>11.4 object 对象</h3><h4 id="11-4-1-单例对象"><a href="#11-4-1-单例对象" class="headerlink" title="11.4.1 单例对象"></a>11.4.1 单例对象</h4><p><strong>说明：</strong></p>
<p>scala没有静态的概念，如果需要定义静态成员，可以通过object实现。object对象不能带参数。</p>
<p>编译完成后，会生成对应的类，方法都是静态方法，非静态成员对应到单例类中</p>
<p>单例类以Util$作为类名称。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Util</span></span>&#123;</span><br><span class="line">	<span class="comment">//单例类中.(Util$)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">var</span> brand = <span class="string">"benz"</span> ;</span><br><span class="line">	<span class="comment">//静态方法.</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>() = println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">Util</span>.hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure></div>



<h4 id="11-4-2-伴生对象"><a href="#11-4-2-伴生对象" class="headerlink" title="11.4.2 伴生对象"></a>11.4.2 伴生对象</h4><p>当单例对象与某个类共享同一个名称时，他被称作是这个类的伴生对象：companion object。你必须在同一个源文件里定义类和它的伴生对象。类被称为是这个单例对象的伴生类：companion class。类和它的伴生对象可以互相访问其私有成员。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span>() = &#123;</span><br><span class="line">        <span class="type">Car</span>.run()	<span class="comment">// 可以调用！因为是伴生</span></span><br><span class="line">        println(<span class="string">"stop...."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() = println(<span class="string">"run..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Car</span>().stop()</span><br><span class="line">    <span class="comment">//Car.run()	 错误！不能调用私有静态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run...</span><br><span class="line">stop....</span><br></pre></td></tr></table></figure></div>



<h3 id="11-5-抽象类-与-继承"><a href="#11-5-抽象类-与-继承" class="headerlink" title="11.5 抽象类 与 继承"></a>11.5 抽象类 与 继承</h3><p><strong>一个简单的例子</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">val name:<span class="type">String</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//抽象字段，没有初始化。</span></span><br><span class="line">    <span class="keyword">val</span> id:<span class="type">Int</span>  ;</span><br><span class="line">    <span class="comment">//抽象方法，没有方法体，不需要抽象关键字修饰。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Scala继承一个基类跟Java很相似, 但我们需要注意以下几点：</p>
<ul>
<li>1、重写一个非抽象方法必须使用override修饰符。</li>
<li>2、只有主构造函数才可以往基类的构造函数里写参数。</li>
<li>3、在子类中重写超类的抽象方法时，你不需要使用override关键字。</li>
</ul>
<p>接下来让我们来看个实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params">xc: <span class="type">Int</span>, yc: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> x: <span class="type">Int</span> = xc</span><br><span class="line">   <span class="keyword">var</span> y: <span class="type">Int</span> = yc</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(dx: <span class="type">Int</span>, dy: <span class="type">Int</span>) &#123;</span><br><span class="line">      x = x + dx</span><br><span class="line">      y = y + dy</span><br><span class="line">      println (<span class="string">"x 的坐标点: "</span> + x);</span><br><span class="line">      println (<span class="string">"y 的坐标点: "</span> + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span>(<span class="params">override val xc: <span class="type">Int</span>, override val yc: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">   val zc :<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Point</span>(<span class="params">xc, yc</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> z: <span class="type">Int</span> = zc</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(dx: <span class="type">Int</span>, dy: <span class="type">Int</span>, dz: <span class="type">Int</span>) &#123;</span><br><span class="line">      x = x + dx</span><br><span class="line">      y = y + dy</span><br><span class="line">      z = z + dz</span><br><span class="line">      println (<span class="string">"x 的坐标点 : "</span> + x);</span><br><span class="line">      println (<span class="string">"y 的坐标点 : "</span> + y);</span><br><span class="line">      println (<span class="string">"z 的坐标点 : "</span> + z);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Scala 使用 extends 关键字来继承一个类。实例中 Location 类继承了 Point 类。Point 称为父类(基类)，Location 称为子类。</p>
<p><strong>override val xc</strong> 为重写了父类的字段。</p>
<p>继承会继承父类的所有属性和方法，Scala 只允许继承一个父类<strong>(单继承)</strong>。</p>
<p>实例如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params">val xc: <span class="type">Int</span>, val yc: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> x: <span class="type">Int</span> = xc</span><br><span class="line">   <span class="keyword">var</span> y: <span class="type">Int</span> = yc</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(dx: <span class="type">Int</span>, dy: <span class="type">Int</span>) &#123;</span><br><span class="line">      x = x + dx</span><br><span class="line">      y = y + dy</span><br><span class="line">      println (<span class="string">"x 的坐标点 : "</span> + x);</span><br><span class="line">      println (<span class="string">"y 的坐标点 : "</span> + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span>(<span class="params">override val xc: <span class="type">Int</span>, override val yc: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">   val zc :<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Point</span>(<span class="params">xc, yc</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> z: <span class="type">Int</span> = zc</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(dx: <span class="type">Int</span>, dy: <span class="type">Int</span>, dz: <span class="type">Int</span>) &#123;</span><br><span class="line">      x = x + dx</span><br><span class="line">      y = y + dy</span><br><span class="line">      z = z + dz</span><br><span class="line">      println (<span class="string">"x 的坐标点 : "</span> + x);</span><br><span class="line">      println (<span class="string">"y 的坐标点 : "</span> + y);</span><br><span class="line">      println (<span class="string">"z 的坐标点 : "</span> + z);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> loc = <span class="keyword">new</span> <span class="type">Location</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 移到一个新的位置</span></span><br><span class="line">      loc.move(<span class="number">10</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">x 的坐标点 : 20</span><br><span class="line">y 的坐标点 : 30</span><br><span class="line">z 的坐标点 : 20</span><br></pre></td></tr></table></figure></div>



<p><strong>Scala重写一个非抽象方法，必须用override修饰符。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= getClass.getName + <span class="string">"[name="</span> + name + <span class="string">"]"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> salary = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="keyword">super</span>.toString + <span class="string">"[salary="</span> + salary + <span class="string">"]"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> fred = <span class="keyword">new</span> <span class="type">Employee</span></span><br><span class="line">  fred.name = <span class="string">"Fred"</span></span><br><span class="line">  fred.salary = <span class="number">50000</span></span><br><span class="line">  println(fred)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">Employee[name&#x3D;Fred][salary&#x3D;50000.0]</span><br></pre></td></tr></table></figure></div>



<h2 id="十二、包"><a href="#十二、包" class="headerlink" title="十二、包"></a>十二、包</h2><p>包对象，编译完之后生成以xxx为package，下面含有类package.class + package.class</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">xxxx</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">a.a1.aa1.xxxx</span><br></pre></td></tr></table></figure></div>

<p><strong>限定符</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[<span class="keyword">package</span>|<span class="keyword">this</span>]</span><br></pre></td></tr></table></figure></div>

<p><strong>导包</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Exception</span><br><span class="line">import java.io.&#123;A,B,C&#125;			</span><br><span class="line">import java.io.&#123;A &#x3D;&gt; A0&#125;		&#x2F;&#x2F;别名</span><br><span class="line">import a._  相当于Java的.*</span><br></pre></td></tr></table></figure></div>



<h2 id="十三、文件IO"><a href="#十三、文件IO" class="headerlink" title="十三、文件IO"></a>十三、文件IO</h2><h3 id="13-1-写文件"><a href="#13-1-写文件" class="headerlink" title="13.1 写文件"></a>13.1 写文件</h3><p>Scala 进行文件写操作，直接用的都是 java中 的 I/O 类 （<strong>java.io.File</strong>)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> writer = <span class="keyword">new</span> <span class="type">PrintWriter</span>(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"test.txt"</span> ))</span><br><span class="line"></span><br><span class="line">      writer.write(<span class="string">"菜鸟教程"</span>)</span><br><span class="line">      writer.close()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，会在你的当前目录下生产一个 test.txt 文件，文件内容为”菜鸟教程”:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">$ cat test.txt </span><br><span class="line">菜鸟教程</span><br></pre></td></tr></table></figure></div>



<h3 id="13-2-读文件"><a href="#13-2-读文件" class="headerlink" title="13.2 读文件"></a>13.2 读文件</h3><p>从文件读取内容非常简单。我们可以使用 Scala 的 <strong>Source</strong> 类及伴生对象来读取文件。以下实例演示了从 “test.txt”(之前已创建过) 文件中读取内容:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      println(<span class="string">"文件内容为:"</span> )</span><br><span class="line"></span><br><span class="line">      <span class="type">Source</span>.fromFile(<span class="string">"test.txt"</span> ).foreach&#123; </span><br><span class="line">         print </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">文件内容为:</span><br><span class="line">菜鸟教程</span><br></pre></td></tr></table></figure></div>



<h3 id="13-3-从控制台读取"><a href="#13-3-从控制台读取" class="headerlink" title="13.3 从控制台读取"></a>13.3 从控制台读取</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> line = <span class="type">StdIn</span>.readLine(<span class="string">"请输入: "</span>)</span><br><span class="line">    println(<span class="string">"你输入的是: "</span> + line)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="十四、正则"><a href="#十四、正则" class="headerlink" title="十四、正则*"></a>十四、正则*</h2><h3 id="14-1-查找"><a href="#14-1-查找" class="headerlink" title="14.1 查找"></a>14.1 查找</h3><h3 id="14-2-替换"><a href="#14-2-替换" class="headerlink" title="14.2 替换"></a>14.2 替换</h3><h3 id="14-3-正则表达式"><a href="#14-3-正则表达式" class="headerlink" title="14.3 正则表达式"></a>14.3 正则表达式</h3><h2 id="十五、Trait-特征"><a href="#十五、Trait-特征" class="headerlink" title="十五、Trait 特征"></a>十五、Trait 特征</h2><p>Scala Trait(特征) 相当于 Java 的接口，实际上它比接口还功能强大。</p>
<p>与接口不同的是，它还可以定义属性和方法的实现。</p>
<p>一般情况下Scala的类只能够继承单一父类，但是如果是 Trait(特征) 的话就可以继承多个，从结果来看就是实现了多重继承。</p>
<p>如果只有一个trait使用extends进行扩展，如果多个，使用with对剩余的trait进行扩展。</p>
<p>Trait(特征) 定义的方式与类类似，但它使用的关键字是 <strong>trait</strong>，如下所示：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Equal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEqual</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNotEqual</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span> = !isEqual(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>以上Trait(特征)由两个方法组成：<strong>isEqual</strong> 和 <strong>isNotEqual</strong>。isEqual 方法没有定义方法的实现，isNotEqual定义了方法的实现。子类继承特征可以实现未被实现的方法。所以其实 Scala Trait(特征)更像 Java 的抽象类。</p>
<p>以下演示了特征的完整实例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文件名：Test.scala</span></span><br><span class="line"><span class="comment"> * author:菜鸟教程</span></span><br><span class="line"><span class="comment"> * url:www.runoob.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Equal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEqual</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNotEqual</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span> = !isEqual(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params">xc: <span class="type">Int</span>, yc: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Equal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x: <span class="type">Int</span> = xc</span><br><span class="line">  <span class="keyword">var</span> y: <span class="type">Int</span> = yc</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEqual</span></span>(obj: <span class="type">Any</span>) =</span><br><span class="line">    obj.isInstanceOf[<span class="type">Point</span>] &amp;&amp;</span><br><span class="line">    obj.asInstanceOf[<span class="type">Point</span>].x == x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Point</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Point</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">      <span class="keyword">val</span> p3 = <span class="keyword">new</span> <span class="type">Point</span>(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">      println(p1.isNotEqual(p2))</span><br><span class="line">      println(p1.isNotEqual(p3))</span><br><span class="line">      println(p1.isNotEqual(<span class="number">2</span>))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure></div>



<p><strong>特征构造顺序</strong></p>
<p>特征也可以有构造器，由字段的初始化和其他特征体中的语句构成。这些语句在任何混入该特征的对象在构造时都会被执行。</p>
<p>构造器的执行顺序：</p>
<ul>
<li>调用超类的构造器；</li>
<li>特征构造器在超类构造器之后、类构造器之前执行；</li>
<li>特征由左到右被构造；</li>
<li>每个特征当中，父特征先被构造；</li>
<li>如果多个特征共有一个父特征，父特征不会被重复构造</li>
<li>所有特征被构造完毕，子类被构造。</li>
</ul>
<p>构造器的顺序是类的线性化的反向。线性化是描述某个类型的所有超类型的一种技术规格。</p>
<h2 id="十六、高级函数"><a href="#十六、高级函数" class="headerlink" title="十六、高级函数"></a>十六、高级函数</h2><h3 id="16-1-函数变量"><a href="#16-1-函数变量" class="headerlink" title="16.1 函数变量"></a>16.1 函数变量</h3><p>变量类型是函数类型。就有点C++的函数指针的意思。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个函数</span><br><span class="line">scala&gt; def add(a:Int, b:Int) &#x3D; a + b</span><br><span class="line">add: (a: Int, b: Int)Int</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将该函数赋值给一个变量（_ 表示取出函数本身）</span><br><span class="line">scala&gt; val f &#x3D; add _</span><br><span class="line">f: (Int, Int) &#x3D;&gt; Int &#x3D; $$Lambda$1165&#x2F;1200355641@3e6d80f5</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过变量调用</span><br><span class="line">scala&gt; f(1, 2)</span><br><span class="line">res123: Int &#x3D; 3</span><br></pre></td></tr></table></figure></div>



<h3 id="16-2-匿名函数"><a href="#16-2-匿名函数" class="headerlink" title="16.2 匿名函数"></a>16.2 匿名函数</h3><p>没有函数名的函数。一般配合一些参数是函数的函数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; val f &#x3D; (n: Double) &#x3D;&gt; 3 * n</span><br><span class="line">f: Double &#x3D;&gt; Double &#x3D; $$Lambda$1166&#x2F;920699871@73c43130</span><br><span class="line"></span><br><span class="line">scala&gt; f(5)</span><br><span class="line">res124: Double &#x3D; 15.0</span><br></pre></td></tr></table></figure></div>

<p>有点C++中的lambda表达式的意思。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; Array(1,2,3,4).map(x &#x3D;&gt; x * 2)</span><br><span class="line">res128: Array[Int] &#x3D; Array(2, 4, 6, 8)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 还可以用更简洁的方式</span><br><span class="line">scala&gt; Array(1,2,3,4).map(_ * 2)</span><br><span class="line">res127: Array[Int] &#x3D; Array(2, 4, 6, 8)</span><br></pre></td></tr></table></figure></div>



<h3 id="16-3-参数是函数的函数"><a href="#16-3-参数是函数的函数" class="headerlink" title="16.3 参数是函数的函数"></a>16.3 参数是函数的函数</h3><p>f: (参数类型1[, 参数类型N])=&gt;(结果类型)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def fun(a: Int, b: Int, f: (Int, Int) &#x3D;&gt; Int) &#x3D; f(a, b)</span><br><span class="line">fun: (a: Int, b: Int, f: (Int, Int) &#x3D;&gt; Int)Int</span><br><span class="line"></span><br><span class="line">scala&gt; def add(a:Int, b:Int) &#x3D; a + b</span><br><span class="line">add: (a: Int, b: Int)Int</span><br><span class="line"></span><br><span class="line">scala&gt; fun(1, 2, add)</span><br><span class="line">res2: Int &#x3D; 3</span><br></pre></td></tr></table></figure></div>



<h3 id="16-4-返回值是函数的函数"><a href="#16-4-返回值是函数的函数" class="headerlink" title="16.4 返回值是函数的函数"></a>16.4 返回值是函数的函数</h3><p>可以在返回值后加一个（）调用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala&gt; def fun(a: Int, b: Int) &#x3D; (x: Int) &#x3D;&gt; (a + b) * x</span><br><span class="line">fun: (a: Int, b: Int)Int &#x3D;&gt; Int</span><br><span class="line"></span><br><span class="line">scala&gt; fun(1, 2)(3)</span><br><span class="line">res3: Int &#x3D; 9</span><br></pre></td></tr></table></figure></div>

<p>其中fun(1, 2)返回了一个新的函数，后面的(3)是新的函数的参数。</p>
<h2 id="十七、控制抽象（分线程）"><a href="#十七、控制抽象（分线程）" class="headerlink" title="十七、控制抽象（分线程）"></a>十七、控制抽象（分线程）</h2><p>return挺有用的有时候，可以中途返回。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myThread</span></span>(fun: ()=&gt; <span class="type">Unit</span>) = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>()&#123;</span><br><span class="line">      fun()</span><br><span class="line">    &#125;.start()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    myThread(()=&gt; (<span class="number">1</span> to <span class="number">5</span>).foreach(println))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>



<p>这里提供一种更简洁的写法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myThread</span></span>(fun: =&gt; <span class="type">Unit</span>) = &#123;	<span class="comment">// 将参数中的()去掉</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>()&#123;</span><br><span class="line">      fun		<span class="comment">// 这里不能带()</span></span><br><span class="line">    &#125;.start()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    myThread&#123;(<span class="number">1</span> to <span class="number">5</span>).foreach(println)&#125;		<span class="comment">// 调用的时候可以用&#123;&#125;也可以用()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="十八、模式匹配"><a href="#十八、模式匹配" class="headerlink" title="十八、模式匹配"></a>十八、模式匹配</h2><h3 id="18-1-模式匹配"><a href="#18-1-模式匹配" class="headerlink" title="18.1 模式匹配"></a>18.1 模式匹配</h3><p><strong>值匹配</strong></p>
<p>Scala 提供了强大的模式匹配机制，应用也非常广泛。</p>
<p>一个模式匹配包含了一系列备选项，每个都开始于关键字 <strong>case</strong>。每个备选项都包含了一个模式及一到多个表达式。箭头符号 <strong>=&gt;</strong> 隔开了模式和表达式。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> ch = '<span class="number">9</span>'</span><br><span class="line">ch <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> '+' =&gt; println(<span class="string">"加号"</span>)</span><br><span class="line">    <span class="keyword">case</span> '-' =&gt; println(<span class="string">"减号"</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">"数字"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字</span><br></pre></td></tr></table></figure></div>

<p>有点类似switch语句，但是不同的是，执行完<strong>case</strong>后的语句会直接结束，而不用使用<strong>break</strong></p>
<p><strong>类型匹配</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x:<span class="type">Any</span> = <span class="string">"123"</span>;</span><br><span class="line">x <span class="keyword">match</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> b:<span class="type">Int</span> =&gt; print(<span class="string">"is Int"</span>) ;</span><br><span class="line">    <span class="keyword">case</span> a:<span class="type">String</span> =&gt; print(<span class="string">"is String"</span>) ;</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; print(<span class="string">"is Int"</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is String</span><br></pre></td></tr></table></figure></div>



<h3 id="18-2-样例类"><a href="#18-2-样例类" class="headerlink" title="18.2 样例类"></a>18.2 样例类</h3><p>使用了<strong>case关键字</strong>的类定义就是就是样例类(case classes)，样例类是种特殊的类，经过优化以用于<strong>模式匹配</strong>。</p>
<p>在声明样例类时，下面的过程自动发生了：</p>
<ul>
<li>构造器的每个参数都成为val，除非显式被声明为var，但是并不推荐这么做；</li>
<li>在伴生对象中提供了apply方法，所以可以不使用new关键字就可构建对象；</li>
<li>提供unapply方法使模式匹配可以工作；</li>
<li>生成toString、equals、hashCode和copy方法，除非显示给出这些方法的定义。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">       <span class="keyword">val</span> alice = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Alice"</span>, <span class="number">25</span>)</span><br><span class="line">    <span class="keyword">val</span> bob = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Bob"</span>, <span class="number">32</span>)</span><br><span class="line">       <span class="keyword">val</span> charlie = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"Charlie"</span>, <span class="number">32</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (person &lt;- <span class="type">List</span>(alice, bob, charlie)) &#123;</span><br><span class="line">        person <span class="keyword">match</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Person</span>(<span class="string">"Alice"</span>, <span class="number">25</span>) =&gt; println(<span class="string">"Hi Alice!"</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Person</span>(<span class="string">"Bob"</span>, <span class="number">32</span>) =&gt; println(<span class="string">"Hi Bob!"</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Person</span>(name, age) =&gt;</span><br><span class="line">               println(<span class="string">"Age: "</span> + age + <span class="string">" year, name: "</span> + name + <span class="string">"?"</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 样例类</span></span><br><span class="line">   <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>执行以上代码，输出结果为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ scalac Test.scala </span><br><span class="line">$ scala Test</span><br><span class="line">Hi Alice!</span><br><span class="line">Hi Bob!</span><br><span class="line">Age: 32 year, name: Charlie?</span><br></pre></td></tr></table></figure></div>



<p><strong>sealed 密封样例类</strong></p>
<p>子类和父类必须定义在同一文件中。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Jing8</span>(<span class="params">name:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Shapi</span>(<span class="params">age:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="18-3-PartialFunction-偏函数"><a href="#18-3-PartialFunction-偏函数" class="headerlink" title="18.3 PartialFunction 偏函数"></a>18.3 PartialFunction 偏函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> f:<span class="type">PartialFunction</span>[<span class="type">Char</span>,<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">case</span> '+' =&gt; <span class="number">1</span> ; </span><br><span class="line">    <span class="keyword">case</span> '-' =&gt; <span class="number">-1</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> x = 'a'</span><br><span class="line">f(x)	<span class="comment">// 输出0</span></span><br></pre></td></tr></table></figure></div>



<h2 id="十九、泛型"><a href="#十九、泛型" class="headerlink" title="十九、泛型"></a>十九、泛型</h2><h3 id="19-1-类泛型"><a href="#19-1-类泛型" class="headerlink" title="19.1 类泛型"></a>19.1 类泛型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>[<span class="type">T</span>,<span class="type">S</span>](<span class="params">one:<span class="type">T</span>,second:<span class="type">S</span></span>)</span>;		<span class="comment">//定义泛型类</span></span><br><span class="line"><span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Pair</span>[<span class="type">String</span>,<span class="type">Int</span>](<span class="string">"tom"</span>,<span class="number">12</span>);	<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Pair</span>(<span class="string">"tom"</span>,<span class="number">12</span>);			<span class="comment">//类型推断</span></span><br></pre></td></tr></table></figure></div>



<h3 id="19-2-方法泛型"><a href="#19-2-方法泛型" class="headerlink" title="19.2 方法泛型"></a>19.2 方法泛型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMiddle</span></span>[<span class="type">T</span>](arr:<span class="type">Array</span>[<span class="type">T</span>]) = arr(arr.length / <span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="19-3-泛型的界限"><a href="#19-3-泛型的界限" class="headerlink" title="19.3 泛型的界限"></a>19.3 泛型的界限</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span></span>[<span class="type">T</span> &lt;: <span class="type">Dog</span>](d:<span class="type">T</span>) = println(<span class="string">"hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run2</span></span>[<span class="type">T</span> &gt;: <span class="type">Shapi</span>](d:<span class="type">T</span>) = println(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">&lt;:				<span class="comment">//上界，必须是Dog，及其子类</span></span><br><span class="line">&gt;:				<span class="comment">//下界，必须是Shapi，及其父类（有问题？）</span></span><br><span class="line">&lt;%				<span class="comment">// A &lt;% B,A能够隐式转换成B</span></span><br><span class="line"></span><br><span class="line"><span class="type">T</span> &lt;:<span class="type">Dog</span> &gt;:<span class="type">Cat</span> 	<span class="comment">//约束多个条件。</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Scala</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>SparkStreaming项目实战（一）</title>
    <url>/2020/05/27/SparkStreaming%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98(%E6%9C%AA%E5%AE%8C)/</url>
    <content><![CDATA[<h1 id="SparkStreaming项目实战（一）"><a href="#SparkStreaming项目实战（一）" class="headerlink" title="SparkStreaming项目实战（一）"></a>SparkStreaming项目实战（一）</h1><h2 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h2><p>整合Hadoop各组件。</p>
<h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="2-1-创建机器"><a href="#2-1-创建机器" class="headerlink" title="2.1 创建机器"></a>2.1 创建机器</h3><p>这里采用3台阿里云ECS【建议内存2-4G】（当然也可以用本地的虚拟机来模拟）：</p>
<p><strong>修改主机名</strong> </p>
<ul>
<li>hadoop000</li>
<li>hadoop001</li>
<li>hadoop002</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure></div>



<p><strong>修改IP映射</strong></p>
<p>在所有机子上进行如下操作：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">根据每个机子的IP，添加映射关系：</span><br><span class="line">172.18.150.195 hadoop000</span><br><span class="line">172.18.74.23 hadoop001</span><br><span class="line">172.18.128.181 hadoop002</span><br></pre></td></tr></table></figure></div>



<p><strong>阿里云内网互通教程</strong>：<a href="https://blog.csdn.net/weixin_42167895/article/details/106394009" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42167895/article/details/106394009</a></p>
<h3 id="2-2-创建用户"><a href="#2-2-创建用户" class="headerlink" title="2.2 创建用户"></a>2.2 创建用户</h3><p>Linux上创建hadoop用户，并赋予sudo权限。登录密码：hadoop</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># adduser hadoop</span><br><span class="line"># passwd hadoop</span><br></pre></td></tr></table></figure></div>



<p><strong>添加 sudo 权限</strong></p>
<ol>
<li><p>切换root用户</p>
</li>
<li><p>添加sudo文件的写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改/etc/sudoers文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>

<p>在原有root下添加如下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL&#x3D;(ALL)       ALL</span><br><span class="line">hadoop  ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>撤销sudoers文件写权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="2-3-创建目录"><a href="#2-3-创建目录" class="headerlink" title="2.3 创建目录"></a>2.3 创建目录</h3><p>在Linux上hadoop用户的根目录创建如下目录：</p>
<ul>
<li>app：存放软件的安装目录</li>
<li>data：存放测试数据</li>
<li>lib：存放开发的jar</li>
<li>software：存放软件安装包目录</li>
<li>source：存放框架源码</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir app data lib software source</span><br></pre></td></tr></table></figure></div>



<h3 id="2-4-软件版本"><a href="#2-4-软件版本" class="headerlink" title="2.4 软件版本"></a>2.4 软件版本</h3><p>【<strong>cdh 版本对应组件版本</strong>】<a href="https://blog.csdn.net/weixin_42286868/article/details/104817644" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42286868/article/details/104817644</a></p>
<p><strong>本次实战所用版本</strong></p>
<blockquote>
<p>apache-flume-1.9.0-bin.tar.gz</p>
<p>apache-maven-3.6.3-bin.tar.gz</p>
<p>hadoop-3.1.2-centos7.6-x64.tar.gz</p>
<p>hbase-2.2.4-bin.tar.gz</p>
<p>jdk-8u251-linux-x64.tar.gz</p>
<p>kafka_2.12-2.4.1.tgz</p>
<p>scala-2.12.11.tgz（<strong>Spark 2.4.5使用Scala 2.12</strong>）</p>
<p>spark-2.4.5-bin-hadoop2.7.tgz<strong>（注意！spark用编译源码！Choose a package type: Source Code。我因为编译不了，此次不采用编译方式）</strong></p>
<p>zookeeper-3.4.14.tar.gz</p>
</blockquote>
<h3 id="2-5-集群规划"><a href="#2-5-集群规划" class="headerlink" title="2.5 集群规划"></a>2.5 集群规划</h3><table>
<thead>
<tr>
<th>软件</th>
<th>Hadoop000</th>
<th>Hadoop001</th>
<th>Hadoop002</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode<br>DataNode</td>
<td>NameNode<br>DataNode</td>
<td>DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager<br>NodeManager</td>
<td>ResourceManager<br>NodeManager</td>
<td>NodeManager</td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>ZooKeeper</td>
<td>ZooKeeper</td>
<td>ZooKeeper</td>
</tr>
<tr>
<td>Kafka</td>
<td>Kafka</td>
<td>Kafka</td>
<td>Kafka</td>
</tr>
<tr>
<td>HBase</td>
<td>RegionServer</td>
<td>RegionServer</td>
<td>RegionServer<br>Master</td>
</tr>
<tr>
<td>Flume</td>
<td>Flume</td>
<td>Flume</td>
<td>Flume</td>
</tr>
<tr>
<td>Spark</td>
<td>Spark</td>
<td>Spark</td>
<td>Spark</td>
</tr>
</tbody></table>
<h2 id="三、SSH-配置"><a href="#三、SSH-配置" class="headerlink" title="三、SSH 配置"></a>三、SSH 配置</h2><ol>
<li><p>在三台机子上分别生成密钥对</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &#39;&#39; -f ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>分别</strong>追加公钥，并设置权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">chmod 644 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发给其余2台机器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在000上</span><br><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub hadoop@hadoop001:&#x2F;home&#x2F;hadoop&#x2F;.ssh&#x2F;id_rsa_hadoop000.pub</span><br><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub hadoop@hadoop002:&#x2F;home&#x2F;hadoop&#x2F;.ssh&#x2F;id_rsa_hadoop000.pub</span><br><span class="line"></span><br><span class="line"># 在001上</span><br><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub hadoop@hadoop000:&#x2F;home&#x2F;hadoop&#x2F;.ssh&#x2F;id_rsa_hadoop001.pub</span><br><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub hadoop@hadoop002:&#x2F;home&#x2F;hadoop&#x2F;.ssh&#x2F;id_rsa_hadoop001.pub</span><br><span class="line"></span><br><span class="line"># 在002上</span><br><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub hadoop@hadoop001:&#x2F;home&#x2F;hadoop&#x2F;.ssh&#x2F;id_rsa_hadoop002.pub</span><br><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub hadoop@hadoop000:&#x2F;home&#x2F;hadoop&#x2F;.ssh&#x2F;id_rsa_hadoop002.pub</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>追加其他机器的公钥</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在000上</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_hadoop001.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_hadoop002.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line"># 在001上</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_hadoop000.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_hadoop002.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line"># 在002上</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_hadoop001.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa_hadoop000.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试相互是否能ssh免密登录成功</p>
</li>
</ol>
<h2 id="四、便捷配置"><a href="#四、便捷配置" class="headerlink" title="四、便捷配置"></a>四、便捷配置</h2><h3 id="4-1-批量执行命令脚本"><a href="#4-1-批量执行命令脚本" class="headerlink" title="4.1 批量执行命令脚本"></a>4.1 批量执行命令脚本</h3><ol>
<li><p>在000上创建一个脚本文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo touch &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcall.sh</span><br><span class="line"># 将脚本标记为可执行文件</span><br><span class="line">sudo chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcall.sh</span><br><span class="line"># 编辑内容</span><br><span class="line">sudo vi &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xcall.sh</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>xcall.sh添加以下内容（表示通过SSH对所有主机进行命令操作）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">params=$@</span><br><span class="line">for (( i = 0 ; i &lt;= 2 ; i = $i + 1 )) ; do</span><br><span class="line">    echo ============= hadoop00$i ==============</span><br><span class="line">    ssh hadoop00$i "$params"</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>执行脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 ~]$ xcall.sh hostname</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">hadoop000</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">hadoop001</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">hadoop002</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-2-批量复制文件脚本"><a href="#4-2-批量复制文件脚本" class="headerlink" title="4.2 批量复制文件脚本"></a>4.2 批量复制文件脚本</h3><ol>
<li><p>在000上创建一个脚本文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo touch &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xscp.sh</span><br><span class="line"># 将脚本标记为可执行文件</span><br><span class="line">sudo chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xscp.sh</span><br><span class="line"># 编辑内容</span><br><span class="line">sudo vi &#x2F;usr&#x2F;local&#x2F;bin&#x2F;xscp.sh</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>xcall.sh添加以下内容（表示通过SSH对所有主机进行命令操作）：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [[ $# -lt 1 ]] ; then echo no params ; exit ; fi</span><br><span class="line"></span><br><span class="line">p=$1</span><br><span class="line">dir=`dirname $p`</span><br><span class="line">filename=`basename $p`</span><br><span class="line">cd $dir</span><br><span class="line">fullpath=`pwd -P .`</span><br><span class="line"></span><br><span class="line">user=`whoami`</span><br><span class="line">for (( i = 1 ; i &lt;= 2 ; i = $i + 1 )) ; do</span><br><span class="line">    echo ============= hadoop00$i ==============</span><br><span class="line">    scp -r $p $&#123;user&#125;@hadoop00$i:$fullpath</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>执行脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 ~]$ mkdir tmp</span><br><span class="line">[hadoop@hadoop000 ~]$ echo test &gt;&gt; tmp&#x2F;xscp.txt</span><br><span class="line">[hadoop@hadoop000 ~]$ xscp.sh tmp</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">xscp.txt                                                                                  100%    5    23.6KB&#x2F;s   00:00    </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">xscp.txt                                                                                  100%    5     4.0KB&#x2F;s   00:00    </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">xscp.txt</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="4-3-显示路径"><a href="#4-3-显示路径" class="headerlink" title="4.3 显示路径"></a>4.3 显示路径</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 software]$ vi ~&#x2F;.bash_profile </span><br><span class="line">[hadoop@hadoop000 software]$ source ~&#x2F;.bash_profile </span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$</span><br></pre></td></tr></table></figure></div>



<h2 id="五、JDK-安装"><a href="#五、JDK-安装" class="headerlink" title="五、JDK 安装"></a>五、JDK 安装</h2><ol>
<li><p>下载</p>
</li>
<li><p>解压到 ~/app</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf ~&#x2F;software&#x2F;jdk-8u251-linux-x64.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将java配置系统环境变量中：~/.bash_profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># JDK</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;jdk1.8.0_251</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh jdk1.8.0_251</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检测安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="六、Hadoop-完全分布式搭建"><a href="#六、Hadoop-完全分布式搭建" class="headerlink" title="六、Hadoop 完全分布式搭建"></a>六、Hadoop 完全分布式搭建</h2><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf hadoop-3.1.2-centos7.6-x64.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量：vi ~/.bash_profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hadoop</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop-3.1.2</span><br><span class="line">export PATH&#x3D;$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p><strong>/etc/hadoop/hadoop-env.sh</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;jdk1.8.0_251</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>*<em>/etc/hadoop/hdfs-site.xml *</em></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定HDFS副本的数量，副本数不要超过节点数量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/etc/hadoop/core-site.xml</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop000/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Hadoop的临时工作目录存放数据，默认/tmp/hadoop-$&#123;user.name&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/app/tmp/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/etc/hadoop/mapred-site.xml</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定mr运行时框架，这里指定在yarn上，默认是local在本地跑 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/etc/hadoop/yarn-site.xml</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定YARN（ResourceManager）的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- reduce获取数据的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/etc/hadoop/worker</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop000</span><br><span class="line">hadoop001</span><br><span class="line">hadoop002</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh hadoop-3.1.2</span><br><span class="line">$ xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化文件系统（在NN上，即Hadoop000上）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hadoop namenode -format</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动Hadoop集群</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ start-dfs.sh</span><br><span class="line">$ start-yarn.sh</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop]$xcall.sh ~&#x2F;app&#x2F;jdk1.8.0_251&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">20068 Jps</span><br><span class="line">19591 ResourceManager</span><br><span class="line">19031 NameNode</span><br><span class="line">19367 SecondaryNameNode</span><br><span class="line">19721 NodeManager</span><br><span class="line">19183 DataNode</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">9156 DataNode</span><br><span class="line">9268 NodeManager</span><br><span class="line">9388 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">8882 Jps</span><br><span class="line">8649 DataNode</span><br><span class="line">8761 NodeManager</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="七、ZooKeeper-安装"><a href="#七、ZooKeeper-安装" class="headerlink" title="七、ZooKeeper 安装"></a>七、ZooKeeper 安装</h2><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf  ~&#x2F;software&#x2F;zookeeper-3.4.14.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量：~/.bash_profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ZK</span><br><span class="line">export ZK_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;zookeeper-3.4.14</span><br><span class="line">export PATH&#x3D;$ZK_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p><strong>/conf/zoo.cfg</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;zookeeper-3.4.14&#x2F;conf]$cp zoo_sample.cfg zoo.cfg</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;zookeeper-3.4.14&#x2F;conf]$vi zoo.cfg</span><br><span class="line"></span><br><span class="line"># 修改该属性：</span><br><span class="line">dataDir&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;zookeeper</span><br><span class="line"></span><br><span class="line"># 追加内容</span><br><span class="line"># server.n&#x3D;host:port1:port2，数字n必须是myid中的值</span><br><span class="line"># port1:leader端口， 作为leader时，供follower连接的端口</span><br><span class="line"># port2:选举端口，选举leader时，供其他follower连接的端口</span><br><span class="line">server.1&#x3D;hadoop000:2888:3888</span><br><span class="line">server.2&#x3D;hadoop001:2888:3888</span><br><span class="line">server.3&#x3D;hadoop002:2888:3888</span><br><span class="line"></span><br><span class="line"># 然后创建对应目录：（每台都要）</span><br><span class="line">$mkdir -p &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;zookeeper</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/bin/zkEnv.sh</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改以下两个地方的目录，将日志文件输出到安装目录</span><br><span class="line">if [ &quot;x$&#123;ZOO_LOG_DIR&#125;&quot; &#x3D; &quot;x&quot; ]</span><br><span class="line">then</span><br><span class="line">    ZOO_LOG_DIR&#x3D;&quot;$&#123;ZOOKEEPER_PREFIX&#125;&#x2F;logs&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;x$&#123;ZOO_LOG4J_PROP&#125;&quot; &#x3D; &quot;x&quot; ]</span><br><span class="line">then</span><br><span class="line">    ZOO_LOG4J_PROP&#x3D;&quot;INFO,ROLLINGFILE&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/conf/log4j.properties</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改以下几个地方</span><br><span class="line">zookeeper.root.logger&#x3D;INFO, ROLLINGFILE</span><br><span class="line">zookeeper.log.dir&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;zookeeper-3.4.14&#x2F;logs</span><br><span class="line">zookeeper.tracelog.dir&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;zookeeper-3.4.14&#x2F;logs</span><br><span class="line"></span><br><span class="line">log4j.appender.ROLLINGFILE&#x3D;org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">#log4j.appender.ROLLINGFILE.MaxFileSize&#x3D;10MB (把这句话注释掉)</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh zookeeper-3.4.14</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在每台主机的ZK<strong>数据目录dataDir</strong>中添加myid</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop]$echo 1 &gt; &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;zookeeper&#x2F;myid</span><br><span class="line">[hadoop@hadoop001 &#x2F;home&#x2F;hadoop]$echo 2 &gt; &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;zookeeper&#x2F;myid</span><br><span class="line">[hadoop@hadoop002 &#x2F;home&#x2F;hadoop]$echo 3 &gt; &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;zookeeper&#x2F;myid</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在所有机器上启动服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$zkServer.sh start</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$xcall.sh ~&#x2F;app&#x2F;jdk1.8.0_251&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5458 QuorumPeerMain</span><br><span class="line">6405 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5156 QuorumPeerMain</span><br><span class="line">5944 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5809 Jps</span><br><span class="line">5012 QuorumPeerMain</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="八、Hadoop-HA-配置"><a href="#八、Hadoop-HA-配置" class="headerlink" title="八、Hadoop HA 配置"></a>八、Hadoop HA 配置</h2><h3 id="8-1-HDFS-HA-自动容灾"><a href="#8-1-HDFS-HA-自动容灾" class="headerlink" title="8.1 HDFS HA + 自动容灾"></a>8.1 HDFS HA + 自动容灾</h3><ol>
<li><p>修改配置文件</p>
<ul>
<li><p>*<em>/etc/hadoop/hdfs-site.xml *</em></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新增以下内容 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 添加集群服务名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- myucluster下的名称节点两个id(只能有2个)，HA不需要第二名称节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置每个nn的rpc地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop001:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置每个nn的webui端口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop001:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 名称节点共享编辑目录,即JN节点(在DN上) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop000:8485;hadoop001:8485;hadoop002:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置JN存放edit的本地路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/app/tmp/hadoop/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- java类，client使用它判断哪个节点是激活态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 脚本列表或者java类，在容灾保护激活态的nn. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            sshfence</span><br><span class="line">            shell(/bin/true)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/wbw/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 启动自动容灾 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/etc/hadoop/core-site.xml</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- *修改为集群名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- *指定zk连接地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000:2181,hadoop001:2181,hadoop002:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>分发到所有机器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop-3.1.2&#x2F;etc]$xscp.sh hadoop</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>数据迁移</p>
<ul>
<li><p>先停掉所有Hadoop进程，然后再所有机器上启动JN进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动jn之后，在两个NN之间进行disk元数据同步</p>
<ul>
<li><p>到hadoop000将元数据信息复制到hadoop001</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;hadoop&#x2F;dfs hadoop@hadoop001:&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在新的nn(未格式化的nn)【这里为hadoop001】上运行一下命令，实现待命状态引导。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要hadoop000的namenode为启动状态,提示是否格式化,选择N</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop]$hadoop-daemon.sh start namenode</span><br><span class="line">[hadoop@hadoop001 &#x2F;home&#x2F;hadoop]$hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在一个NN上执行以下命令，完成edit日志到jn节点的传输</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop001 &#x2F;home&#x2F;hadoop]$hdfs namenode -initializeSharedEdits</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
</ul>
</li>
<li><p>关闭所有Hadoop进程，然后登录其中一台NN，再ZK中初始化HA状态</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动dfs进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ start-dfs.sh</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp&#x2F;hadoop&#x2F;dfs]$xcall.sh ~&#x2F;app&#x2F;jdk1.8.0_251&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">20128 QuorumPeerMain</span><br><span class="line">31971 DFSZKFailoverController</span><br><span class="line">31531 DataNode</span><br><span class="line">31404 NameNode</span><br><span class="line">31757 JournalNode</span><br><span class="line">32029 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">14689 DataNode</span><br><span class="line">14599 NameNode</span><br><span class="line">14793 JournalNode</span><br><span class="line">14924 DFSZKFailoverController</span><br><span class="line">14959 Jps</span><br><span class="line">9439 QuorumPeerMain</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">11890 DataNode</span><br><span class="line">8935 QuorumPeerMain</span><br><span class="line">11994 JournalNode</span><br><span class="line">12047 Jps</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="8-2-RM-自动容灾"><a href="#8-2-RM-自动容灾" class="headerlink" title="8.2 RM 自动容灾"></a>8.2 RM 自动容灾</h3><ol>
<li><p>配置文件</p>
<ul>
<li><p><strong>/etc/hadoop/yarn-site.xml</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加如下内容 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启yarn的HA --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置名字ID --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置RM节点地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置RM，WEB-UI端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop001:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置ZK集群 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000:2181,hadoop001:2181,hadoop002:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>分发到所有机器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$xscp.sh yarn-site.xml</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动yarn</p>
</li>
</ol>
<h2 id="九、HBase-安装"><a href="#九、HBase-安装" class="headerlink" title="九、HBase 安装"></a>九、HBase 安装</h2><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf hbase-2.2.4-bin.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量中：~/.bash_profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># HBase</span><br><span class="line">export HBASE_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hbase-2.2.4</span><br><span class="line">export PATH&#x3D;$HBASE_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>验证安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase version</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p><strong>/conf/hbase-env.sh</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改JDK路径</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;jdk1.8.0_251</span><br><span class="line"># 使用自己的ZK管理</span><br><span class="line">export HBASE_MANAGES_ZK&#x3D;false</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/conf/hbse-site.xml</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用完全分布式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hbase数据在hdfs上的存放路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置zk地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop000:2181,hadoop001:2181,hadoop002:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- zk的本地目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/app/tmp/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>/conf/regionservers</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop000</span><br><span class="line">hadoop001</span><br><span class="line">hadoop002</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>把Hadoop关于HDFS的相关配置文件（hdfs-site.xml和core-site.xml）拷贝到HBase的conf目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop-3.1.2&#x2F;etc&#x2F;hadoop]$cp hdfs-site.xml ~&#x2F;app&#x2F;hbase-2.2.4&#x2F;conf&#x2F;</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop-3.1.2&#x2F;etc&#x2F;hadoop]$cp core-site.xml ~&#x2F;app&#x2F;hbase-2.2.4&#x2F;conf</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发到其他机器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh hbase-2.2.4</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在Hadoop002上启动Hbase</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ start-hbase.sh</span><br><span class="line"></span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xcall.sh ~&#x2F;app&#x2F;jdk1.8.0_251&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">20128 QuorumPeerMain</span><br><span class="line">31971 DFSZKFailoverController</span><br><span class="line">1141 HRegionServer</span><br><span class="line">32394 ResourceManager</span><br><span class="line">31404 NameNode</span><br><span class="line">31757 JournalNode</span><br><span class="line">1389 Jps</span><br><span class="line">32527 NodeManager</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">15105 ResourceManager</span><br><span class="line">15698 Jps</span><br><span class="line">14599 NameNode</span><br><span class="line">14793 JournalNode</span><br><span class="line">15594 HRegionServer</span><br><span class="line">14924 DFSZKFailoverController</span><br><span class="line">15199 NodeManager</span><br><span class="line">9439 QuorumPeerMain</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">12148 NodeManager</span><br><span class="line">12389 HRegionServer</span><br><span class="line">8935 QuorumPeerMain</span><br><span class="line">18910 HMaster</span><br><span class="line">11994 JournalNode</span><br><span class="line">12493 Jps</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>高可用配置：直接另一台机器上启动MASTER即可</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase-daemon.sh start master</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果发现HMaster自动关闭，可以查看日志。如果和WAL有关，则再hbase-site加如下内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决HMaster自动关闭 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>如果还不行，删除zk下rmr /hbase。然后删除Hadoop的日志和数据，然后格式话HDFS。</p>
</li>
</ol>
<h2 id="十、Flume-安装"><a href="#十、Flume-安装" class="headerlink" title="十、Flume 安装"></a>十、Flume 安装</h2><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压到 ~/app</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf ~&#x2F;software&#x2F;apache-flume-1.9.0-bin.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量中：~/.bash_profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Flume</span><br><span class="line">export FLUME_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;apache-flume-1.9.0-bin</span><br><span class="line">export PATH&#x3D;$FLUME_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>flume-env.sh 配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;app&#x2F;apache-flume-1.9.0-bin&#x2F;conf&#x2F;</span><br><span class="line">cp flume-env.sh.template flume-env.sh</span><br><span class="line"></span><br><span class="line"># 添加如下内容</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;jdk1.8.0_251</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh apache-flume-1.9.0-bin</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检测安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flume-ng version</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<p><strong>进行测试，查看是否两机器间flume是否可以正常运行，更多使用方式参考《Flume学习笔记》</strong></p>
<h2 id="十一、Kafka-安装"><a href="#十一、Kafka-安装" class="headerlink" title="十一、Kafka 安装"></a>十一、Kafka 安装</h2><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf kafka_2.12-2.4.1.tgz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$vi ~&#x2F;.bash_profile</span><br><span class="line"># KAFKA</span><br><span class="line">export KAFKA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;kafka_2.12-2.4.1</span><br><span class="line">export PATH&#x3D;$KAFKA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p><strong>server.properties</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拷贝一份初始配置文件</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;kafka_2.12-2.4.1&#x2F;config]$cp server.properties server.properties.bak</span><br></pre></td></tr></table></figure></div>

<p>修改<strong>server.properties</strong>内容：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置ID，保证集群中唯一（这里取和zk一样的编号）</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 打开注释(注意！每台机子要记得改)</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://hadoop000:9092</span></span><br><span class="line"><span class="comment"># 修改日志目录</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/home/hadoop/app/tmp/kafka-logs</span></span><br><span class="line"><span class="comment"># 修改zookeeper集群</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">hadoop000:2181,hadoop001:2181,hadoop002:2181</span></span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh kafka_2.12-2.4.1</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>

<p>*<em>注意修改各机器server.properties中的 *</em>  <code>broker.id</code> 和 <code>listeners</code></p>
</li>
<li><p>在所有机器上启动服务(确保ZK集群开启)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kafka-server-start.sh -daemon $KAFKA_HOME&#x2F;config&#x2F;server.properties</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$xcall.sh ~&#x2F;app&#x2F;jdk1.8.0_251&#x2F;bin&#x2F;jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop000 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5458 QuorumPeerMain</span><br><span class="line">6405 Jps</span><br><span class="line">6331 Kafka</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop001 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5156 QuorumPeerMain</span><br><span class="line">5876 Kafka</span><br><span class="line">5944 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop002 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5809 Jps</span><br><span class="line">5012 QuorumPeerMain</span><br><span class="line">5741 Kafka</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<p><strong>进行测试，查看是否两机器间kafka是否可以正常运行，更多使用方式参考《Kafka学习笔记》</strong></p>
<h2 id="十二、Maven-安装"><a href="#十二、Maven-安装" class="headerlink" title="十二、Maven 安装"></a>十二、Maven 安装</h2><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf apache-maven-3.6.3-bin.tar.gz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量：~/.bash_profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MAVEN</span><br><span class="line">export MAVEN_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;apache-maven-3.6.3</span><br><span class="line">export PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>添加阿里仓库 <code>conf/settings.xml</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云中央仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看版本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br><span class="line">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)</span><br><span class="line">Maven home: &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;apache-maven-3.6.3</span><br><span class="line">Java version: 1.8.0_251</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="十三、Scala-安装"><a href="#十三、Scala-安装" class="headerlink" title="十三、Scala 安装"></a>十三、Scala 安装</h2><ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf scala-2.11.12.tgz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># SCALA</span><br><span class="line">export SCALA_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;scala-2.11.12</span><br><span class="line">export PATH&#x3D;$SCALA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
</ol>
<h2 id="十四、Spark-安装"><a href="#十四、Spark-安装" class="headerlink" title="十四、Spark 安装"></a>十四、Spark 安装</h2><h3 id="14-1-直接解压方式"><a href="#14-1-直接解压方式" class="headerlink" title="14.1 直接解压方式"></a>14.1 直接解压方式</h3><p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C ~&#x2F;app&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$vi ~&#x2F;.bash_profile</span><br><span class="line"># SPARK</span><br><span class="line">export SPARK_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;spark-2.4.5-bin-hadoop2.7</span><br><span class="line">export PATH&#x3D;$SPARK_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置生效： <code>source ~/.bash_profile</code></p>
</li>
<li><p>分发</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh spark-2.4.5-bin-hadoop2.7</span><br><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;app]$xscp.sh ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark-shell</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="14-2-编译源码方式（推荐）"><a href="#14-2-编译源码方式（推荐）" class="headerlink" title="14.2 编译源码方式（推荐）"></a>14.2 编译源码方式（推荐）</h3><p>【官网教程】<a href="https://spark.apache.org/docs/latest/building-spark.html" target="_blank" rel="noopener">https://spark.apache.org/docs/latest/building-spark.html</a></p>
<p><strong>本人在做实验的时候，编译失败？所以采用了第一种方式安装</strong></p>
<p>在<strong>hadoop000</strong>上如下操作：</p>
<ol>
<li><p>下载</p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop000 &#x2F;home&#x2F;hadoop&#x2F;software]$tar -zxvf spark-2.4.5.tgz -C ~&#x2F;source&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改 <code>pom.xml</code> 文件，添加仓库（注意）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>cloudera<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>cloudera repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>Maven编译指定Hadoop版本并启用YARN，使用Hive和JDBC支持进行构建</p>
<ul>
<li><p>第一种方式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;build&#x2F;mvn -Pyarn -Phadoop-3.1 -Dhadoop.version&#x3D;3.1.2 -Phive -Phive-thriftserver -DskipTests clean package</span><br></pre></td></tr></table></figure></div>

<p>设置maven内存大小，根据实际情况调整。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export MAVEN_OPTS&#x3D;&quot;-Xmx2g -XX:ReservedCodeCacheSize&#x3D;1g&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>第二种方式（<strong>推荐</strong>）【阿里云上太慢了，这里再本地机器上进行编译，同时使用代理】16:15~</p>
<p>编译成一个包，这里名字建议直接用Hadoop的版本。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;dev&#x2F;make-distribution.sh --name hadoop3.1.2 --pip --r --tgz -Pyarn -Phadoop-3.1 -Dhadoop.version&#x3D;3.1.2 -Phive -Phive-thriftserver -DskipTests clean package</span><br></pre></td></tr></table></figure></div>

<p><strong>修改 ./dev/make-distribution.sh 以跳过检查</strong></p>
<ul>
<li><p>注释掉以下内容：位于文件中的128~146行。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">128 #VERSION&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;project.version $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">129 #    | grep -v &quot;INFO&quot;\</span><br><span class="line">130 #    | grep -v &quot;WARNING&quot;\</span><br><span class="line">131 #    | tail -n 1)</span><br><span class="line">132 #SCALA_VERSION&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;scala.binary.version $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">133 #    | grep -v &quot;INFO&quot;\</span><br><span class="line">134 #    | grep -v &quot;WARNING&quot;\</span><br><span class="line">135 #    | tail -n 1)</span><br><span class="line">136 #SPARK_HADOOP_VERSION&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;hadoop.version $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">137 #    | grep -v &quot;INFO&quot;\</span><br><span class="line">138 #    | grep -v &quot;WARNING&quot;\</span><br><span class="line">139 #    | tail -n 1)</span><br><span class="line">140 #SPARK_HIVE&#x3D;$(&quot;$MVN&quot; help:evaluate -Dexpression&#x3D;project.activeProfiles -pl sql&#x2F;hive $@ 2&gt;&#x2F;dev&#x2F;null\</span><br><span class="line">141 #    | grep -v &quot;INFO&quot;\</span><br><span class="line">142 #    | grep -v &quot;WARNING&quot;\</span><br><span class="line">143 #    | fgrep --count &quot;&lt;id&gt;hive&lt;&#x2F;id&gt;&quot;;\</span><br><span class="line">144 #    # Reset exit status to 0, otherwise the script stops here if the last grep finds nothing\</span><br><span class="line">145 #    # because we use &quot;set -o pipefail&quot;</span><br><span class="line">146 #    echo -n)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>添加以下内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VERSION&#x3D;2.4.5</span><br><span class="line">SCALA_VERSION&#x3D;2.11</span><br><span class="line">SPARK_HADOOP_VERSION&#x3D;3.1.2</span><br><span class="line">SPARK_HIVE&#x3D;1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>【选做】还可以调整内存大小，默认是1G，这里改成2G</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export MAVEN_OPTS&#x3D;&quot;$&#123;MAVEN_OPTS:--Xmx8g -XX:ReservedCodeCacheSize&#x3D;2g&#125;&quot;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>提示:</strong></p>
<p>如果在编译过程中，看到的异常信息不太懂，可以在编译命令后面添加 <code>-X</code>，就能看到更详细的编译信息。</p>
</blockquote>
<h2 id="十五、日志生成"><a href="#十五、日志生成" class="headerlink" title="十五、日志生成"></a>十五、日志生成</h2>]]></content>
      <categories>
        <category>大数据</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot快速入门</title>
    <url>/2019/10/20/SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="springBoot快速入门"><a href="#springBoot快速入门" class="headerlink" title="springBoot快速入门"></a>springBoot快速入门</h1><p>github详情：<a href="https://github.com/wangbowen1024/springboot-learning-quick" target="_blank" rel="noopener">https://github.com/wangbowen1024/springboot-learning-quick</a></p>
<h2 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h2><p>首先使用IDEA创建spring项目，勾选Web和Mybatis以及XXX等所需要的组件，然后开始编写代码。</p>
<ul>
<li>pom.xml</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.所有springboot工程都必须要继承spring-boot-starter-parent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.web功能的起步依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>application.yml</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库连接信息(MySql5.7)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Bow1024</span></span><br></pre></td></tr></table></figure></div>

<p>在SpringbootApplication类同目录下都可以扫包读到注解，所以mybatis、controller等可以直接写。</p>
<h2 id="二、编写类"><a href="#二、编写类" class="headerlink" title="二、编写类"></a>二、编写类</h2><h3 id="2-1-启动类"><a href="#2-1-启动类" class="headerlink" title="2.1 启动类"></a>2.1 启动类</h3><p> SpringbootApplication.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于注解的mybatis-boot整合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.springboot.mapper"</span>) <span class="comment">// mapper注解扫包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-2-Controller"><a href="#2-2-Controller" class="headerlink" title="2.2 Controller"></a>2.2 Controller</h3><p>UserController.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryUser"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.getAllUsers();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-3-JavaBean"><a href="#2-3-JavaBean" class="headerlink" title="2.3 JavaBean"></a>2.3 JavaBean</h3><p>User.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="2-4-Mapper接口"><a href="#2-4-Mapper接口" class="headerlink" title="2.4 Mapper接口"></a>2.4 Mapper接口</h3><p> UserMapper.java </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="三、获取-yml文件中的键值对"><a href="#三、获取-yml文件中的键值对" class="headerlink" title="三、获取.yml文件中的键值对"></a>三、获取.yml文件中的键值对</h2><p>application.yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 普通数据的配置</span><br><span class="line">name: zhangsan</span><br><span class="line"></span><br><span class="line"># 对象的配置</span><br><span class="line">person:</span><br><span class="line">  name: zhangsan</span><br><span class="line">  age: 18</span><br><span class="line">  addr: beijing</span><br><span class="line"></span><br><span class="line"># 行内对象配置(类json)</span><br><span class="line">server: &#123;port: 8082&#125;</span><br><span class="line"></span><br><span class="line"># 配置数组、集合(普通字符串)</span><br><span class="line">city:</span><br><span class="line">  - beijing</span><br><span class="line">  - tianjin</span><br><span class="line"></span><br><span class="line"># 或city: [beijing,tianjin]</span><br><span class="line"></span><br><span class="line"># 配置数组、集合(对象数据)</span><br><span class="line">student:</span><br><span class="line">  - name: tom</span><br><span class="line">    age: 18</span><br><span class="line">    addr: beijing</span><br><span class="line">  - name: lucy</span><br><span class="line">    age: 17</span><br><span class="line">    addr: tianjin</span><br><span class="line"></span><br><span class="line"># 或student: [&#123;name: tom,age: 18,addr: beijing&#125;,&#123;name: lucy,age: 17,addr: tianjin&#125;]</span><br><span class="line"></span><br><span class="line"># Map配置</span><br><span class="line">map:</span><br><span class="line">  key1: value1</span><br><span class="line">  key2: value2</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-获取方式1"><a href="#3-1-获取方式1" class="headerlink" title="3.1 获取方式1"></a>3.1 获取方式1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取配置文件信息</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.addr&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String addr;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-获取方式2"><a href="#3-2-获取方式2" class="headerlink" title="3.2 获取方式2"></a>3.2 获取方式2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>) <span class="comment">// 从配置文件中，前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick3Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick3"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得配置文件的信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name: "</span> + name + <span class="string">",addr: "</span> + addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>java框架</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Storm学习笔记</title>
    <url>/2020/04/18/Storm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Storm学习笔记"><a href="#Storm学习笔记" class="headerlink" title="Storm学习笔记"></a>Storm学习笔记</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h3><p>Apache Storm是一个免费的开源分布式实时计算系统。 </p>
<p>Apache Storm使得可靠处理无限数据流变得容易，实时处理就像Hadoop批处理一样。</p>
<p>Apache Storm很简单，可以与任何编程语言一起使用，并且使用起来很有趣！ </p>
<p>Apache Storm有许多用例：实时分析，在线机器学习，连续计算，分布式RPC，ETL等。 </p>
<p>Apache Storm速度很快：基准测试表明它每秒可处理每个节点超过一百万个元组。它具有可扩展性，容错性，可确保您的数据将得到处理，并且易于设置和操作。</p>
<p>Apache Storm与您已经使用的排队和数据库技术集成。</p>
<p>Apache Storm拓扑会消耗数据流，并以任意复杂的方式处理这些流，但是可以根据需要在计算的每个阶段之间重新分配流。在教程中阅读更多内容。</p>
<h3 id="1-2-Storm对比Hadoop"><a href="#1-2-Storm对比Hadoop" class="headerlink" title="1.2 Storm对比Hadoop"></a>1.2 Storm对比Hadoop</h3><table>
<thead>
<tr>
<th>Storm</th>
<th>Hadoop</th>
</tr>
</thead>
<tbody><tr>
<td>实时流处理</td>
<td>批处理</td>
</tr>
<tr>
<td>无状态</td>
<td>有状态</td>
</tr>
<tr>
<td>使用zk协同的主从架构</td>
<td>无zk的主从结构</td>
</tr>
<tr>
<td>每秒处理数万消息</td>
<td>HDFS MR数分钟、数小时</td>
</tr>
<tr>
<td>不会主动停止</td>
<td>终有完成的时候</td>
</tr>
</tbody></table>
<h3 id="1-3-核心概念"><a href="#1-3-核心概念" class="headerlink" title="1.3 核心概念"></a>1.3 核心概念</h3><p><a href="/postImages/Storm1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/Storm1.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Tuple</td>
<td>主要的数据结构，有序元素的列表。</td>
</tr>
<tr>
<td>Stream</td>
<td>Tuple的序列。</td>
</tr>
<tr>
<td>Spouts</td>
<td>数据流源头。可以读取kafka队列消息。可以自定义。</td>
</tr>
<tr>
<td>Bolts</td>
<td>转接头、逻辑处理单元。<br>spout的数据传递个bolt，bolt计算，完成后产生新的数据。<br>IBolt是核心接口。</td>
</tr>
<tr>
<td>Topology</td>
<td>Spout + bolt连接在一起形成一个Topology，形成有向图，定点就是计算，边是数据流。</td>
</tr>
<tr>
<td>task</td>
<td>Bolt中每个Spout或者bolt都是一个task。</td>
</tr>
</tbody></table>
<h3 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4 架构"></a>1.4 架构</h3><p><a href="/postImages/Storm2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/Storm2.png" class="lazyload"></a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Nimbus</td>
<td>master节点。<br>核心组件，运行Topology。<br>分析Topology并收集运行task。分发task给supervisor.<br>监控Topology。<br>无状态，依靠zk监控Topology的运行状况。</td>
</tr>
<tr>
<td>Supervisor</td>
<td>每个supervisor有n个worker进程，负责代理task给worker。<br>worker在孵化Executor线程最终运行task。<br>storm使用内部消息系统在nimbus和supervisor之间进行通信。<br>接受nimbus指令，管理worker进程完成task派发。</td>
</tr>
<tr>
<td>worker</td>
<td>执行特定的task，worker本身不执行任务，而是孵化executors，让executors执行task。</td>
</tr>
<tr>
<td>Executor</td>
<td>本质上由worker进程孵化出来的一个线程而已。<br>executor运行task都属于同一spout或者bolt。</td>
</tr>
<tr>
<td>task</td>
<td>执行实际上的任务处理。或者是Spout或者是bolt。</td>
</tr>
</tbody></table>
<h3 id="1-5-工作流程"><a href="#1-5-工作流程" class="headerlink" title="1.5 工作流程"></a>1.5 工作流程</h3><ol>
<li>nimbus等待提交的Topology</li>
<li>提交Topology后，nimbus收集task，</li>
<li>nimbus分发task给所有可用的supervisor</li>
<li>supervisor周期性发送心跳给nimbus表示自己还活着。</li>
<li>如果supervisor挂掉，不会发送心跳给nimubs，nimbus将task发送给其他的supervisor</li>
<li>nimubs挂掉，super会继续执行自己task。</li>
<li>task完成后，supervisor等待新的task</li>
<li>同时，挂掉的nimbus可以通过监控工具软件自动重启。</li>
</ol>
<h2 id="二、集群部署"><a href="#二、集群部署" class="headerlink" title="二、集群部署"></a>二、集群部署</h2><ol>
<li><p>下载 <strong>apache-storm-2.1.0.tar.gz</strong></p>
</li>
<li><p>安装、配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf apache-storm-2.1.0.tar.gz -C &#x2F;soft</span><br><span class="line">[wbw@s201 &#x2F;soft]$ln -s apache-storm-2.1.0 storm</span><br><span class="line"></span><br><span class="line"># 环境变量</span><br><span class="line"># storm</span><br><span class="line">export STORM_HOME&#x3D;&#x2F;soft&#x2F;storm</span><br><span class="line">export PATH&#x3D;$PATH:$STORM_HOME&#x2F;bin</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>验证安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;storm&#x2F;bin]$.&#x2F;storm version</span><br><span class="line">Storm 2.1.0</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置 [storm/conf/storm.yaml]</p>
<p>先拷贝一份</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp storm.yaml storm.yaml.bak</span><br></pre></td></tr></table></figure></div>

<p>配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">storm.zookeeper.servers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"s201"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"s202"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"s203"</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">nimbus.seeds:</span> <span class="string">["s201"]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ui.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">ui.port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">supervisor.slots.prots:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6700</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6701</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6702</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6703</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发到S202~S204，并配置好环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$scp -r apache-storm-2.1.0 wbw@s202:&#x2F;soft&#x2F;</span><br><span class="line">$scp -r apache-storm-2.1.0 wbw@s203:&#x2F;soft&#x2F;</span><br><span class="line">$scp -r apache-storm-2.1.0 wbw@s204:&#x2F;soft&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动s201 nimbus进程</span><br><span class="line">$storm nimbus &amp;</span><br><span class="line"></span><br><span class="line"># 启动S202~S204 supervisor进程</span><br><span class="line">$storm supervisor &amp;</span><br><span class="line"></span><br><span class="line"># 启动s201的UI进程</span><br><span class="line">$storm ui &amp;</span><br><span class="line"></span><br><span class="line"># 启动日志进程（在WEBUI中可以查看log）</span><br><span class="line">$storm logviewer &amp;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>通过webui查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;s201:8080</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、单词计数案例"><a href="#三、单词计数案例" class="headerlink" title="三、单词计数案例"></a>三、单词计数案例</h2><h3 id="3-1-导入依赖"><a href="#3-1-导入依赖" class="headerlink" title="3.1 导入依赖"></a>3.1 导入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.storm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>storm-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-编写Spout数据源"><a href="#3-2-编写Spout数据源" class="headerlink" title="3.2 编写Spout数据源"></a>3.2 编写Spout数据源</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.spout.SpoutOutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichSpout;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Values;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordSpout class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/19 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordSpout</span> <span class="keyword">implements</span> <span class="title">IRichSpout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下文</span></span><br><span class="line">    <span class="keyword">private</span> TopologyContext context;</span><br><span class="line">    <span class="comment">// 输出收集器</span></span><br><span class="line">    <span class="keyword">private</span> SpoutOutputCollector collector;</span><br><span class="line">    <span class="comment">// 随机发生器</span></span><br><span class="line">    <span class="keyword">private</span> Random randomGenerator = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> Integer idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Map map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = topologyContext;</span><br><span class="line">        <span class="keyword">this</span>.collector = spoutOutputCollector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生数据，下一个元组，运行的时候，是不断执行这个方法的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextTuple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.idx++ &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            List&lt;String&gt; lines = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            lines.add(<span class="string">"hello world"</span>);</span><br><span class="line">            lines.add(<span class="string">"hello tom"</span>);</span><br><span class="line">            lines.add(<span class="string">"hello storm"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = randomGenerator.nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 输出元组</span></span><br><span class="line">            <span class="keyword">this</span>.collector.emit(<span class="keyword">new</span> Values(lines.get(i)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ack</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明输出数据(对应上面的输出元组)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line">        outputFieldsDeclarer.declare(<span class="keyword">new</span> Fields(<span class="string">"line"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-3-编写单词分割bolt"><a href="#3-3-编写单词分割bolt" class="headerlink" title="3.3 编写单词分割bolt"></a>3.3 编写单词分割bolt</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichBolt;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Values;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordCreatorBolt class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/19 16:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCreatorBolt</span> <span class="keyword">implements</span> <span class="title">IRichBolt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OutputCollector collector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map map, TopologyContext topologyContext, OutputCollector outputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collector = outputCollector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理传来的元组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据下表获取元组对应位置的数据</span></span><br><span class="line">        String line = tuple.getString(<span class="number">0</span>);</span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="comment">// 产生新的tuple交给下一个blot</span></span><br><span class="line">            <span class="keyword">this</span>.collector.emit(<span class="keyword">new</span> Values(word, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line">        outputFieldsDeclarer.declare(<span class="keyword">new</span> Fields(<span class="string">"word"</span>, <span class="string">"count"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-4-编写单词计数bolt"><a href="#3-4-编写单词计数bolt" class="headerlink" title="3.4 编写单词计数bolt"></a>3.4 编写单词计数bolt</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichBolt;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordCounterBolt class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/19 16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCounterBolt</span> <span class="keyword">implements</span> <span class="title">IRichBolt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OutputCollector collector;</span><br><span class="line">    <span class="comment">// Map用来输出结果</span></span><br><span class="line">    Map&lt;String, Integer&gt; counterMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map map, TopologyContext topologyContext, OutputCollector outputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collector = outputCollector;</span><br><span class="line">        <span class="keyword">this</span>.counterMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line">        String word = tuple.getString(<span class="number">0</span>);</span><br><span class="line">        Integer count = tuple.getInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (!counterMap.containsKey(word)) &#123;</span><br><span class="line">            counterMap.put(word, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            counterMap.put(word, counterMap.get(word) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理完时，被执行的方法，但是一旦开始就一直在运行。除非kill掉，会执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : counterMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" : "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-5-编写APP主类"><a href="#3-5-编写APP主类" class="headerlink" title="3.5 编写APP主类"></a>3.5 编写APP主类</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Topology 属性设置</span></span><br><span class="line">        TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">        <span class="comment">// 设置Spout</span></span><br><span class="line">        builder.setSpout(<span class="string">"spout"</span>, <span class="keyword">new</span> WordSpout(), <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 设置creatorBolt（这里的shuffleGrouping对应上面spout的id）</span></span><br><span class="line">        builder.setBolt(<span class="string">"creatorBolt"</span>, <span class="keyword">new</span> WordCreatorBolt(), <span class="number">3</span>).shuffleGrouping(<span class="string">"spout"</span>);</span><br><span class="line">        <span class="comment">// 设置counterBlot（这里的fieldsGrouping对应上一个bolt的id，并以其中一个字段作为分组条件）</span></span><br><span class="line">        builder.setBolt(<span class="string">"counterBolt"</span>, <span class="keyword">new</span> WordCounterBolt()).fieldsGrouping(<span class="string">"creatorBolt"</span>, <span class="keyword">new</span> Fields(<span class="string">"word"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.setDebug(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 本地集群模式</span></span><br><span class="line">        LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">        cluster.submitTopology(<span class="string">"WordCountTopology"</span>, config, builder.createTopology());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止集群查看结果</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        cluster.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>等待运行结束，查看结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">storm : 36</span><br><span class="line">tom : 32</span><br><span class="line">world : 32</span><br><span class="line">hello : 100</span><br></pre></td></tr></table></figure></div>



<h3 id="3-6-集群模式"><a href="#3-6-集群模式" class="headerlink" title="3.6 集群模式"></a>3.6 集群模式</h3><ol>
<li><p>修改APP类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地集群模式</span></span><br><span class="line"><span class="comment">//LocalCluster cluster = new LocalCluster();</span></span><br><span class="line"><span class="comment">//cluster.submitTopology("WordCountTopology", config, builder.createTopology());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止集群查看结果</span></span><br><span class="line"><span class="comment">//Thread.sleep(10000);</span></span><br><span class="line"><span class="comment">//cluster.shutdown();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集群模式</span></span><br><span class="line">StormSubmitter.submitTopology(<span class="string">"WordCountTopology"</span>, config, builder.createTopology());</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>导出JAR包</p>
</li>
<li><p>在Storm节点上运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw&#x2F;tmp]$storm jar Storm-1.0-SNAPSHOT.jar cn.wangbowen.storm.wordcount.App</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看WEIUI</p>
<p><a href="/postImages/jar1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/jar1.png" class="lazyload"></a></p>
</li>
</ol>
<h2 id="四、并发度"><a href="#四、并发度" class="headerlink" title="四、并发度"></a>四、并发度</h2><p>并发度 == 所有的task个数的总和。即，N个task运行在M个executor上，executor又在K个worker中。</p>
<h3 id="4-1-设置-worker-个数"><a href="#4-1-设置-worker-个数" class="headerlink" title="4.1 设置 worker 个数"></a>4.1 设置 worker 个数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setNumWorkers</span></span><br><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.setNumWorkers(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="4-2-设置-executors-个数"><a href="#4-2-设置-executors-个数" class="headerlink" title="4.2 设置 executors 个数"></a>4.2 设置 executors 个数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置Spout的并发暗示，第三个参数即executor个数（线程数）</span></span><br><span class="line">builder.setSpout(<span class="string">"spout"</span>, <span class="keyword">new</span> WordSpout(), <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 设置bolt的并发暗示</span></span><br><span class="line">builder.setBolt(<span class="string">"creatorBolt"</span>, <span class="keyword">new</span> WordCreatorBolt(), <span class="number">3</span>).shuffleGrouping(<span class="string">"spout"</span>);</span><br></pre></td></tr></table></figure></div>

<p>线程数 == cpu的内核数。</p>
<h3 id="4-3-设置-task-个数"><a href="#4-3-设置-task-个数" class="headerlink" title="4.3 设置 task 个数"></a>4.3 设置 task 个数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setNumTasks</span></span><br><span class="line">builder.setBolt(<span class="string">"creatorBolt"</span>, <span class="keyword">new</span> WordCreatorBolt(), <span class="number">3</span>).shuffleGrouping(<span class="string">"spout"</span>).setNumTasks(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>



<h2 id="五、分组"><a href="#五、分组" class="headerlink" title="五、分组"></a>五、分组</h2><h3 id="5-1-all（暂无）"><a href="#5-1-all（暂无）" class="headerlink" title="5.1 all（暂无）"></a>5.1 all（暂无）</h3><h3 id="5-2-direct（暂无）"><a href="#5-2-direct（暂无）" class="headerlink" title="5.2 direct（暂无）"></a>5.2 direct（暂无）</h3><h3 id="5-3-global（暂无）"><a href="#5-3-global（暂无）" class="headerlink" title="5.3 global（暂无）"></a>5.3 global（暂无）</h3><h3 id="5-4-自定义"><a href="#5-4-自定义" class="headerlink" title="5.4 自定义"></a>5.4 自定义</h3><ol>
<li><p>自定义CustomStreamGrouping类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGrouping</span> <span class="keyword">implements</span> <span class="title">CustomStreamGrouping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受目标任务的id集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; targetTasks ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(WorkerTopologyContext context, GlobalStreamId stream, List&lt;Integer&gt; targetTasks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetTasks = targetTasks ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">chooseTasks</span><span class="params">(<span class="keyword">int</span> taskId, List&lt;Object&gt; values)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; subTaskIds = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= targetTasks.size() / <span class="number">2</span> ; i ++)&#123;</span><br><span class="line">            subTaskIds.add(targetTasks.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> subTaskIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置分组策略</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">        <span class="comment">//设置Spout</span></span><br><span class="line">        builder.setSpout(<span class="string">"wcspout"</span>, <span class="keyword">new</span> WordCountSpout()).setNumTasks(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//设置creator-Bolt(这里设置自己的分组)</span></span><br><span class="line">        builder.setBolt(<span class="string">"split-bolt"</span>, <span class="keyword">new</span> SplitBolt(),<span class="number">4</span>).customGrouping(<span class="string">"wcspout"</span>,<span class="keyword">new</span> MyGrouping()).setNumTasks(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Config conf = <span class="keyword">new</span> Config();</span><br><span class="line">        conf.setNumWorkers(<span class="number">2</span>);</span><br><span class="line">        conf.setDebug(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 本地模式storm</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">        LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">        cluster.submitTopology(<span class="string">"wc"</span>, conf, builder.createTopology());</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="六、消息消费"><a href="#六、消息消费" class="headerlink" title="六、消息消费"></a>六、消息消费</h2><h3 id="6-1-ack、fail"><a href="#6-1-ack、fail" class="headerlink" title="6.1 ack、fail"></a>6.1 ack、fail</h3><ol>
<li><p>发送的tuple需要携带msgId</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index 为消息ID</span></span><br><span class="line">collector.emit(<span class="keyword">new</span> Values(line),index);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>bolt中需要对tuple进行确认(ack() | fail())</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line">    String line = tuple.getString(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="keyword">this</span> + <span class="string">" : "</span> + line);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span> Random().nextBoolean())&#123;</span><br><span class="line">        <span class="comment">//确认</span></span><br><span class="line">        collector.ack(tuple);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//失败</span></span><br><span class="line">        collector.fail(tuple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>实现spout的ack()和fail()方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ack</span><span class="params">(Object msgId)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">this</span> + <span class="string">" : ack() : "</span> + msgId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Object msgId)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">this</span> + <span class="string">" : fail() : "</span> + msgId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="6-2-确保消息消费"><a href="#6-2-确保消息消费" class="headerlink" title="6.2 确保消息消费"></a>6.2 确保消息消费</h3><p>用一个队列来存放消息队列，如果失败再fail函数里面进行重发。N次后丢弃。</p>
<h2 id="七、整合-Kafka"><a href="#七、整合-Kafka" class="headerlink" title="七、整合 Kafka"></a>七、整合 Kafka</h2><p>storm以消费者从kafka队列中提取消息。</p>
<p><strong>步骤</strong></p>
<ol>
<li><p>添加依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整合kafka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.storm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>storm-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写Blot类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichBolt;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBlot class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/21 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlot</span> <span class="keyword">implements</span> <span class="title">IRichBolt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TopologyContext context;</span><br><span class="line">    <span class="keyword">private</span> OutputCollector collector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map map, TopologyContext topologyContext, OutputCollector outputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = topologyContext;</span><br><span class="line">        <span class="keyword">this</span>.collector = outputCollector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line">        System.out.println(tuple.getString(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写App类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.Config;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.LocalCluster;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.kafka.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.spout.SchemeAsMultiScheme;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.TopologyBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/21 13:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// zookeeper连接串</span></span><br><span class="line">        String zkConnString = <span class="string">"192.168.174.201:2181,192.168.174.202:2181,192.168.174.203:2181"</span>;</span><br><span class="line">        <span class="comment">// 连接broker</span></span><br><span class="line">        BrokerHosts hosts = <span class="keyword">new</span> ZkHosts(zkConnString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// kafka主题</span></span><br><span class="line">        String topicName = <span class="string">"test4"</span>;</span><br><span class="line">        <span class="comment">// 准备spout配置</span></span><br><span class="line">        SpoutConfig spoutConfig = <span class="keyword">new</span> SpoutConfig(hosts, topicName, <span class="string">"/"</span> + topicName, UUID.randomUUID().toString());</span><br><span class="line">        spoutConfig.scheme = <span class="keyword">new</span> SchemeAsMultiScheme(<span class="keyword">new</span> StringScheme());</span><br><span class="line">        <span class="comment">// kafkaSpout</span></span><br><span class="line">        KafkaSpout kafkaSpout = <span class="keyword">new</span> KafkaSpout(spoutConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备topology</span></span><br><span class="line">        TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">        <span class="comment">// 设置选择spout</span></span><br><span class="line">        builder.setSpout(<span class="string">"kafkaSpout"</span>, kafkaSpout);</span><br><span class="line">        <span class="comment">// 设置选择bolt</span></span><br><span class="line">        builder.setBolt(<span class="string">"myBolt"</span>, <span class="keyword">new</span> MyBlot()).shuffleGrouping(<span class="string">"kafkaSpout"</span>);</span><br><span class="line">        <span class="comment">// 本地执行</span></span><br><span class="line">        LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        cluster.submitTopology(<span class="string">"storm-kafka"</span>, config, builder.createTopology());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动ZK、Kafka、storm集群、运行App方法</p>
</li>
<li><p>使用kafka控制台生产者发送消息给kafka</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;kafka-console-producer.sh --broker-list s202:9092 --topic test4</span><br><span class="line">&gt;hello</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>看storm控制台是否打印结果（消费）</p>
</li>
</ol>
<h2 id="八、整合-HBase"><a href="#八、整合-HBase" class="headerlink" title="八、整合 HBase"></a>八、整合 HBase</h2><ol>
<li><p>添加依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整合HBase --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.storm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>storm-hbase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写数据源Spout类（引用上面的单词案例）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.spout.SpoutOutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichSpout;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Values;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordSpout class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/19 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordSpout</span> <span class="keyword">implements</span> <span class="title">IRichSpout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下文</span></span><br><span class="line">    <span class="keyword">private</span> TopologyContext context;</span><br><span class="line">    <span class="comment">// 输出收集器</span></span><br><span class="line">    <span class="keyword">private</span> SpoutOutputCollector collector;</span><br><span class="line">    <span class="comment">// 随机发生器</span></span><br><span class="line">    <span class="keyword">private</span> Random randomGenerator = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> Integer idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Map map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = topologyContext;</span><br><span class="line">        <span class="keyword">this</span>.collector = spoutOutputCollector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生数据，下一个元组，运行的时候，是不断执行这个方法的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextTuple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.idx++ &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            List&lt;String&gt; lines = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            lines.add(<span class="string">"hello world"</span>);</span><br><span class="line">            lines.add(<span class="string">"hello tom"</span>);</span><br><span class="line">            lines.add(<span class="string">"hello storm"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = randomGenerator.nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 输出元组</span></span><br><span class="line">            <span class="keyword">this</span>.collector.emit(<span class="keyword">new</span> Values(lines.get(i)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ack</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明输出数据(对应上面的输出元组)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line">        outputFieldsDeclarer.declare(<span class="keyword">new</span> Fields(<span class="string">"line"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写切分Blot类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichBolt;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Fields;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Values;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SplitBolt class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/19 16:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitBolt</span> <span class="keyword">implements</span> <span class="title">IRichBolt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OutputCollector collector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map map, TopologyContext topologyContext, OutputCollector outputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collector = outputCollector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理传来的元组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据下表获取元组对应位置的数据</span></span><br><span class="line">        String line = tuple.getString(<span class="number">0</span>);</span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="comment">// 产生新的tuple交给下一个blot</span></span><br><span class="line">            <span class="keyword">this</span>.collector.emit(<span class="keyword">new</span> Values(word, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line">        outputFieldsDeclarer.declare(<span class="keyword">new</span> Fields(<span class="string">"word"</span>, <span class="string">"count"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写HbaseBlot类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.TableName;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Table;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.OutputCollector;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.task.TopologyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.IRichBolt;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.OutputFieldsDeclarer;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.tuple.Tuple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HBaseBolt class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/21 16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseBolt</span> <span class="keyword">implements</span> <span class="title">IRichBolt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Table table;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(Map map, TopologyContext topologyContext, OutputCollector outputCollector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建conf对象</span></span><br><span class="line">            Configuration conf = HBaseConfiguration.create();</span><br><span class="line">            <span class="comment">// 通过连接工厂创建连接对象</span></span><br><span class="line">            Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">            <span class="comment">// 获得表名对象</span></span><br><span class="line">            TableName tableName = TableName.valueOf(<span class="string">"ns1:word_count"</span>);</span><br><span class="line">            <span class="comment">// 获得table</span></span><br><span class="line">            table = conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单词-个数,增量到HBase</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Tuple tuple)</span> </span>&#123;</span><br><span class="line">        String word = tuple.getString(<span class="number">0</span>);</span><br><span class="line">        Integer count = tuple.getInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] rowKey = Bytes.toBytes(word);</span><br><span class="line">        <span class="keyword">byte</span>[] f = Bytes.toBytes(<span class="string">"f1"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] c = Bytes.toBytes(<span class="string">"count"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            table.incrementColumnValue(rowKey, f, c, count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareOutputFields</span><span class="params">(OutputFieldsDeclarer outputFieldsDeclarer)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getComponentConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写App类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.storm.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.storm.Config;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.LocalCluster;</span><br><span class="line"><span class="keyword">import</span> org.apache.storm.topology.TopologyBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/21 15:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TopologyBuilder builder = <span class="keyword">new</span> TopologyBuilder();</span><br><span class="line">        builder.setSpout(<span class="string">"wcSpout"</span>, <span class="keyword">new</span> WordSpout());</span><br><span class="line">        builder.setBolt(<span class="string">"splitBlot"</span>, <span class="keyword">new</span> SplitBolt()).shuffleGrouping(<span class="string">"wcSpout"</span>);</span><br><span class="line">        builder.setBolt(<span class="string">"hbaseBlot"</span>, <span class="keyword">new</span> HBaseBolt()).shuffleGrouping(<span class="string">"splitBlot"</span>);</span><br><span class="line"></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        LocalCluster cluster = <span class="keyword">new</span> LocalCluster();</span><br><span class="line">        cluster.submitTopology(<span class="string">"wc-Hbase"</span>, config, builder.createTopology());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将 <strong>hbase-site.xml</strong> 和 <strong>hdfs-site.xml</strong> 配置文件放到 resources 下</p>
</li>
<li><p>启动ZK、Storm、hadoop、Hbase集群</p>
</li>
<li><p>创建表 <strong>ns1:word_count</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hbase shell</span><br><span class="line">$hbase shell&gt;create &#39;ns1:word_count&#39; , &#39;f1&#39;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行App（可能要等一会）</p>
</li>
<li><p>查看结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hbase(main):078:0&gt; scan &#39;ns1:word_count&#39;</span><br><span class="line">ROW                                   COLUMN+CELL                                                                                                 </span><br><span class="line"> hello                                column&#x3D;f1:count, timestamp&#x3D;1587461666807, value&#x3D;\x00\x00\x00\x00\x00\x00\x00d                               </span><br><span class="line"> storm                                column&#x3D;f1:count, timestamp&#x3D;1587461666817, value&#x3D;\x00\x00\x00\x00\x00\x00\x00!                               </span><br><span class="line"> tom                                  column&#x3D;f1:count, timestamp&#x3D;1587461666795, value&#x3D;\x00\x00\x00\x00\x00\x00\x00\x1E                            </span><br><span class="line"> world                                column&#x3D;f1:count, timestamp&#x3D;1587461666803, value&#x3D;\x00\x00\x00\x00\x00\x00\x00%                               </span><br><span class="line">4 row(s) in 0.0130 seconds</span><br></pre></td></tr></table></figure></div>

<p>利用之前的HBase JAVA API 查看</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建conf对象</span></span><br><span class="line">    Configuration conf = HBaseConfiguration.create();</span><br><span class="line">    <span class="comment">// 通过连接工厂创建连接对象</span></span><br><span class="line">    Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    <span class="comment">// 获得表名对象</span></span><br><span class="line">    TableName tableName = TableName.valueOf(<span class="string">"ns1:word_count"</span>);</span><br><span class="line">    <span class="comment">// 获得table</span></span><br><span class="line">    Table table = conn.getTable(tableName);</span><br><span class="line">    <span class="comment">// 通过bytes工具类创建字节数组(将字符串)</span></span><br><span class="line">    <span class="keyword">byte</span>[] rowId = Bytes.toBytes(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="comment">// 创建get对象</span></span><br><span class="line">    Get get = <span class="keyword">new</span> Get(rowId);</span><br><span class="line">    Result r = table.get(get);</span><br><span class="line">    <span class="keyword">byte</span>[] idValue = r.getValue(Bytes.toBytes(<span class="string">"f1"</span>), Bytes.toBytes(<span class="string">"count"</span>));</span><br><span class="line">    System.out.println(Bytes.toLong(idValue));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打印结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Storm</category>
      </categories>
      <tags>
        <tag>Storm</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue使用入门</title>
    <url>/2019/11/21/Vue%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Vue使用入门"><a href="#Vue使用入门" class="headerlink" title="Vue使用入门"></a>Vue使用入门</h1><p>官网：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p>
<h2 id="一、Vue的项目结构"><a href="#一、Vue的项目结构" class="headerlink" title="一、Vue的项目结构"></a>一、Vue的项目结构</h2><p><a href="http://www.uml.org.cn/AJAX/201812103.asp?artid=21463?weiid=2774" target="_blank" rel="noopener">http://www.uml.org.cn/AJAX/201812103.asp?artid=21463?weiid=2774</a></p>
<p><a href="https://www.jianshu.com/p/f4e95663e10d" target="_blank" rel="noopener">https://www.jianshu.com/p/f4e95663e10d</a></p>
<h2 id="二、使用WebStorm创建一个Vue项目"><a href="#二、使用WebStorm创建一个Vue项目" class="headerlink" title="二、使用WebStorm创建一个Vue项目"></a>二、使用WebStorm创建一个Vue项目</h2><p><a href="https://blog.csdn.net/weixin_40877388/article/details/80911934" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40877388/article/details/80911934</a></p>
<p><a href="https://blog.csdn.net/qq_37350706/article/details/86591102" target="_blank" rel="noopener">https://blog.csdn.net/qq_37350706/article/details/86591102</a></p>
<h2 id="三、Vue起步"><a href="#三、Vue起步" class="headerlink" title="三、Vue起步"></a>三、Vue起步</h2><p><a href="https://www.runoob.com/vue2/vue-start.html" target="_blank" rel="noopener">https://www.runoob.com/vue2/vue-start.html</a></p>
<h2 id="四、组件间的传值——Vuex"><a href="#四、组件间的传值——Vuex" class="headerlink" title="四、组件间的传值——Vuex"></a>四、组件间的传值——Vuex</h2><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure></div>

<p>在项目的src目录下新建一个目录store，在该目录下新建一个index.js文件，我们用来创建vuex实例，然后在该文件中引入vue和vuex，创建Vuex.Store实例保存到变量store中，最后使用export default导出store：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">      activeIndex: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></div>

<p>然后我们在main.js文件中引入该文件，在文件里面添加 import store from ‘./store’;，再在vue实例全局引入store对象；</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,		<span class="comment">//在这里添加！！</span></span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>如：在state中定义了一个activeIndex: 1</p>
<p>那么就可以使用 this.$store.state.activeIndex 来取值，</p>
<p>也可以直接赋值 this.store.state.activeIndex = 2;</p>
<h3 id="4-3-使用细节"><a href="#4-3-使用细节" class="headerlink" title="4.3 使用细节"></a>4.3 使用细节</h3><p><a href="https://baijiahao.baidu.com/s?id=1618794879569468435&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1618794879569468435&amp;wfr=spider&amp;for=pc</a></p>
<h2 id="五、异步请求axios"><a href="#五、异步请求axios" class="headerlink" title="五、异步请求axios"></a>五、异步请求axios</h2><h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p><a href="https://www.npmjs.com/package/vue-axios" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-axios</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在main.js中添加如下内容</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"> </span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure></div>



<h3 id="5-2-基本使用"><a href="#5-2-基本使用" class="headerlink" title="5.2 基本使用"></a>5.2 基本使用</h3><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小例子，具体看上面那个连接</span></span><br><span class="line"><span class="keyword">this</span>.axios.get(<span class="string">'/queryUser'</span>, &#123;<span class="attr">params</span>: &#123;<span class="attr">name</span>: <span class="string">'testName'</span>, <span class="attr">count</span>: <span class="number">5</span>&#125;&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.axios.post(<span class="string">'/postTest'</span>, &#123;<span class="attr">name</span>: <span class="string">'testName'</span>, <span class="attr">count</span>: <span class="number">5</span>&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.axios.put(<span class="string">'/putTest'</span>, &#123;<span class="attr">name</span>: <span class="string">'testName'</span>, <span class="attr">count</span>: <span class="number">5</span>&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.axios.delete(<span class="string">'/deleteTest'</span>, &#123;<span class="attr">params</span>: &#123;<span class="attr">name</span>: <span class="string">'testName'</span>, <span class="attr">count</span>: <span class="number">5</span>&#125;&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>后端springboot</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;suki_rong&#x2F;article&#x2F;details&#x2F;80445880</span><br></pre></td></tr></table></figure></div>



<h3 id="5-3-封装请求"><a href="#5-3-封装请求" class="headerlink" title="5.3 封装请求"></a>5.3 封装请求</h3><p>自行百度，目前没用到</p>
<h2 id="六、axios拦截器"><a href="#六、axios拦截器" class="headerlink" title="六、axios拦截器"></a>六、axios拦截器</h2><p><a href="https://blog.csdn.net/AnlanJion/article/details/82144113" target="_blank" rel="noopener">https://blog.csdn.net/AnlanJion/article/details/82144113</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.js文件，貌似目前只有把过滤器写在main.js才会生效，后续再研究 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">"vue-axios"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios 配置</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request拦截器"</span>);</span><br><span class="line">    <span class="keyword">if</span> (store.state.token) &#123;</span><br><span class="line">      config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"response拦截器"</span>);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="keyword">let</span> err = &#123;&#125;; <span class="comment">// ！这里可以加入对应的UI进行提示框！</span></span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>: err.message = <span class="string">'请求错误(400)'</span> ; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          <span class="comment">// 401 清除token信息并跳转到登录页面</span></span><br><span class="line">          store.commit(types.LOGOUT);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 只有在当前路由不是登录页面才跳转</span></span><br><span class="line">          router.currentRoute.path !== <span class="string">'login'</span> &amp;&amp;</span><br><span class="line">          router.replace(&#123;</span><br><span class="line">            path: <span class="string">'login'</span>,</span><br><span class="line">            query: &#123;<span class="attr">redirect</span>: router.currentRoute.path&#125;,</span><br><span class="line">          &#125;);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>: err.message = <span class="string">'拒绝访问(403)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>: err.message = <span class="string">`请求出错(404)`</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>: err.message = <span class="string">'请求超时(408)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>: err.message = <span class="string">'服务器错误(500)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>: err.message = <span class="string">'服务未实现(501)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>: err.message = <span class="string">'网络错误(502)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>: err.message = <span class="string">'服务不可用(503)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>: err.message = <span class="string">'网络超时(504)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">505</span>: err.message = <span class="string">'HTTP版本不受支持(505)'</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: err.message = <span class="string">`连接出错(<span class="subst">$&#123;err.response.status&#125;</span>)!`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      alert(err.message);<span class="comment">/*!改成自己的UI提示框!*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(JSON.stringify(error));//console : Error: Request failed with status code 402</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h2 id="七、axios跨域"><a href="#七、axios跨域" class="headerlink" title="七、axios跨域"></a>七、axios跨域</h2><p><a href="https://yq.aliyun.com/articles/705295" target="_blank" rel="noopener">https://yq.aliyun.com/articles/705295</a></p>
<p>目前我采用在nginx进行配置，解决的跨域。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass   http:&#x2F;&#x2F;localhost:9000&#x2F;;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        # 添加如下内容</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#39;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#39;;</span><br><span class="line"></span><br><span class="line">        if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="八、router路由"><a href="#八、router路由" class="headerlink" title="八、router路由"></a>八、router路由</h2><p>官方介绍：</p>
<p><a href="https://router.vuejs.org/zh/guide/#html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/#html</a></p>
<p>带参路由：</p>
<p><a href="https://segmentfault.com/a/1190000012735168?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012735168?utm_source=tag-newest</a></p>
<h2 id="九、打包部署springboot"><a href="#九、打包部署springboot" class="headerlink" title="九、打包部署springboot"></a>九、打包部署springboot</h2><ol>
<li><p>修改config目录下的index.js，找到并修改build:{assetsPublicPath: ‘./‘}原来没有.</p>
</li>
<li><p>然后打包，将dist下的所有文件，复制到springboot的static文件夹下面</p>
</li>
<li><p>然后springboot打jar包</p>
</li>
<li><p>在Linux上运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup java -jar 自己的springboot项目.jar &gt;日志文件名.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></div>

<p>命令解释：</p>
<p> nohup：不挂断地运行命令，退出帐户之后继续运行相应的进程。</p>
<hr>
<p>java -jar 自己的springboot项目.jar：执行springboot的项目，如果单单只执行该命令，linux只会短暂的运行该项目，当退出控制台后会自动关闭该项目。</p>
<hr>
<p>&gt;日志文件名.log：是nohup把command的输出重定向到当前目录的指定的“日志文件名.log”文件中，即输出内容不打印到屏幕上，而是输出到”日志文件名.log”文件中。不指定文件名会在当前目录创建nohup.out，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。</p>
<hr>
<p>2&gt;&amp;1：2就是标准错误，1是标准输出，该命令相当于把标准错误重定向到标准输出么。这里&amp;相当于标准错误等效于标准输出，即把标准错误和标准输出同时输出到指定的“日志文件名.log”文件中。</p>
<hr>
<p>最后的&amp;：让改作业在后台运行。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper学习笔记</title>
    <url>/2020/03/07/ZooKeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ZooKeeper学习笔记"><a href="#ZooKeeper学习笔记" class="headerlink" title="ZooKeeper学习笔记"></a>ZooKeeper学习笔记</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ol>
<li>管理大量主机的协同服务。</li>
<li>分布式应用，实现分布式读写技术。</li>
<li>zookeeper提供的服务<ul>
<li>Naming service：按名称区分集群中的节点</li>
<li>Configuration management：对加入节点的最新化处理</li>
<li>Cluster management：实时感知集群中节点的增减</li>
<li>Leader election：leader选举</li>
<li>Locking and synchronization service：修改时锁定数据，实现容灾</li>
<li>Highly reliable data registry：节点宕机数据也是可用的</li>
</ul>
</li>
</ol>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="2-1-单机版"><a href="#2-1-单机版" class="headerlink" title="2.1 单机版"></a>2.1 单机版</h3><ol>
<li><p>jdk安装</p>
</li>
<li><p>下载zookeeper-3.4.9.tar.gz</p>
</li>
<li><p>tar开包，到指定目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf zookeeper-3.4.9.tar.gz</span><br><span class="line">$sudo mv zookeeper-3.4.9 &#x2F;soft&#x2F;zookeeper-3.4.9</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建链接</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ln -s zookeeper-3.4.9 zookeeper</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ZooKeeper</span><br><span class="line">export ZK_HOME&#x3D;&#x2F;soft&#x2F;zookeeper</span><br><span class="line">export PATH&#x3D;$PATH:$ZK_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line"># 更新资源</span><br><span class="line">$source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置zoo.cfg</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;zookeeper&#x2F;conf]$cp zoo_sample.cfg zoo.cfg</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;zookeeper&#x2F;conf]$vi zoo.cfg</span><br><span class="line"># 修改数据目录，其余配置不用动</span><br><span class="line">dataDir&#x3D;&#x2F;home&#x2F;wbw&#x2F;zookeeper</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>自定义日志目录</p>
<p>修改 /bin/zkEnv.sh文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;zookeeper&#x2F;bin]$vi zkEnv.sh</span><br><span class="line"># 修改以下两个地方的目录，将日志文件输出到安装目录</span><br><span class="line">if [ &quot;x$&#123;ZOO_LOG_DIR&#125;&quot; &#x3D; &quot;x&quot; ]</span><br><span class="line">then</span><br><span class="line">    ZOO_LOG_DIR&#x3D;&quot;$&#123;ZOOKEEPER_PREFIX&#125;&#x2F;logs&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;x$&#123;ZOO_LOG4J_PROP&#125;&quot; &#x3D; &quot;x&quot; ]</span><br><span class="line">then</span><br><span class="line">    ZOO_LOG4J_PROP&#x3D;&quot;INFO,ROLLINGFILE&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div>

<p>修改/conf/log4j.properties文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;zookeeper&#x2F;conf]$vi log4j.properties</span><br><span class="line"># 修改以下几个地方</span><br><span class="line">zookeeper.root.logger&#x3D;INFO, ROLLINGFILE</span><br><span class="line">zookeeper.log.dir&#x3D;&#x2F;soft&#x2F;zookeeper&#x2F;logs</span><br><span class="line">zookeeper.tracelog.dir&#x3D;&#x2F;soft&#x2F;zookeeper&#x2F;logs</span><br><span class="line">log4j.appender.ROLLINGFILE&#x3D;org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">#log4j.appender.ROLLINGFILE.MaxFileSize&#x3D;10MB (把这句话注释掉)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动zk服务器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$zkServer.sh start</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>验证zk</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$jps</span><br><span class="line">1606 QuorumPeerMain</span><br><span class="line">$netstat -anop | grep 2181</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="3-2-完全分布式"><a href="#3-2-完全分布式" class="headerlink" title="3.2 完全分布式"></a>3.2 完全分布式</h3><ol>
<li><p>首先我们规划s201,s202,s203三台主机作为zookeeper节点</p>
</li>
<li><p>在每台机子上都安装zk，修改环境变量（和单机版一样，可以先做第3步，然后分发）</p>
</li>
<li><p>配置所有zk节点的配置文件zoo.cfg，末尾追加：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># server.n=host:port1:port2，数字n必须是myid中的值</span><br><span class="line"># port1:leader端口， 作为leader时，供follower连接的端口</span><br><span class="line"># port2:选举端口，选举leader时，供其他follower连接的端口</span><br><span class="line">server.1=s201:2888:3888</span><br><span class="line">server.2=s202:2888:3888</span><br><span class="line">server.3=s203:2888:3888</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在每台主机的ZK数据存放目录中添加myid</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$echo 1 &gt; myid</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$echo 2 &gt; myid</span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$echo 3 &gt; myid</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动服务集群</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh start</span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh start</span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh start</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看每台服务器状态</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh status</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh status</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh status</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>测试选举</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh stop</span><br><span class="line"></span><br><span class="line">[wbw@s202 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh status</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">[wbw@s203 &#x2F;home&#x2F;wbw&#x2F;zookeeper]$zkServer.sh status</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="三、访问zk"><a href="#三、访问zk" class="headerlink" title="三、访问zk"></a>三、访问zk</h2><h3 id="3-1-客户端"><a href="#3-1-客户端" class="headerlink" title="3.1 客户端"></a>3.1 客户端</h3><h4 id="zkCli-sh-连接"><a href="#zkCli-sh-连接" class="headerlink" title="zkCli.sh 连接"></a>zkCli.sh 连接</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$zkCli.sh -server s201:2181</span><br></pre></td></tr></table></figure></div>

<p>如果是连接本机，那么可以简写：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$zkCli.sh</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure></div>

<h4 id="help-帮助"><a href="#help-帮助" class="headerlink" title="help 帮助"></a>help 帮助</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure></div>

<h4 id="quit-退出"><a href="#quit-退出" class="headerlink" title="quit 退出"></a>quit 退出</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure></div>

<h4 id="create-创建节点"><a href="#create-创建节点" class="headerlink" title="create 创建节点"></a>create 创建节点</h4><p>创建节点（zk中以目录形式存在，逻辑上的 ）：一般放配置信息，大小一般&lt;1M。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 就像MAP那样，KV对。</span><br><span class="line"># 在&#x2F;a下添加tom内容（&#x2F;a就是一个节点，&lt;&#x2F;a, tom&gt;）</span><br><span class="line">create &#x2F;a tom</span><br><span class="line"></span><br><span class="line"># 必须要有父节点，每次创建都必须要写数据，以下是不行的。</span><br><span class="line">create &#x2F;a&#x2F;a1&#x2F;a11 tom2 </span><br><span class="line"># 需要进行如下创建：</span><br><span class="line">create &#x2F;a tom</span><br><span class="line">create &#x2F;a&#x2F;a1 tom1</span><br><span class="line">create &#x2F;a&#x2F;a1&#x2F;a11 tom2</span><br></pre></td></tr></table></figure></div>

<h4 id="ls-列表"><a href="#ls-列表" class="headerlink" title="ls 列表"></a>ls 列表</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] ls &#x2F;</span><br><span class="line">[a, zookeeper]</span><br></pre></td></tr></table></figure></div>

<h4 id="get-查看节点"><a href="#get-查看节点" class="headerlink" title="get 查看节点"></a>get 查看节点</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] get &#x2F;a</span><br><span class="line">tom</span><br><span class="line">cZxid &#x3D; 0x6</span><br><span class="line">ctime &#x3D; Sun Mar 08 20:28:40 CST 2020</span><br><span class="line">mZxid &#x3D; 0x6</span><br><span class="line">mtime &#x3D; Sun Mar 08 20:28:40 CST 2020</span><br><span class="line">pZxid &#x3D; 0x6</span><br><span class="line">cversion &#x3D; 0</span><br><span class="line">dataVersion &#x3D; 0</span><br><span class="line">aclVersion &#x3D; 0</span><br><span class="line">ephemeralOwner &#x3D; 0x0</span><br><span class="line">dataLength &#x3D; 3</span><br><span class="line">numChildren &#x3D; 0</span><br></pre></td></tr></table></figure></div>

<h4 id="set-设置数据"><a href="#set-设置数据" class="headerlink" title="set 设置数据"></a>set 设置数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] set &#x2F;a tom2</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] get &#x2F;a</span><br><span class="line">tom2</span><br></pre></td></tr></table></figure></div>

<h4 id="delete-删除节点"><a href="#delete-删除节点" class="headerlink" title="delete 删除节点"></a>delete 删除节点</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 5] delete &#x2F;a</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] ls &#x2F;</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure></div>

<h4 id="rmr-递归删除节点"><a href="#rmr-递归删除节点" class="headerlink" title="rmr 递归删除节点"></a>rmr 递归删除节点</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] create &#x2F;a tom</span><br><span class="line">Created &#x2F;a</span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] create &#x2F;a&#x2F;a1 tom1</span><br><span class="line">Created &#x2F;a&#x2F;a1</span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] create &#x2F;a&#x2F;a1&#x2F;a11 tom2</span><br><span class="line">Created &#x2F;a&#x2F;a1&#x2F;a11</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] ls &#x2F;a&#x2F;a1</span><br><span class="line">[a11]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] rmr &#x2F;a</span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] ls &#x2F;</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-通过API"><a href="#3-2-通过API" class="headerlink" title="3.2 通过API"></a>3.2 通过API</h3><ol>
<li><p>导入依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示指定路径下的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLs</span><span class="params">()</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.174.201:2181"</span>, <span class="number">5000</span>, <span class="keyword">null</span>);</span><br><span class="line">    List&lt;String&gt; children = zk.getChildren(<span class="string">"/a"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">        System.out.println(child);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归显示节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLsR</span><span class="params">()</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.174.201:2181"</span>, <span class="number">5000</span>, <span class="keyword">null</span>);</span><br><span class="line">    lsAll(zk,<span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lsAll</span><span class="params">(ZooKeeper zk, String path)</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(path);</span><br><span class="line">    List&lt;String&gt; children = zk.getChildren(path, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != children &amp;&amp; !children.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                lsAll(zk, path + child);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lsAll(zk, path + <span class="string">"/"</span> + child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置数据、查看数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span>每次更新数据，版本号都会+1，如果有2个人同时修改数据，那么版本号一旦有问题，将修改失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.174.201:2181"</span>, <span class="number">5000</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(zk.getData(<span class="string">"/a"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>)));</span><br><span class="line">    <span class="comment">// 这里的版本号要特别注意，如果错误了。设不成功！！！！</span></span><br><span class="line">    zk.setData(<span class="string">"/a"</span>, <span class="string">"tomtom"</span>.getBytes(), <span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(zk.getData(<span class="string">"/a"</span>, <span class="keyword">false</span>, <span class="keyword">null</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="四、zk架构"><a href="#四、zk架构" class="headerlink" title="四、zk架构"></a>四、zk架构</h2><h3 id="4-1-Client"><a href="#4-1-Client" class="headerlink" title="4.1 Client"></a>4.1 Client</h3><p>从server获取信息，周期性发送数据给server，表示自己还活着。</p>
<p>client连接时，server回传ack信息。</p>
<p>如果client没有收到reponse，自动重定向到另一个server。</p>
<h3 id="4-2-Server"><a href="#4-2-Server" class="headerlink" title="4.2 Server"></a>4.2 Server</h3><p>zk集群中的一员，向client提供所有service，回传ack信息给client，表示自己还活着。</p>
<h3 id="4-3-Ensemble"><a href="#4-3-Ensemble" class="headerlink" title="4.3 Ensemble"></a>4.3 Ensemble</h3><p>一组服务器，最小节点数是3。</p>
<p>最小节点数是3。</p>
<h3 id="4-4-Leader"><a href="#4-4-Leader" class="headerlink" title="4.4 Leader"></a>4.4 Leader</h3><p>如果连接的节点失败，自定恢复，zk服务启动时，完成leader选举。</p>
<h3 id="4-5-Follower"><a href="#4-5-Follower" class="headerlink" title="4.5 Follower"></a>4.5 Follower</h3><p>追寻leader指令的节点。</p>
<h2 id="五、节点"><a href="#五、节点" class="headerlink" title="五、节点"></a>五、节点</h2><h3 id="5-1-znode"><a href="#5-1-znode" class="headerlink" title="5.1 znode"></a>5.1 znode</h3><p>zk中的节点，维护了stat，由Version number, Action control list (ACL), Timestamp,Data length.构成。</p>
<h3 id="5-2-节点类型"><a href="#5-2-节点类型" class="headerlink" title="5.2 节点类型"></a>5.2 节点类型</h3><ol>
<li><p>持久节点：client结束，还存在。使用create创建的就是。</p>
</li>
<li><p>临时节点：在client活动时有效，断开自动删除。临时节点不能有子节点。leader推选时使用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 26] create -e &#x2F;c haha</span><br><span class="line">Created &#x2F;c</span><br><span class="line">[zk: localhost:2181(CONNECTED) 27] ls &#x2F;</span><br><span class="line">[b0000000003, a, c, zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 28] quit</span><br><span class="line">$zkCli.sh</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls &#x2F;</span><br><span class="line">[b0000000003, a, zookeeper]</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建临时节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEphemeral</span><span class="params">()</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.174.201:2181"</span>, <span class="number">5000</span>, <span class="keyword">null</span>);</span><br><span class="line">    zk.create(<span class="string">"/c"</span>, <span class="string">"haha"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">    <span class="comment">// 断点！</span></span><br><span class="line">    System.out.println(<span class="string">"Debug"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="3">
<li><p>序列节点：在节点名之后附加10个数字，主要用于同步和锁。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 21] create -s &#x2F;b heihei</span><br><span class="line">Created &#x2F;b0000000003</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="六、Session-会话"><a href="#六、Session-会话" class="headerlink" title="六、Session 会话"></a>六、Session 会话</h2><p>Session中的请求以FIFO执行，一旦client连接到server，session就建立了。sessionid分配client。</p>
<p>client以固定间隔向server发送心跳，表示session是valid的，zk集群如果在超时时候，没有收到心跳，判定为client挂了，与此同时，临时节点被删除。</p>
<h2 id="七、Watches-观察者"><a href="#七、Watches-观察者" class="headerlink" title="七、Watches 观察者"></a>七、Watches 观察者</h2><p>client能够通过watch机制在数据发生变化时收到通知。</p>
<p>client可以在read 节点时设置观察者。watch机制会发送通知给注册的客户端。</p>
<p>观察模式只触发一次。</p>
<p>session过期，watch机制删除了。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.174.201:2181"</span>, <span class="number">5000</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    Stat st = <span class="keyword">new</span> Stat();</span><br><span class="line"></span><br><span class="line">    Watcher w = <span class="keyword">null</span> ;</span><br><span class="line">    w = <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="comment">//回调</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"数据改了:"</span> + <span class="keyword">new</span> String(zk.getData(<span class="string">"/a"</span>, <span class="keyword">this</span>, <span class="keyword">null</span>)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] data = zk.getData(<span class="string">"/a"</span>, w , st);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="八、zk工作流程"><a href="#八、zk工作流程" class="headerlink" title="八、zk工作流程"></a>八、zk工作流程</h2><ol>
<li><p>zk集群启动后，client连接到其中的一个节点，这个节点可以leader，也可以follower。</p>
</li>
<li><p>连通后，node分配一个id给client，发送ack信息给client。</p>
</li>
<li><p>如果客户端没有收到ack，连接到另一个节点。</p>
</li>
<li><p>client周期性发送心跳信息给节点保证连接不会丢失。</p>
</li>
<li><p>如果client读取数据，发送请求给node，node读取自己数据库，返回节点数据给client。</p>
</li>
<li><p>如果client存储数据，将路径和数据发送给server，server转发给leader。</p>
</li>
<li><p>leader再补发请求给所有follower。只有大多数(超过半数)节点成功响应，则写操作成功。</p>
</li>
</ol>
<h2 id="九、leader推选"><a href="#九、leader推选" class="headerlink" title="九、leader推选"></a>九、leader推选</h2><ol>
<li>所有节点在同一目录下创建临时序列节点。</li>
<li>节点下会生成/xxx/xx000000001等节点。</li>
<li>序号最小的节点就是leader，其余就是follower.</li>
<li>每个节点观察小于自己节点的主机。(注册观察者)</li>
<li>如果leader挂了，对应znode删除了。</li>
<li>观察者收到通知。</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>ZooKeeper</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java虚拟机第3版（自动内存管理）</title>
    <url>/2020/05/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC3%E7%89%88%EF%BC%88%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%89/</url>
    <content><![CDATA[<h1 id="深入理解Java虚拟机第3版（自动内存管理）"><a href="#深入理解Java虚拟机第3版（自动内存管理）" class="headerlink" title="深入理解Java虚拟机第3版（自动内存管理）"></a>深入理解Java虚拟机第3版（自动内存管理）</h1><h2 id="一、Java内存区域与内存溢出异常"><a href="#一、Java内存区域与内存溢出异常" class="headerlink" title="一、Java内存区域与内存溢出异常"></a>一、Java内存区域与内存溢出异常</h2><h3 id="1-1-运行时数据区域"><a href="#1-1-运行时数据区域" class="headerlink" title="1.1 运行时数据区域"></a>1.1 运行时数据区域</h3><p><a href="/postImages/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.png" class="lazyload"></a></p>
<h4 id="1-1-1-程序计数器"><a href="#1-1-1-程序计数器" class="headerlink" title="1.1.1 程序计数器"></a>1.1.1 程序计数器</h4><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条指令，分支、循环、跳转、异常处理、线程恢复等基础功能就是靠这个来完成。</p>
<blockquote>
<p>没有规定任何OutOfMemoryError情况的区域</p>
</blockquote>
<h4 id="1-1-2-Java虚拟机栈"><a href="#1-1-2-Java虚拟机栈" class="headerlink" title="1.1.2 Java虚拟机栈"></a>1.1.2 Java虚拟机栈</h4><p>Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是JAVA方法执行的线程内存模型：每个方法被执行的时候，JAVA虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用到执行完毕，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<blockquote>
<ol>
<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverFlowError异常（如无限递归）</li>
<li>如果Java虚拟机栈容量可以动态扩展，当无法申请到足够的内存时会抛出OutOfMemoryError异常。</li>
</ol>
</blockquote>
<h4 id="1-1-3-本地方法栈"><a href="#1-1-3-本地方法栈" class="headerlink" title="1.1.3 本地方法栈"></a>1.1.3 本地方法栈</h4><p>本地方法栈与虚拟机栈所发挥的作用非常相似，区别只是虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>
<blockquote>
<p>和Java虚拟机栈情况相同</p>
</blockquote>
<h4 id="1-1-4-Java堆"><a href="#1-1-4-Java堆" class="headerlink" title="1.1.4 Java堆"></a>1.1.4 Java堆</h4><p>Java堆是被所有线程共享的一块内存区域，用来存放对象实例。</p>
<blockquote>
<p>Java堆可以设置成固定大小，也可以是可扩展的（主流，通过-Xmx和-Xms设置）。当没有内存完成实例分配，且堆也无法扩展时，抛出OutOfMemoryError异常。</p>
</blockquote>
<h4 id="1-1-5-方法区"><a href="#1-1-5-方法区" class="headerlink" title="1.1.5 方法区"></a>1.1.5 方法区</h4><p>各个线程共享的内存区域，用于存储已被虚拟机加载的类型信息、常量、静态变量、即使编译后的代码缓存等数据。</p>
<p>虚拟机规范中把方法区描述为堆的一个逻辑部分。</p>
<p>具体实现是：元空间（JDK8及以后）、永久代（JDK8之前）。</p>
<ul>
<li>在JDK1.7的时候：符号引用(Symbols)，字面量(interned strings)和静态变量(class statics)移至java堆</li>
<li>在JDK1.8的时候：剩余部分（主要是类型信息）移到元空间中</li>
</ul>
<blockquote>
<p>如果方法区无法满足新的内存分配需求时抛出OutOfMemoryError异常。</p>
</blockquote>
<h4 id="1-1-6-运行时常量池"><a href="#1-1-6-运行时常量池" class="headerlink" title="1.1.6 运行时常量池"></a>1.1.6 运行时常量池</h4><p><strong>是方法区的一部分</strong>。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表，用于存放编译期生成的各种字面量与符号引用，这部分内容在类加载后放到方法区的运行时常量池中。</p>
<blockquote>
<p>当常量池无法再申请到内存时抛出OutOfMemoryError异常。</p>
</blockquote>
<p><strong>注意：JDK1.8中字符串常量池和运行时常量池逻辑上属于方法区，但是实际存放在堆内存中</strong></p>
<h4 id="1-1-7-直接内存"><a href="#1-1-7-直接内存" class="headerlink" title="1.1.7 直接内存"></a>1.1.7 直接内存</h4><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域。</p>
<blockquote>
<p> 但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常。</p>
</blockquote>
<h3 id="1-2-HotSpot虚拟机对象探秘"><a href="#1-2-HotSpot虚拟机对象探秘" class="headerlink" title="1.2 HotSpot虚拟机对象探秘"></a>1.2 HotSpot虚拟机对象探秘</h3><h4 id="1-2-1-对象的创建"><a href="#1-2-1-对象的创建" class="headerlink" title="1.2.1 对象的创建"></a>1.2.1 对象的创建</h4><ol>
<li><p>类加载检查</p>
<p>当JAVA虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在<strong>常量池</strong>定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
</li>
<li><p>分配内存</p>
<p>通过类加载检查后，虚拟机将为新城对象分配内存。对象所需要的内存大小在类加载完成后就可以确定了，分配任务等同于把一块确定大小的内存块从<strong>Java堆</strong>中划分出来。</p>
<p>内存7分配方式：</p>
<ul>
<li><strong>指针碰撞</strong>：内存是规整的，即空闲的都在一起。</li>
<li><strong>空闲列表</strong>：不规整的，已使用内存和空闲内存交错。这时候要维护一个列表，记录哪些可用。</li>
</ul>
<p>内存分配并发：</p>
<ul>
<li>对内存分配动作，同步处理</li>
<li>按照线程划分在不同的空间中进程，即每个线程在Java堆中预先分配一小块内存（本地缓冲区），满了以后，分配新的缓存区时，才进行同步</li>
</ul>
</li>
<li><p>初始化内存空间</p>
<p>内存分配完成后，将分配到的空间进行初始化为零值。（即Java对象不需要赋初值就可以直接使用其默认值）</p>
</li>
<li><p>对对象进行必要的设置</p>
<p>如这个对象是哪个类的实例、如何才能找到元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的<strong>对象头</strong>中。</p>
</li>
<li><p>完成对象的产生</p>
<p>从虚拟机角度看，已经完成一个新的对象的产生。但是从Java程序看，对象创建才刚刚开始——构造函数，即Class文件中的init方法还没执行。当按照程序员的意愿对对象初始化后，一个<strong>真正的可用的对象</strong>才算完全被构造出来。</p>
</li>
</ol>
<h4 id="1-2-2-对象的内存布局"><a href="#1-2-2-对象的内存布局" class="headerlink" title="1.2.2 对象的内存布局"></a>1.2.2 对象的内存布局</h4><ul>
<li>对象头<ul>
<li>用于存储对象自身的运行时数据。如，哈希码、对象的GC分代年龄等，官方称为<code>Mark Word</code>（有32比特）<ul>
<li>25个比特用于存储对象哈希码</li>
<li>4个比特用于存储对象分代年龄（最大15，即1111）</li>
<li>2个比特用于存储锁标志位（P51，具体标志代表信息）</li>
<li>1个比特固定为0</li>
</ul>
</li>
<li>类型指针。即对象指向它的类型元数据的指针（JAVA虚拟机通过这个指针确定该对象是哪个类的实例，但是并非所有虚拟机都有）</li>
</ul>
</li>
<li>实例数据：对象真正存储的有效信息。即程序代码里定义的各种类型的字段内容。</li>
<li>对齐填充：占位符作用 。任何对象大小都必须是8字节的整数倍。</li>
</ul>
<h4 id="1-2-3-对象的访问定位"><a href="#1-2-3-对象的访问定位" class="headerlink" title="1.2.3 对象的访问定位"></a>1.2.3 对象的访问定位</h4><ul>
<li><p>句柄访问</p>
<p><a href="/postImages/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D1.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D1.png" class="lazyload"></a></p>
</li>
<li><p>直接指针访问</p>
<p><a href="/postImages/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D2.png" class="lazyload"></a></p>
</li>
</ul>
<h2 id="二、垃圾收集器与内存分配策略"><a href="#二、垃圾收集器与内存分配策略" class="headerlink" title="二、垃圾收集器与内存分配策略"></a>二、垃圾收集器与内存分配策略</h2><h3 id="2-1-对象是否死亡的判断"><a href="#2-1-对象是否死亡的判断" class="headerlink" title="2.1 对象是否死亡的判断"></a>2.1 对象是否死亡的判断</h3><h4 id="2-1-1-引用计数算法"><a href="#2-1-1-引用计数算法" class="headerlink" title="2.1.1 引用计数算法"></a>2.1.1 引用计数算法</h4><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值加一；当引用失效的时，计数器值减一；任何时刻计数器为零的对象就是不可能再被使用的。</p>
<p>客观来说，引用计数算法虽然占用一些额外的内存空间来进行计数，但是它原理简单，判定效率高。<strong>（但是很少主流虚拟机使用这个算法）</strong>。主要原因是可能发生问题！比如两个对象的某字段相互引用，除此之外这两个对象没有任何引用。实际上这两个对象已经不可能再被访问，但是因为它们相互引用对方，导致他们的引用计数都不为零，也就无法回收他们，如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Ref objA = <span class="keyword">new</span> Ref();</span><br><span class="line">    Ref objB = <span class="keyword">new</span> Ref();</span><br><span class="line">    </span><br><span class="line">    objA.instance = objB;</span><br><span class="line">    objB.instance = objA;</span><br><span class="line">    </span><br><span class="line">    objA = <span class="keyword">null</span>;</span><br><span class="line">    objB = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 假设这时候发生GC</span></span><br><span class="line">    System.gc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="2-1-2-可达性分析算法"><a href="#2-1-2-可达性分析算法" class="headerlink" title="2.1.2 可达性分析算法"></a>2.1.2 可达性分析算法</h4><p>当前主流都是使用该算法。该算法通过一系列称为 <code>GC Roots</code> 的根对象作为<strong>起始节点集</strong>，从这些节点开始，根据引用关系向下搜索。如果某个对象到GC Roots间没有任何引用链相连，即图论中的不可达，证明次对象不可能再被使用。</p>
<p><strong>Java技术体系中，固定可作为 GC Roots 的对象：P70</strong></p>
<h4 id="2-1-3-引用的分类"><a href="#2-1-3-引用的分类" class="headerlink" title="2.1.3 引用的分类"></a>2.1.3 引用的分类</h4><p>JDK1.2以后，对引用的概念进行了扩充：</p>
<ul>
<li><p><strong>强引用</strong></p>
<p>传统的引用，类似 <code>Object obj = new Object()</code> 。只要对象有强引用，垃圾收集器永远不会收集该对象。</p>
</li>
<li><p><strong>软引用</strong></p>
<p>描述一些还有用，但非必须的对象。只被软引用的对象，在系统将要发生<strong>内存溢出</strong>异常前，会把这些对象列进回收范围中进行二次回收，如果这次回收还是没有足够内存，才会抛出内存溢出异常。</p>
</li>
<li><p><strong>弱引用</strong></p>
<p>和软引用类似，但是更弱。关联的对象只能生存到下一次垃圾收集发生为止。不论内存是否足够都会回收。</p>
</li>
<li><p><strong>虚引用</strong></p>
<p>最弱的一种引用关系。一个对象是否有虚引用，完全不影响其生存，也无法通过虚引用获取对象实例。一个对象关联虚引用唯一目的只是为了能在这个对象被回收的时候收到一个系统通知。</p>
</li>
</ul>
<h4 id="2-1-4-生存-OR-死亡"><a href="#2-1-4-生存-OR-死亡" class="headerlink" title="2.1.4 生存 OR 死亡"></a>2.1.4 生存 OR 死亡</h4><p>在被可达性分析算法中判定为不可达对象时，暂时处于“缓刑”阶段。要真正宣告一个对象死亡，至少要经历两次标记过程：</p>
<ol>
<li><p>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，将被第一次标记。</p>
<p>随后进行一次筛选，筛选条件是此对象是否有必要执行 <code>finalize()</code> 方法（该方法是最后自救的机会。Object的方法，可以在该方法里面重新引用。<strong>不推荐</strong>使用 ！）。</p>
<p>如果该对象没有覆盖该方法，或者该方法已经被虚拟机调用过了（该方法只能被调用一次），那么虚拟机将这两种情况都视为“没有必要执行该方法”。</p>
<p>如果判断该方法需要执行，那么会将该对象放到一个F-Queue队列中，并在稍后由一条由虚拟机自动建立的、地调度优先级的Finalizer线程去执行他们的 finalize() 方法（这里的执行，只是触发。并不等它结束。万一这个方法是死循环，回收子系统不久奔溃了）。</p>
</li>
<li><p>在第二次标记时，它将被移出“即将回收”的集合。如果这时候对象还没有逃脱，基本上就是要被回收了。</p>
</li>
</ol>
<h4 id="2-1-5-回收方法区"><a href="#2-1-5-回收方法区" class="headerlink" title="2.1.5 回收方法区"></a>2.1.5 回收方法区</h4><p>方法区也是可以有垃圾收集行为的（虚拟机规范不要求在方法区中实现垃圾收集，因为性价比低）。</p>
<p>方法区的垃圾收集主要有两部分：废弃的常量和不再使用的类型（与Java堆中的对象类似）。</p>
<p>常量的“废弃”判定简单，而“不再使用的类型”判断条件苛刻：P74</p>
<h3 id="2-2-垃圾收集算法"><a href="#2-2-垃圾收集算法" class="headerlink" title="2.2 垃圾收集算法"></a>2.2 垃圾收集算法</h3><h4 id="2-2-1-分代收集理论"><a href="#2-2-1-分代收集理论" class="headerlink" title="2.2.1 分代收集理论"></a>2.2.1 分代收集理论</h4><p>收集器应该将Java堆划分出不同的区域，然后将回收的对象依据年龄分配到不同的区域之中存储（因此有了<strong>新生代</strong>、<strong>老年代</strong>等区分）。</p>
<p>新生代随着年龄的增长晋升到老年代中。</p>
<h4 id="2-2-2-标记-清除算法"><a href="#2-2-2-标记-清除算法" class="headerlink" title="2.2.2 标记 - 清除算法"></a>2.2.2 标记 - 清除算法</h4><p>首先<strong>标记</strong>出所有需要回收的对象，在标记完成后，统一<strong>回收</strong>掉所有被标记的对象（也可以返回来）。标记过程就是对象是否属于垃圾的判定过程（参考2.1）。</p>
<p><strong>缺点</strong></p>
<ol>
<li>执行效率不稳定。如果Java堆中包含大量对象，而且大部分要被回收，这时候需要进行大量标记和清除动作。效率随着对象数量增长而减低。</li>
<li>内存空间碎片化问题。标记、清除后会产生大量不连续的内存碎片，空间碎片大多可能导致后续分配大对象时，没有足够的连续空间而不得不触发另一次垃圾收集动作。</li>
</ol>
<p><a href="/postImages/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.png" class="lazyload"></a></p>
<h4 id="2-2-3-标记-复制算法"><a href="#2-2-3-标记-复制算法" class="headerlink" title="2.2.3 标记 - 复制算法"></a>2.2.3 标记 - 复制算法</h4><p>将可用内存按容量划分为大小相等的两块，每次只是用其中一块。当这块内存用完了，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。</p>
<p>如果多数对象是存活的，这种算法将会产生大量的内存间复制的开销。</p>
<p>但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象，而且每次都是整对整个半区进行内存回收，分配内存时也就不用考虑碎片化问题。这样实现简单，运行高效（现在商用Java虚拟机大多数都优先采用了这种收集算法去<strong>回收新生代</strong>。）。</p>
<p>缺点是将可用内存缩小为了原来的一半，空间浪费太多了。</p>
<p><a href="/postImages/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" class="lazyload"></a></p>
<h5 id="Appel-式回收"><a href="#Appel-式回收" class="headerlink" title="Appel 式回收"></a><strong>Appel 式回收</strong></h5><p>把新生代分为一块较大的<strong>Eden</strong>空间和2块较小的<strong>Survivor</strong>空间（默认比例为8:1）。每次分配内存只使用Eden和其中一块Survivor空间。发生垃圾搜集时，将Eden和Survivor中任然存活的对象一次性复制到另外一块Survivor中（即90%可用，10%浪费）。当另一块Survivor没有足够的空间存放上一次新生代收集下来的存活对象时，这些对象便将通过分配担保机制直接进入老年代。</p>
<h4 id="2-2-4-标记-整理算法"><a href="#2-2-4-标记-整理算法" class="headerlink" title="2.2.4 标记 - 整理算法"></a>2.2.4 标记 - 整理算法</h4><p>过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象清除，而是让所有存活对象都想内存空间一端移动，然后直接清理掉边界的内存。</p>
<p><a href="/postImages/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.png" class="lazyload"></a></p>
<p>该算法针对<strong>老年代</strong>对象的存亡特征，进行回收。</p>
<h5 id="和稀泥式-解决方案"><a href="#和稀泥式-解决方案" class="headerlink" title="和稀泥式 解决方案"></a><strong>和稀泥式 解决方案</strong></h5><p>由于“标记清除”和“标记整理”都有一定的不足。这里可以对两种方法相结合：</p>
<p>让虚拟机平时多数时间都采用”标记清除“算法，暂时容忍内存碎片的存在，知道内存空间碎片化程度已经大到影响对象分配时，再采用”标记整理“算法收集一次，以获得规整的内存空间。（CMS收集器采用该方法）</p>
<h3 id="2-3-HotSpot的算法实现细节（暂无）"><a href="#2-3-HotSpot的算法实现细节（暂无）" class="headerlink" title="2.3  HotSpot的算法实现细节（暂无）"></a>2.3  HotSpot的算法实现细节（暂无）</h3>]]></content>
      <categories>
        <category>服务器</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java虚拟机第3版（虚拟机执行子系统）</title>
    <url>/2020/05/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC3%E7%89%88%EF%BC%88%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
    <content><![CDATA[<h1 id="深入理解Java虚拟机第3版（虚拟机执行子系统）"><a href="#深入理解Java虚拟机第3版（虚拟机执行子系统）" class="headerlink" title="深入理解Java虚拟机第3版（虚拟机执行子系统）"></a>深入理解Java虚拟机第3版（虚拟机执行子系统）</h1><h2 id="一、类文件结构（暂无）"><a href="#一、类文件结构（暂无）" class="headerlink" title="一、类文件结构（暂无）"></a>一、类文件结构（暂无）</h2><h2 id="二、虚拟机类加载机制"><a href="#二、虚拟机类加载机制" class="headerlink" title="二、虚拟机类加载机制"></a>二、虚拟机类加载机制</h2><h3 id="2-1-类加载的时机（什么时候加载类）"><a href="#2-1-类加载的时机（什么时候加载类）" class="headerlink" title="2.1 类加载的时机（什么时候加载类）"></a>2.1 类加载的时机（什么时候加载类）</h3><p><a href="/postImages/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" class="lazyload"></a></p>
<p>这些阶段通常都是相互交叉地混合进行，会在一个阶段执行的过程种调用、激活另一个阶段。</p>
<p>《Java虚拟机规范》约定了<strong>有且只有</strong>六种情况必须对类进行<strong>初始化</strong>（而加载、验证、准备自然需要在此之前开始）：</p>
<ol>
<li>遇到 <code>new</code> 、<code>getstatic</code> 、<code>putstatic</code>  、<code>invokestatic</code> 这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。<ul>
<li>使用 new 关键字时候</li>
<li>读取或设置一个类型的静态字段（被 final 修饰、已在编译器把结果放入常量池的静态字段除外）的时候</li>
<li>调用一个类型的静态方法的时候</li>
</ul>
</li>
<li>使用 <code>java.lang.reflect</code> 包的方法对类型进行反射调用的时候。</li>
<li>当初始化类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类）。虚拟机会先初始化这个主类。</li>
<li>当使用 JDK7 新加入的动态语言支持时。</li>
<li>当一个接口种定义了 JDK8 新加入的默认方法（被 default 关键字修斯的接口方法）时，如果这个接口的实现类发生了初始化，那么该接口要在其之前被初始化。</li>
</ol>
<h3 id="2-2-类加载的过程"><a href="#2-2-类加载的过程" class="headerlink" title="2.2 类加载的过程"></a>2.2 类加载的过程</h3><h4 id="2-2-1-加载"><a href="#2-2-1-加载" class="headerlink" title="2.2.1 加载"></a>2.2.1 加载</h4><p>在加载阶段，Java虚拟机需要完成三件事：</p>
<ol>
<li><p>通过一个类的全限定名来获取定义此类的二进制字节流</p>
<blockquote>
<p>可以在本地磁盘的 .class 文件获取，也可以从ZIP压缩包中读取，也可以从网络等地方获取，没有规定。</p>
</blockquote>
</li>
<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
<blockquote>
<p>在加载阶段结束后，Java虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区中，方法区中的数据存储格式完全由虚拟机自行实现。（即，把二进制字节流以指定格式保存在方法区中）</p>
</blockquote>
</li>
<li><p>在内存种生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</p>
<blockquote>
<p>类型数据妥善安置在方法区后，会在Java堆内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的类型数据的外部接口。</p>
</blockquote>
</li>
</ol>
<h4 id="2-2-2-验证"><a href="#2-2-2-验证" class="headerlink" title="2.2.2 验证"></a>2.2.2 验证</h4><p>确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全（<strong>Class文件不一定由Java源码编译来的，也可能是01编辑器上敲出来的！</strong>）。</p>
<p><strong>检验动作4个阶段</strong></p>
<ol>
<li><p>文件格式验证</p>
<blockquote>
<p>检验字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。这个阶段的验证是基于二进制字节流进行的，只有通过这个阶段的验证后，这段字节流才被允许进入Java虚拟机内存的方法区中进行存储，所以后面三个检验阶段全部是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了。</p>
</blockquote>
</li>
<li><p>元数据验证</p>
<blockquote>
<p>对字节码描述进行语义分析，保证其符合《Java语言规范》。比如：这个内是否能被继承。【数据类型校验】</p>
</blockquote>
</li>
<li><p>字节码验证</p>
<blockquote>
<p>最复杂的一个阶段！主要目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。这阶段就要对类的方法体进行检验分析，确保不会出现什么跳转错误等行为，int用long来载入等。</p>
</blockquote>
</li>
<li><p>符号引用验证</p>
<blockquote>
<p>检测该类是否缺少或者被进制访问它依赖的某些外部类、方法、字段等资源。</p>
</blockquote>
</li>
</ol>
<h4 id="2-2-3-准备"><a href="#2-2-3-准备" class="headerlink" title="2.2.3 准备"></a>2.2.3 准备</h4><p>该阶段是正式为类中定义的变量（即<strong>静态变量</strong>，被static修饰的变量）分配内存并设置类变量初始值的阶段（这里的初始值一般是指<strong>零值</strong>）。</p>
<blockquote>
<p>一般情况下初始值是零值。如果，有 final 关键字的话，javac将会给变量生成ConstantValue属性，这时候就会设置value的值为123。</p>
<p>public static <strong>final</strong> int value = 123;</p>
</blockquote>
<p>这些变量所使用的内存都应当再方法区中进行分配，但是方法区毕竟只是个逻辑上的区域。JDK7及之前由永久代实现方法区，符合这种逻辑。但JDK8及之后，类变量会随着Class对象一起存放在Java堆中。</p>
<p>注意这里内存分配的仅包括类变量，而不包括实例变量。</p>
<h4 id="2-2-4-解析"><a href="#2-2-4-解析" class="headerlink" title="2.2.4 解析"></a>2.2.4 解析</h4><p>Java虚拟机将常量池内的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程。</p>
<h4 id="2-2-5-初始化"><a href="#2-2-5-初始化" class="headerlink" title="2.2.5 初始化"></a>2.2.5 初始化</h4><p>直到初始化阶段，Java虚拟机才真正开始执行类中编写的Java程序代码，将主导权交给应用程序。在准备阶段，变量已经赋值过一次零值，而在初始化阶段，则会根据代码主观计划区初始化类变量和其他资源。</p>
<h3 id="2-3-类加载器"><a href="#2-3-类加载器" class="headerlink" title="2.3 类加载器"></a>2.3 类加载器</h3><p>”通过一个类的全限定名来获取描述该类的二进制字节流“这个动作放到Java虚拟机外部区实现，以便让应用程序自己决定如何区获取所需的类。这个动作的代码被称为”类加载器“。</p>
<h4 id="2-3-1-类与类加载器"><a href="#2-3-1-类与类加载器" class="headerlink" title="2.3.1 类与类加载器"></a>2.3.1 类与类加载器</h4><p>对于任意一个类，都必须由加载它的<strong>类加载器</strong>和这个<strong>类本身</strong>一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。（即，判断两个类是否”相等“，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使两个Class类来源于同一个Class文件，被同一个Java虚拟机加载，只有加载他们的加载器不一样，这两个类就不相等）</p>
<h4 id="2-3-2-双亲委派模型"><a href="#2-3-2-双亲委派模型" class="headerlink" title="2.3.2 双亲委派模型"></a>2.3.2 双亲委派模型</h4><p>在Java虚拟机角度看，只有两种类加载器：</p>
<ol>
<li>启动类加载器（是虚拟机的一部分）</li>
<li>其他所有的类加载器（由Java语言实现，独立存在于虚拟机外，且都继承自抽象类java.lang.ClassLoader）</li>
</ol>
<p>在Java开发人员角度看，就划分的细致了：</p>
<ol>
<li><p>启动类加载器（负责加载<java_home>\lib 或被 -XbootclassPath 参数指定的路径）</java_home></p>
<blockquote>
<p>需要把加载请求委派给引导类加载器处理，直接用null代替即可</p>
</blockquote>
</li>
<li><p>扩展类加载器（负责加载<java_home>\lib\ext 或者被 java.ext.dirs系统变量指定的路径）</java_home></p>
</li>
<li><p>应用程序类加载器（负责加载用户类路径（ClassPath）上所有的类库，如果应用程序种没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器）</p>
</li>
</ol>
<p>JDK9之前的Java应用都是由这三种类加载器互相配合完成加载的，用户还可以自定义类加载来进行扩展。这些类加载器之间的协作关系<strong>”通常“</strong>会下所示：</p>
<p><a href="/postImages/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" class="lazyload"></a></p>
<p>双亲委派模型工作过程：</p>
<p>如果一个类加载器收到了类的加载的请求，它首先不会自己区尝试加载这个类，而是把这个请求委派给父类去加载器去完成，每一个层次的类加载器都是如此，因此所有的类加载器最终都应该传送到最顶层的启动类加载器中，只有父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需要的类）时，子加载器才会尝试自己去完成加载。（因此Object类在程序各种加载器环境中都能够保证是同一个类）</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark学习笔记</title>
    <url>/2020/04/28/Spark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spark学习笔记"><a href="#Spark学习笔记" class="headerlink" title="Spark学习笔记"></a>Spark学习笔记</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Lightning-fast cluster computing。</p>
<p>快如闪电的集群计算。</p>
<p>大规模快速通用的计算引擎。</p>
<p>速度：比hadoop 100x,磁盘计算快10x</p>
<p>使用：java / Scala /R /python</p>
<p>​            提供80+算子(操作符)，容易构建并行应用。</p>
<p>通用：组合SQL ，流计算 + 复杂分析。</p>
<p>运行：Hadoop, Mesos, standalone, or in the cloud,local.</p>
<p><strong>模块</strong></p>
<ul>
<li>Spark core：核心模块。通用执行引擎，提供内存计算和对外部数据集的引用。</li>
<li>Spark SQL：构建在core之上，引入新的抽象SchemaRDD，提供了结构化和半结构化支持。</li>
<li>Spark Streaming：流计算。小批量计算，RDD.</li>
<li>Spark MLlib：机器学习库。</li>
<li>Spark graph：图计算</li>
</ul>
<h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><p><strong>本地开发环境版本，一定要和spark运行环境一致！！！！！</strong></p>
<h3 id="2-1-Local-模式"><a href="#2-1-Local-模式" class="headerlink" title="2.1 Local 模式"></a>2.1 Local 模式</h3><p>local 模式 ：通过多线程模拟分布式计算。</p>
<p><strong>部署流程</strong></p>
<ol>
<li><p>下载 <strong>spark-2.4.3-bin-hadoop2.7.tgz</strong></p>
</li>
<li><p>解压</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$tar -zxvf spark-2.4.3-bin-hadoop2.7.tgz -C &#x2F;soft&#x2F;</span><br><span class="line">$ln -s spark-2.4.3-bin-hadoop2.7 spark</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置环境变量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># spark</span><br><span class="line">export SPARK_HOME&#x3D;&#x2F;soft&#x2F;spark</span><br><span class="line">export PATH&#x3D;$PATH:$SPARK_HOME&#x2F;bin:$SPARK_HOME&#x2F;sbin</span><br><span class="line"></span><br><span class="line">$source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>验证spark</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark&#x2F;bin]$.&#x2F;spark-shell</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>WebUI</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;s201:4040&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在IDEA中编写代码运行</p>
<blockquote>
<p><strong>注意：Spark2.4.3 对应 scala的SDK版本是2.11.12，以及pom依赖是spark-core_2.11。其他版本查看/soft/spark/jars/scala-compiler-X.jar和spark-core_X.jar。</strong></p>
</blockquote>
<ol>
<li><p>添加MAVEN工程，添加SCALA支持，添加pom依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写代码并运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.scala</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建spark配置对象.【本地模式】</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="comment">// 加载文本文件</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.textFile(<span class="string">"D:\\tmp\\1.txt"</span>)</span><br><span class="line">    <span class="comment">// 分割并炸开</span></span><br><span class="line">    rdd.flatMap(line =&gt; line.split(<span class="string">" "</span>))</span><br><span class="line">      <span class="comment">// 映射二元组</span></span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      <span class="comment">// 根据Key分组聚合</span></span><br><span class="line">      .reduceByKey(_ + _)</span><br><span class="line">      <span class="comment">// 返回数组结果</span></span><br><span class="line">      .collect()</span><br><span class="line">      <span class="comment">// 打印结果</span></span><br><span class="line">      .foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
</li>
</ol>
<h3 id="2-2-Standalone-模式"><a href="#2-2-Standalone-模式" class="headerlink" title="2.2 Standalone 模式"></a>2.2 Standalone 模式</h3><p>Standalone即Spark独立集群，由maste（分任务发到worker,相当于Yarn的RM）和worker（计算，返回结果。相当于Yarn的NM）组成。是Spark自带的资源调度（相当于Yarn）。因此可以脱离yarn独立存在，也可以理解为standalone替代了yarn的工作（后面会讲到spark on yarn）【也可以说是，MR作业交给yarn的RM，这里Spark作业交给Standalone的master】</p>
<p><strong>部署流程</strong></p>
<ol>
<li><p>规划S201为MASTE节点，S202~S204为slave节点，在S201上以本地模式安装好spark。</p>
</li>
<li><p>配置master节点的slaves配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark&#x2F;conf]$cp slaves.template slaves</span><br><span class="line">$vi slaves</span><br><span class="line"></span><br><span class="line"># 清空所有内容添加以下内容</span><br><span class="line">s202</span><br><span class="line">s203</span><br><span class="line">s204</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可能要去<strong>spark-env.sh</strong>配置一下JAVA_HOME</p>
</li>
<li><p>分发到s202~s204，设置好连接以及，环境变量。</p>
</li>
<li><p>启动集群</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark&#x2F;sbin]$.&#x2F;start-all.sh</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：</strong></p>
<ol>
<li><p>要加上<strong>./</strong>，不然会与HDFS的start-all脚本冲突！</p>
</li>
<li><p>可能会遇到启动失败问题</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s204:   JAVA_HOME is not set</span><br><span class="line">s204: full log in &#x2F;soft&#x2F;spark&#x2F;logs&#x2F;spark-wbw-org.apache.spark.deploy.worker.Worker-1-s204.out</span><br></pre></td></tr></table></figure></div>

<p>原因是：spark不能读取/etc/profile导致，在<strong>sbin/spark-env.sh</strong>里面配置JAVA_HOME：<strong>export JAVA_HOME=/soft/jdk</strong></p>
</li>
</ol>
</li>
<li><p>查看进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark&#x2F;sbin]$xcall.sh jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s201 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1737 QuorumPeerMain</span><br><span class="line">2938 Jps</span><br><span class="line">2811 Master</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s202 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1824 Worker</span><br><span class="line">1897 Jps</span><br><span class="line">1309 QuorumPeerMain</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s203 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1866 Worker</span><br><span class="line">1915 Jps</span><br><span class="line">1359 QuorumPeerMain</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s204 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1810 Worker</span><br><span class="line">1859 Jps</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; s205 : jps &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">1526 Jps</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看WEBUI</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;s201:8080&#x2F;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="2-4-集成Hadoop-HA"><a href="#2-4-集成Hadoop-HA" class="headerlink" title="2.4 集成Hadoop HA"></a>2.4 集成Hadoop HA</h3><p>使spark集群可以访问HDFS。</p>
<p><strong>集成流程</strong></p>
<ol>
<li><p>复制<strong>core-site.xml *<em>和 *</em>hdfs-site.xml</strong>到spark/conf目录下</p>
</li>
<li><p>分发到所有集群节点</p>
</li>
<li><p>启动spark集群</p>
</li>
<li><p>启动spark-shell,连接spark集群上</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;spark-shell --master spark:&#x2F;&#x2F;s201:7077</span><br><span class="line">$scala&gt;sc.textFile(&quot;hdfs:&#x2F;&#x2F;mycluster&#x2F;user&#x2F;centos&#x2F;test.txt&quot;).collect();</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h3 id="2-5-Spark-master-HA"><a href="#2-5-Spark-master-HA" class="headerlink" title="2.5 Spark master HA"></a>2.5 Spark master HA</h3><p>master的高可用配置，和Hadoop一样如果只有一个NameNode会造成单点故障的问题。</p>
<p>只针对standalone和mesos集群部署情况。</p>
<p>使用zk连接多个master并存储state。</p>
<p><strong>配置流程</strong></p>
<ol>
<li><p>配置<strong>spark/conf/spark-env.sh</strong>，在末尾添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=s201:2181,s202:2181,s203:2181 -Dspark.deploy.zookeeper.dir=/spark"</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>分发配置，重启spark集群</p>
</li>
<li><p>在s204上单独开启master</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s204 &#x2F;soft&#x2F;spark&#x2F;sbin]$.&#x2F;start-master.sh</span><br></pre></td></tr></table></figure></div>

<p>查看8080端口WEB，可以看到<strong>s201</strong>处于<strong>ALIVE</strong>，而<strong>s204</strong>处于<strong>STANDBY</strong></p>
<p><a href="/postImages/sparkHA.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/sparkHA.png" class="lazyload"></a></p>
<p><a href="/postImages/sparkHA2.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/sparkHA2.png" class="lazyload"></a></p>
</li>
<li><p>杀掉s201上的master进程</p>
</li>
<li><p>再次通过WEB查看状态（可能要1~2分钟才切过去）</p>
<p><a href="/postImages/sparkHA3.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/sparkHA3.png" class="lazyload"></a></p>
</li>
</ol>
<h3 id="2-6-Yarn-模式"><a href="#2-6-Yarn-模式" class="headerlink" title="2.6 Yarn 模式"></a>2.6 Yarn 模式</h3><p>在yarn作为资源管理器的情况下，一个spark应用只是一个yarn下的应用而已，类似于mr一样，所以不需要启动master和worker。应用提交到yarn后，首先会申请一个container运行applicationmaster，而这个appmaster里运行的就是spark的driver，对应的executor也在container里运行。提交应用需要带上spark-assembly的jar包，包可以位于hdfs上，即使位于本地，也会被上传到hdfs进行分发。</p>
<p><strong>部署流程</strong></p>
<ol>
<li><p>将spark的jars文件放到hdfs上</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark]$hdfs dfs -mkdir -p &#x2F;spark&#x2F;jars</span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark]$hdfs dfs -put jars&#x2F;* &#x2F;spark&#x2F;jars</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置spark配置文件</p>
<ul>
<li><p>/conf/spark-default.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp spark-defaults.conf.template spark-defaults.conf</span><br><span class="line">$vi spark-defaults.conf</span><br></pre></td></tr></table></figure></div>

<p>直接在文件末尾添加如下内容（spark的jars在HDFS上的位置）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.yarn.jars&#x3D;hdfs:&#x2F;&#x2F;mycluster&#x2F;spark&#x2F;jars&#x2F;*</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>/conf/spark-env.sh</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp spark-env.sh.template spark-env.sh</span><br><span class="line">$vi spark-env.sh</span><br></pre></td></tr></table></figure></div>

<p>直接在文件末尾添加如下内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;soft&#x2F;jdk</span><br><span class="line">export HADOOP_CONF_DIR&#x3D;&#x2F;soft&#x2F;hadoop&#x2F;etc&#x2F;hadoop</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>分发<strong>spark-default.conf *<em>和 *</em>spark-env.sh</strong> 到所有节点上。重启spark集群。</p>
</li>
<li><p>提交作业（master改为yarn，即作业交给yarn来管理）</p>
<ul>
<li><p>cluster 模式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --class cn.wangbowen.spark.scala.SubmitDeployMode --master yarn --deploy-mode cluster hdfs:&#x2F;&#x2F;mycluster&#x2F;demoJars&#x2F;Spark-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>client 模式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --class cn.wangbowen.spark.scala.SubmitDeployMode --master yarn --deploy-mode client Spark-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
</li>
</ol>
<p>   <strong>注意：如果是用虚拟机搭建，可能会由于虚拟机内存过小而导致启动失败，比如内存资源过小，yarn会直接kill掉进程导致rpc连接失败。所以，我们还需要配置Hadoop的yarn-site.xml文件，加入如下两项配置：</strong></p>
   <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="2-7-mesos-模式"><a href="#2-7-mesos-模式" class="headerlink" title="2.7 mesos 模式"></a>2.7 mesos 模式</h3><p>Spark客户端直接连接Mesos；不需要额外构建Spark集群。国内应用比较少，更多的是运用yarn调度。</p>
<h3 id="2-8-启动脚本分析"><a href="#2-8-启动脚本分析" class="headerlink" title="2.8 启动脚本分析"></a>2.8 启动脚本分析</h3><p><strong>start-all.sh</strong>：启动所有脚本</p>
<ul>
<li>sbin/spark-config.sh：读取配置文件</li>
<li>sbin/start-master.sh：启动master进程<ul>
<li>sbin/spark-config.sh<ul>
<li>export JAVA_HOME 配置一些环境</li>
</ul>
</li>
<li>bin/load-spark-env.sh<ul>
<li>if [ -f “${SPARK_CONF_DIR}/spark-env.sh” ];</li>
</ul>
</li>
<li>sbin/spark-daemon.sh </li>
</ul>
</li>
<li>sbin/start-slaves.sh：启动worker进程<ul>
<li>sbin/spark-config.sh</li>
<li>bin/load-spark-env.sh</li>
<li>sbin/slaves.sh</li>
<li>sbin/start-slave.sh<ul>
<li>sbin/spark-config.sh</li>
<li>bin/load-spark-env.sh</li>
<li>sbin/spark-daemon.sh</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三、快速入门"><a href="#三、快速入门" class="headerlink" title="三、快速入门"></a>三、快速入门</h2><h3 id="3-1-主要对象"><a href="#3-1-主要对象" class="headerlink" title="3.1 主要对象"></a>3.1 主要对象</h3><ul>
<li>SparkContext：Spark程序的入口点，封装了整个spark运行环境的信息。</li>
<li>RDD：resilient distributed dataset,弹性分布式数据集。等价于集合。</li>
</ul>
<h3 id="3-2-编程单词计数程序-Standalone模式"><a href="#3-2-编程单词计数程序-Standalone模式" class="headerlink" title="3.2 编程单词计数程序(Standalone模式)"></a>3.2 编程单词计数程序(Standalone模式)</h3><h4 id="3-2-1-Scala"><a href="#3-2-1-Scala" class="headerlink" title="3.2.1 Scala"></a>3.2.1 Scala</h4><ol>
<li><p>添加scala编译插件（不然打出的jar包没有sacla的类）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">recompileMode</span>&gt;</span>incremental<span class="tag">&lt;/<span class="name">recompileMode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写Scala文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.scala</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建spark配置对象</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line">    <span class="comment">// 本地模式</span></span><br><span class="line">    <span class="comment">//conf.setMaster("local")</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="comment">// 加载文本文件</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.textFile(args(<span class="number">0</span>))</span><br><span class="line">    <span class="comment">// 分割并炸开</span></span><br><span class="line">    rdd.flatMap(line =&gt; line.split(<span class="string">" "</span>))</span><br><span class="line">      <span class="comment">// 映射二元组</span></span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      <span class="comment">// 根据Key分组聚合</span></span><br><span class="line">      .reduceByKey(_ + _)</span><br><span class="line">      <span class="comment">// 返回数组结果</span></span><br><span class="line">      .collect()</span><br><span class="line">      <span class="comment">// 打印结果</span></span><br><span class="line">      .foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>MAVEN打包，上传</p>
</li>
<li><p>创建一个文本文件，并上传到HDFS</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$vi wordcount.txt</span><br><span class="line">hello world</span><br><span class="line">hello scala</span><br><span class="line">hello spark</span><br><span class="line">hello spark</span><br><span class="line"></span><br><span class="line">$start-dfs.sh</span><br><span class="line">$hdfs dfs -put wordcount.txt &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行作业（注意哪个namenode是激活态用哪个，这里是s201）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --master spark:&#x2F;&#x2F;s201:7077 --class cn.wangbowen.spark.scala.WordCount Spark-1.0-SNAPSHOT.jar hdfs:&#x2F;&#x2F;s201:8020&#x2F;tmp&#x2F;wordcount.txt</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="3-2-2-Java"><a href="#3-2-2-Java" class="headerlink" title="3.2.2 Java"></a>3.2.2 Java</h4><ol>
<li><p>编写代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaPairRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WordCount class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建SparkConf对象</span></span><br><span class="line">        SparkConf conf = <span class="keyword">new</span> SparkConf();</span><br><span class="line">        conf.setAppName(<span class="string">"WordCount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建JAVA SC</span></span><br><span class="line">        JavaSparkContext sc = <span class="keyword">new</span> JavaSparkContext(conf);</span><br><span class="line">        <span class="comment">// 加载文本</span></span><br><span class="line">        JavaRDD&lt;String&gt; rdd = sc.textFile(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 压扁。这里的泛型，第一个都是输入类型，后面跟输出类型</span></span><br><span class="line">        JavaRDD&lt;String&gt; rdd1 = rdd.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] words = s.split(<span class="string">" "</span>);</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(words));</span><br><span class="line">                <span class="keyword">return</span> list.iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 映射</span></span><br><span class="line">        JavaPairRDD&lt;String, Integer&gt; rdd2 = rdd1.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// reduce</span></span><br><span class="line">        JavaPairRDD&lt;String, Integer&gt; rdd3 = rdd2.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer + integer2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;Tuple2&lt;String, Integer&gt;&gt; collect = rdd3.collect();</span><br><span class="line">        <span class="keyword">for</span> (Tuple2&lt;String, Integer&gt; tuple2 : collect) &#123;</span><br><span class="line">            System.out.println(tuple2._1 + <span class="string">": "</span> + tuple2._2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>MAVEN打包，上传</p>
</li>
<li><p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --master spark:&#x2F;&#x2F;s201:7077 --class cn.wangbowen.spark.java.WordCount Spark-1.0-SNAPSHOT.jar hdfs:&#x2F;&#x2F;s201:8020&#x2F;tmp&#x2F;wordcount.txt</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h2 id="四、RDD-弹性分布式数据集"><a href="#四、RDD-弹性分布式数据集" class="headerlink" title="四、RDD 弹性分布式数据集"></a>四、RDD 弹性分布式数据集</h2><p>是spark的基本数据结构，是不可变数据集。RDD中的数据集进行逻辑分区，每个分区可以单独在集群节点进行计算。可以包含任何java,scala，python和自定义类型。</p>
<ul>
<li><p>RDD是只读的记录分区集合。</p>
</li>
<li><p>RDD具有容错机制。</p>
</li>
<li><p>创建RDD方式：</p>
<ol>
<li>并行化一个现有集合。</li>
<li>外部存储。</li>
</ol>
</li>
<li><p>内存处理计算。在job间进行数据共享。内存的IO速率高于网络和disk的10 ~ 100之间（hadoop 花费90%时间用户rw）。</p>
</li>
<li><p>内部包含5个主要属性：</p>
<ol>
<li>分区列表</li>
<li>针对每个split的计算函数。</li>
<li>对其他rdd的依赖列表</li>
<li>可选，如果是KeyValueRDD的话，可以带分区类。</li>
<li>可选，首选块位置列表(hdfs block location);</li>
</ol>
</li>
</ul>
<h3 id="4-1-并发度"><a href="#4-1-并发度" class="headerlink" title="4.1 并发度"></a>4.1 并发度</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.</span><br><span class="line">local.backend.defaultParallelism() &#x3D; scheduler.conf.getInt(&quot;spark.default.parallelism&quot;, totalCores)</span><br><span class="line">&#x2F;&#x2F; 4.</span><br><span class="line">taskScheduler.defaultParallelism &#x3D; backend.defaultParallelism()</span><br><span class="line">&#x2F;&#x2F; 3.</span><br><span class="line">sc.defaultParallelism &#x3D;...; taskScheduler.defaultParallelism</span><br><span class="line">&#x2F;&#x2F; 2.取最小值</span><br><span class="line">defaultMinPartitions &#x3D; math.min(defaultParallelism, 2)</span><br><span class="line">&#x2F;&#x2F; 1.输入文本文件，第二个参数是并发度</span><br><span class="line">sc.textFile(path,defaultMinPartitions)			&#x2F;&#x2F;1,2</span><br></pre></td></tr></table></figure></div>



<h3 id="4-2-RDD-变换"><a href="#4-2-RDD-变换" class="headerlink" title="4.2 RDD 变换"></a>4.2 RDD 变换</h3><p>返回指向新rdd的指针，在rdd之间创建依赖关系。每个rdd都有计算函数和指向父RDD的指针。</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>map</td>
<td>(T) =&gt; V</td>
<td>对每个元素进行变换，应用变换函数。即映射，将数据集中的每个元素进行变化出新的元素。</td>
</tr>
<tr>
<td>filter</td>
<td>(T) =&gt; Boolean</td>
<td>过滤器。过滤掉返回false的数据。</td>
</tr>
<tr>
<td>flatMap</td>
<td>(T) =&gt; TraversableOnce[U]</td>
<td>压扁。对于返回的一组数据，分别拆分成单个数据。</td>
</tr>
<tr>
<td>mapPartitions</td>
<td>Iterator[T] =&gt; Iterator[U]</td>
<td>对每个分区进行应用变换，输入的Iterator,返回新的迭代器，可以对分区进行函数处理。迭代器内容是该分区里的数据集。</td>
</tr>
<tr>
<td>mapPartitionsWithIndex</td>
<td>(Int, Iterator[T]) =&gt; Iterator[U]</td>
<td>同上，可以指定分区。</td>
</tr>
<tr>
<td>sample</td>
<td>withReplacement: Boolean,fraction: Double,seed: Long = {}</td>
<td>采样。返回采样的RDD子集。</td>
</tr>
<tr>
<td>union</td>
<td>RDD[T]</td>
<td>类似于mysql union操作【select * from persons where id &lt; 10 union select * from id persons where id &gt; 29 ;】</td>
</tr>
<tr>
<td>intersection</td>
<td>RDD[T]</td>
<td>交集。提取两个rdd中都含有的元素。</td>
</tr>
<tr>
<td>distinct</td>
<td>可选[numTasks]</td>
<td>去重。去除重复的元素。</td>
</tr>
<tr>
<td>groupByKey</td>
<td>(K,V) =&gt; (K,Iterable[V])</td>
<td>根据Key分组，相同Key的值被放入一个迭代器。</td>
</tr>
<tr>
<td>reduceByKey</td>
<td>(V, V) =&gt; V</td>
<td>按key聚合。</td>
</tr>
<tr>
<td>sortByKey</td>
<td></td>
<td>排序</td>
</tr>
<tr>
<td>join</td>
<td>RDD[T], [numTasks]</td>
<td>连接。(K,V).join(K,W) =&gt;(K,(V,W))。只会对两个RDD相同Key的数据进行合并成一个元组，一个RDD有，而另一个没有的，不会进行连接。</td>
</tr>
<tr>
<td>cogroup</td>
<td>RDD[T]</td>
<td>协分组。对标JOIN，将相同KEY分到一组。(K,V).cogroup(K,W) =&gt;(K, (Iterable[V], Iterable[W]))</td>
</tr>
<tr>
<td>cartesian</td>
<td>RDD[T]</td>
<td>笛卡尔积。RDD[T] RDD[U] =&gt; RDD[(T,U)]</td>
</tr>
<tr>
<td>pipe</td>
<td>cmd:String</td>
<td>将rdd的元素传递给脚本或者命令，执行结果返回形成新的RDD</td>
</tr>
<tr>
<td>coalesce</td>
<td>numPartitions:Int</td>
<td>减少分区</td>
</tr>
<tr>
<td>repartition</td>
<td></td>
<td>可增可减</td>
</tr>
</tbody></table>
<h3 id="4-3-RDD-动作"><a href="#4-3-RDD-动作" class="headerlink" title="4.3 RDD 动作"></a>4.3 RDD 动作</h3><p>一个RDD数据集经过RDD变换不会立即执行，只有遇到RDD动作的时候才会开始执行。</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>collect</td>
<td></td>
<td>收集rdd元素形成数组。</td>
</tr>
<tr>
<td>count</td>
<td></td>
<td>统计rdd元素的个数</td>
</tr>
<tr>
<td>reduce</td>
<td></td>
<td>聚合,返回一个值。</td>
</tr>
<tr>
<td>first</td>
<td></td>
<td>取出第一个元素take(1)</td>
</tr>
<tr>
<td>take</td>
<td>n:String</td>
<td>取出前 N个元素</td>
</tr>
<tr>
<td>saveAsTextFile</td>
<td>path:String</td>
<td>保存到文件</td>
</tr>
<tr>
<td>saveAsSequenceFile</td>
<td>path:String</td>
<td>保存成序列文件</td>
</tr>
<tr>
<td>saveAsObjectFile</td>
<td>path:String</td>
<td>Java and Scala</td>
</tr>
<tr>
<td>countByKey</td>
<td></td>
<td>按照key,统计每个key下value的个数</td>
</tr>
</tbody></table>
<h2 id="五、Spark核心API"><a href="#五、Spark核心API" class="headerlink" title="五、Spark核心API"></a>五、Spark核心API</h2><h2 id="六、Spark任务提交流程"><a href="#六、Spark任务提交流程" class="headerlink" title="六、Spark任务提交流程"></a>六、Spark任务提交流程</h2><h2 id="七、依赖"><a href="#七、依赖" class="headerlink" title="七、依赖"></a>七、依赖</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NarrowDependency:	子RDD的每个分区依赖于父RDD的少量分区。</span><br><span class="line">	 |</span><br><span class="line">	&#x2F; \</span><br><span class="line">	---</span><br><span class="line">	 |----	OneToOneDependency		&#x2F;&#x2F;父子RDD之间的分区存在一对一关系。</span><br><span class="line">	 |----	RangeDependency			&#x2F;&#x2F;父RDD的一个分区范围和子RDD存在一对一关系。</span><br><span class="line">	 |----	OneToOneDependency		&#x2F;&#x2F;父子RDD之间的分区存在一对一关系。</span><br><span class="line"></span><br><span class="line">ShuffleDependency					&#x2F;&#x2F;依赖，在shuffle阶段输出时的一种依赖。</span><br><span class="line"></span><br><span class="line">PruneDependency						&#x2F;&#x2F;在PartitionPruningRDD和其父RDD之间的依赖</span><br><span class="line">									&#x2F;&#x2F;子RDD包含了父RDD的分区子集。</span><br></pre></td></tr></table></figure></div>



<h2 id="八、持久化"><a href="#八、持久化" class="headerlink" title="八、持久化"></a>八、持久化</h2><h2 id="九、共享变量"><a href="#九、共享变量" class="headerlink" title="九、共享变量"></a>九、共享变量</h2><p>map(),filter()高级函数中访问的对象被串行化到各个节点。每个节点都有一份拷贝。变量值并不会回传到driver程序。spark通过广播变量和累加器实现共享变量。</p>
<h3 id="9-1-广播变量"><a href="#9-1-广播变量" class="headerlink" title="9.1 广播变量"></a>9.1 广播变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建广播变量</span></span><br><span class="line"><span class="keyword">val</span> bc1 = sc.broadcast(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">bc1.value</span><br></pre></td></tr></table></figure></div>



<h3 id="9-2-累加器"><a href="#9-2-累加器" class="headerlink" title="9.2 累加器"></a>9.2 累加器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> ac1 = sc.longaccumulator(<span class="string">"ac1"</span>)</span><br><span class="line">ac1.value</span><br><span class="line">sc.parell..(<span class="number">1</span> to <span class="number">10</span>).map(_ * <span class="number">2</span>).map(e=&gt;&#123;ac1.add(<span class="number">1</span>) ; e&#125;).reduce(_+_)</span><br><span class="line">ac1.value			<span class="comment">//10</span></span><br></pre></td></tr></table></figure></div>



<h2 id="十、Spark-SQL"><a href="#十、Spark-SQL" class="headerlink" title="十、Spark SQL"></a>十、Spark SQL</h2><h3 id="10-1-Scala-版"><a href="#10-1-Scala-版" class="headerlink" title="10.1 Scala 版"></a>10.1 Scala 版</h3><h4 id="10-1-1-创建-DataFrame-收据框"><a href="#10-1-1-创建-DataFrame-收据框" class="headerlink" title="10.1.1 创建 DataFrame 收据框"></a>10.1.1 创建 DataFrame 收据框</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建样例类</span></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">id:<span class="type">Int</span>, name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">创建数据，并转换成RDD</span></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">arr</span> </span>= <span class="type">Array</span>(<span class="string">"1,tom,12"</span>, <span class="string">"2,wang,13"</span>, <span class="string">"3,li,16"</span>)</span><br><span class="line">arr: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(<span class="number">1</span>,tom,<span class="number">12</span>, <span class="number">2</span>,wang,<span class="number">13</span>, <span class="number">3</span>,li,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.makeRDD(arr)</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">0</span>] at makeRDD at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"><span class="comment">// 创建对象RDD（即将字符串RDD转换成一个对象）</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd2 = rdd1.map(e =&gt; &#123;<span class="keyword">val</span> pars = e.split(<span class="string">","</span>); <span class="type">Person</span>(pars(<span class="number">0</span>).toInt, pars(<span class="number">1</span>), pars(<span class="number">2</span>).toInt)&#125;)</span><br><span class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Person</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">2</span>] at map at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"><span class="comment">// 根据RDD创建DataFrame</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = spark.createDataFrame(rdd2)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int, name: string ... <span class="number">1</span> more field]</span><br><span class="line"><span class="comment">// 打印表结构</span></span><br><span class="line">scala&gt; df.printSchema</span><br><span class="line">root</span><br><span class="line"> |-- id: integer (nullable = <span class="literal">false</span>)</span><br><span class="line"> |-- name: string (nullable = <span class="literal">true</span>)</span><br><span class="line"> |-- age: integer (nullable = <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+---+----+---+                                                                  </span><br><span class="line">| id|name|age|</span><br><span class="line">+---+----+---+</span><br><span class="line">|  <span class="number">1</span>| tom| <span class="number">12</span>|</span><br><span class="line">|  <span class="number">2</span>|wang| <span class="number">13</span>|</span><br><span class="line">|  <span class="number">3</span>|  li| <span class="number">16</span>|</span><br><span class="line">+---+----+---+</span><br></pre></td></tr></table></figure></div>



<h4 id="10-1-2-创建临时视图"><a href="#10-1-2-创建临时视图" class="headerlink" title="10.1.2 创建临时视图"></a>10.1.2 创建临时视图</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据DataFrame在内存中创建一个临时的视图</span></span><br><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">"persons"</span>)</span><br><span class="line"><span class="comment">// 利用sparkSQL，根据内存中的视图，返回一个DataFrame</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> df2 = spark.sql(<span class="string">"select * from persons"</span>)</span><br><span class="line">df2: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int, name: string ... <span class="number">1</span> more field]</span><br><span class="line">scala&gt; df2.show</span><br><span class="line">+---+----+---+                                                                  </span><br><span class="line">| id|name|age|</span><br><span class="line">+---+----+---+</span><br><span class="line">|  <span class="number">1</span>| tom| <span class="number">12</span>|</span><br><span class="line">|  <span class="number">2</span>|wang| <span class="number">13</span>|</span><br><span class="line">|  <span class="number">3</span>|  li| <span class="number">16</span>|</span><br><span class="line">+---+----+---+</span><br></pre></td></tr></table></figure></div>



<h4 id="10-1-3-查询数据"><a href="#10-1-3-查询数据" class="headerlink" title="10.1.3 查询数据"></a>10.1.3 查询数据</h4><p><strong>通过SQL查询</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也可以添加条件查询，返回DataFrame</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> df3 = spark.sql(<span class="string">"select * from persons where id &gt; 1"</span>)</span><br><span class="line">df3: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int, name: string ... <span class="number">1</span> more field]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df4 = spark.sql(<span class="string">"select * from persons where id &lt; 1"</span>)</span><br><span class="line">df4: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int, name: string ... <span class="number">1</span> more field]</span><br><span class="line"><span class="comment">// 然后创建视图</span></span><br><span class="line">scala&gt; df3.createOrReplaceTempView(<span class="string">"p1"</span>)</span><br><span class="line">scala&gt; df4.createOrReplaceTempView(<span class="string">"p2"</span>)</span><br><span class="line"><span class="comment">// 然后查询</span></span><br><span class="line">scala&gt; spark.sql(<span class="string">"select * from p1 union select * from p2"</span>).show</span><br><span class="line">+---+----+---+                                                                  </span><br><span class="line">| id|name|age|</span><br><span class="line">+---+----+---+</span><br><span class="line">|  <span class="number">3</span>|  li| <span class="number">16</span>|</span><br><span class="line">|  <span class="number">2</span>|wang| <span class="number">13</span>|</span><br><span class="line">+---+----+---+</span><br></pre></td></tr></table></figure></div>

<p><strong>通过API查询</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过函数，返回Dataset（DataFram实际上就是Dataset）</span></span><br><span class="line">scala&gt; df3.union(df4)</span><br><span class="line">res8: org.apache.spark.sql.<span class="type">Dataset</span>[org.apache.spark.sql.<span class="type">Row</span>] = [id: int, name: string ... <span class="number">1</span> more field]</span><br><span class="line"><span class="comment">// 显示</span></span><br><span class="line">scala&gt; res8.show</span><br><span class="line">+---+----+---+</span><br><span class="line">| id|name|age|</span><br><span class="line">+---+----+---+</span><br><span class="line">|  <span class="number">2</span>|wang| <span class="number">13</span>|</span><br><span class="line">|  <span class="number">3</span>|  li| <span class="number">16</span>|</span><br><span class="line">+---+----+---+</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他API</span></span><br><span class="line"><span class="comment">// 查询指定字段</span></span><br><span class="line">scala&gt; df.selectExpr(<span class="string">"id"</span>, <span class="string">"name"</span>).show</span><br><span class="line">+---+----+</span><br><span class="line">| id|name|</span><br><span class="line">+---+----+</span><br><span class="line">|  <span class="number">1</span>| tom|</span><br><span class="line">|  <span class="number">2</span>|wang|</span><br><span class="line">|  <span class="number">3</span>|  li|</span><br><span class="line">+---+----+</span><br><span class="line"></span><br><span class="line"><span class="comment">// where条件查询</span></span><br><span class="line">scala&gt; df.where(<span class="string">"name like 't%'"</span>).show</span><br><span class="line">+---+----+---+</span><br><span class="line">| id|name|age|</span><br><span class="line">+---+----+---+</span><br><span class="line">|  <span class="number">1</span>| tom| <span class="number">12</span>|</span><br><span class="line">+---+----+---+</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合函数</span></span><br><span class="line">scala&gt; df.agg(sum(<span class="string">"age"</span>),max(<span class="string">"age"</span>)).show</span><br><span class="line">+--------+--------+</span><br><span class="line">|sum(age)|max(age)|</span><br><span class="line">+--------+--------+</span><br><span class="line">|      <span class="number">41</span>|      <span class="number">16</span>|</span><br><span class="line">+--------+--------+</span><br></pre></td></tr></table></figure></div>



<h3 id="10-2-Java-版"><a href="#10-2-Java-版" class="headerlink" title="10.2 Java 版"></a>10.2 Java 版</h3><p><strong>导入依赖</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="10-2-1-处理-json-数据"><a href="#10-2-1-处理-json-数据" class="headerlink" title="10.2.1 处理 json 数据"></a>10.2.1 处理 json 数据</h4><p><strong>创建数据文件</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"name"</span>:<span class="string">"tom1"</span>,<span class="attr">"age"</span>:<span class="number">11</span>&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"name"</span>:<span class="string">"tom2"</span>,<span class="attr">"age"</span>:<span class="number">12</span>&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">3</span>,<span class="attr">"name"</span>:<span class="string">"tom3"</span>,<span class="attr">"age"</span>:<span class="number">13</span>&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">4</span>,<span class="attr">"name"</span>:<span class="string">"tom4"</span>,<span class="attr">"age"</span>:<span class="number">14</span>&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">5</span>,<span class="attr">"name"</span>:<span class="string">"tom5"</span>,<span class="attr">"age"</span>:<span class="number">15</span>&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>:<span class="number">6</span>,<span class="attr">"name"</span>:<span class="string">"tom6"</span>,<span class="attr">"age"</span>:<span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>编写代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.directory.shared.kerberos.codec.apRep.actions.ApRepInit;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaRDD;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.VoidFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Dataset;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JsonFileIO class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/5 11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SparkSession sparkSession = SparkSession</span><br><span class="line">                .builder()</span><br><span class="line">                .appName(<span class="string">"SQL-java-Json"</span>)</span><br><span class="line">                .config(<span class="string">"spark.master"</span>, <span class="string">"local"</span>)    <span class="comment">// 本地模式</span></span><br><span class="line">                .getOrCreate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line">        Dataset&lt;Row&gt; dataset = sparkSession.read().json(<span class="string">"file:///d:/tmp/jsonSQL.dat"</span>);</span><br><span class="line">        dataset.show();</span><br><span class="line">        <span class="comment">// 创建临时视图</span></span><br><span class="line">        dataset.createOrReplaceTempView(<span class="string">"persons"</span>);</span><br><span class="line">        <span class="comment">// SQL</span></span><br><span class="line">        Dataset&lt;Row&gt; result = sparkSession.sql(<span class="string">"select * from persons where id &gt; 2"</span>);</span><br><span class="line">        result.show();</span><br><span class="line">        <span class="comment">// 写入文件(目录)</span></span><br><span class="line">        result.write().json(<span class="string">"file:///d:/tmp/jsonSQLOutDir"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// DataSet 转 RDD （可以进行一些数据操作！）</span></span><br><span class="line">        JavaRDD&lt;Row&gt; javaRDD = dataset.toJavaRDD();</span><br><span class="line">        javaRDD.filter(<span class="keyword">new</span> Function&lt;Row, Boolean&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Row row)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Long id = (Long) row.getAs(<span class="string">"id"</span>);</span><br><span class="line">                <span class="keyword">if</span> (id &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).foreach(<span class="keyword">new</span> VoidFunction&lt;Row&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Row row)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(row);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>输出结果</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 从文件读取的数据</span><br><span class="line">+---+---+----+</span><br><span class="line">|age| id|name|</span><br><span class="line">+---+---+----+</span><br><span class="line">| 11|  1|tom1|</span><br><span class="line">| 12|  2|tom2|</span><br><span class="line">| 13|  3|tom3|</span><br><span class="line">| 14|  4|tom4|</span><br><span class="line">| 15|  5|tom5|</span><br><span class="line">| 16|  6|tom6|</span><br><span class="line">+---+---+----+</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 经过SQL语句过滤的</span><br><span class="line">+---+---+----+</span><br><span class="line">|age| id|name|</span><br><span class="line">+---+---+----+</span><br><span class="line">| 13|  3|tom3|</span><br><span class="line">| 14|  4|tom4|</span><br><span class="line">| 15|  5|tom5|</span><br><span class="line">| 16|  6|tom6|</span><br><span class="line">+---+---+----+</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 最后输出到文件的</span><br><span class="line">&#123;&quot;age&quot;:13,&quot;id&quot;:3,&quot;name&quot;:&quot;tom3&quot;&#125;</span><br><span class="line">&#123;&quot;age&quot;:14,&quot;id&quot;:4,&quot;name&quot;:&quot;tom4&quot;&#125;</span><br><span class="line">&#123;&quot;age&quot;:15,&quot;id&quot;:5,&quot;name&quot;:&quot;tom5&quot;&#125;</span><br><span class="line">&#123;&quot;age&quot;:16,&quot;id&quot;:6,&quot;name&quot;:&quot;tom6&quot;&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="10-2-2-DataSet-转-RDD"><a href="#10-2-2-DataSet-转-RDD" class="headerlink" title="10.2.2 DataSet 转 RDD"></a>10.2.2 DataSet 转 RDD</h4><p><strong>完整代码在上面JSON代码里</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DataSet 转 RDD （可以进行一些数据操作！）</span></span><br><span class="line">JavaRDD&lt;Row&gt; javaRDD = dataset.toJavaRDD();</span><br><span class="line">javaRDD.filter(<span class="keyword">new</span> Function&lt;Row, Boolean&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Row row)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Long id = (Long) row.getAs(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).foreach(<span class="keyword">new</span> VoidFunction&lt;Row&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Row row)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><strong>输出结果</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[14,4,tom4]</span><br><span class="line">[15,5,tom5]</span><br><span class="line">[16,6,tom6]</span><br></pre></td></tr></table></figure></div>



<h4 id="10-2-3-处理-jdbc-数据"><a href="#10-2-3-处理-jdbc-数据" class="headerlink" title="10.2.3 处理 jdbc 数据"></a>10.2.3 处理 jdbc 数据</h4><p><strong>添加依赖</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Column;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Dataset;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JdbcIO class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/5 13:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SparkSession sparkSession = SparkSession</span><br><span class="line">                .builder()</span><br><span class="line">                .appName(<span class="string">"SQL-java-jdbc"</span>)</span><br><span class="line">                .config(<span class="string">"spark.master"</span>, <span class="string">"local"</span>)    <span class="comment">// 本地模式</span></span><br><span class="line">                .getOrCreate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置数据库信息</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql:///test"</span>;</span><br><span class="line">        String table = <span class="string">"user"</span>;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.put(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">        prop.put(<span class="string">"password"</span>, <span class="string">"Bow1024"</span>);</span><br><span class="line">        prop.put(<span class="string">"driver"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">// 读取数据库数据</span></span><br><span class="line">        Dataset&lt;Row&gt; dataset = sparkSession.read().jdbc(url, table, prop);</span><br><span class="line">        dataset.show();</span><br><span class="line">        <span class="comment">// 查询操作</span></span><br><span class="line">        Dataset&lt;Row&gt; result = dataset.select(<span class="keyword">new</span> Column(<span class="string">"id"</span>), <span class="keyword">new</span> Column(<span class="string">"name"</span>)).where(<span class="string">"id &gt; 1"</span>);</span><br><span class="line">        <span class="comment">// 写入数据库</span></span><br><span class="line">        result.write().jdbc(url, <span class="string">"sparkSQL"</span>, prop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>输出结果</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 数据库读取的内容</span><br><span class="line">+---+--------+--------+----+</span><br><span class="line">| id|username|password|name|</span><br><span class="line">+---+--------+--------+----+</span><br><span class="line">|  1|zhangsan|     123|张三|</span><br><span class="line">|  2|    lisi|     123|李四|</span><br><span class="line">+---+--------+--------+----+</span><br></pre></td></tr></table></figure></div>

<p>数据库查询结果</p>
<p><a href="/postImages/jdbcConn.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/jdbcConn.png" class="lazyload"></a></p>
<h3 id="10-3-整合-Hive"><a href="#10-3-整合-Hive" class="headerlink" title="10.3 整合 Hive"></a>10.3 整合 Hive</h3><h4 id="10-3-1-linux环境"><a href="#10-3-1-linux环境" class="headerlink" title="10.3.1 linux环境"></a>10.3.1 linux环境</h4><ol>
<li><p>复制core-site.xml(hdfs) + hdfs-site.xml(hdfs) + hive-site.xml(hive)三个文件到spark/conf下。（分发到所有节点）</p>
</li>
<li><p>复制hive/lib下mysql驱动程序到/soft/spark/jars下（分发到所有节点）</p>
</li>
<li><p>启动spark-shell，指定启动模式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-shell --master spark:&#x2F;&#x2F;s201:7077</span><br><span class="line"></span><br><span class="line"># 创建HIVE表</span><br><span class="line">scala&gt; spark.sql(&quot;CREATE TABLE IF NOT EXISTS mydb.sparkHive(id int, name string, age int) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39; LINES TERMINATED BY &#39;\n&#39; STORED AS TEXTFILE&quot;)</span><br><span class="line"></span><br><span class="line"># 本地创建数据文件</span><br><span class="line">1,tom1,11</span><br><span class="line">2,tom2,12</span><br><span class="line">3,tom3,13</span><br><span class="line">4,tom4,14</span><br><span class="line">5,tom5,15</span><br><span class="line"></span><br><span class="line"># 加载数据到HIVE表</span><br><span class="line">scala&gt; spark.sql(&quot;load data local inpath &#39;file:&#x2F;&#x2F;&#x2F;home&#x2F;wbw&#x2F;tmp&#x2F;data.txt&#39; into table mydb.sparkHive&quot;)</span><br><span class="line"></span><br><span class="line"># 查看HIVE表</span><br><span class="line">scala&gt; spark.sql(&quot;select * from mydb.sparkHive&quot;).show</span><br><span class="line">+----+----+----+                                                                </span><br><span class="line">|  id|name| age|</span><br><span class="line">+----+----+----+</span><br><span class="line">|   1|tom1|  11|</span><br><span class="line">|   2|tom2|  12|</span><br><span class="line">|   3|tom3|  13|</span><br><span class="line">|   4|tom4|  14|</span><br><span class="line">|   5|tom5|  15|</span><br><span class="line">|null|null|null|</span><br><span class="line">|null|null|null|</span><br><span class="line">+----+----+----+</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="10-3-2-IDEA环境（JAVA）"><a href="#10-3-2-IDEA环境（JAVA）" class="headerlink" title="10.3.2 IDEA环境（JAVA）"></a>10.3.2 IDEA环境（JAVA）</h4><ol>
<li><p>复制core-site.xml(hdfs) + hdfs-site.xml(hdfs) + hive-site.xml(hive)三个文件到resources目录下</p>
</li>
<li><p>编码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Dataset;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SparkHive class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/5 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkHive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SparkSession sparkSession = SparkSession</span><br><span class="line">                .builder()</span><br><span class="line">                .appName(<span class="string">"SQL-java-hive"</span>)</span><br><span class="line">                .config(<span class="string">"spark.master"</span>, <span class="string">"local"</span>)    <span class="comment">// 本地模式</span></span><br><span class="line">                .enableHiveSupport()				<span class="comment">// 这个是关键！</span></span><br><span class="line">                .getOrCreate();</span><br><span class="line"></span><br><span class="line">        Dataset&lt;Row&gt; dataset = sparkSession.sql(<span class="string">"select * from mydb.sparkHive"</span>);</span><br><span class="line">        dataset.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="10-3-3-可能遇到的问题"><a href="#10-3-3-可能遇到的问题" class="headerlink" title="10.3.3 可能遇到的问题"></a>10.3.3 可能遇到的问题</h4><p><strong>Spark2.3.0集成hive3.1.1遇到的一个坑HikariCP</strong></p>
<p><a href="https://blog.csdn.net/weixin_44166276/article/details/85088998" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44166276/article/details/85088998</a></p>
<p>TIP：我是修改了hive-site.xml中</p>
<ol>
<li><p><strong>datanucleus.connectionPoolingType</strong>改成<strong>dbcp</strong>。</p>
</li>
<li><p>然后关闭了版本验证<strong>hive.metastore.schema.verification</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<p><strong>IDEA下权限不足 Permission denied: user=BoWenWang, access=EXECUTE, inode=”/tmp”:wbw:supergroup:drwx——</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 哪个缺权限，就给哪个</span><br><span class="line">hdfs dfs -chmod 777 &#x2F;tmp</span><br></pre></td></tr></table></figure></div>





<h3 id="10-4-SQL查询引擎"><a href="#10-4-SQL查询引擎" class="headerlink" title="10.4 SQL查询引擎"></a>10.4 SQL查询引擎</h3><p>相当于嵌套了一层，通过JDBC的途径间接调用。</p>
<ol>
<li><p>启动spark集群(完全分布式-standalone)</p>
<pre><code>$&gt;/soft/spark/sbin/start-all.sh
   master        //201
   worker        //202 ~ 204</code></pre></li>
<li><p>创建hive的数据表在默认库下。</p>
<pre><code>$&gt;hive -e &quot;create table tt(id int,name string , age int) row format delimited fields terminated by &apos;,&apos; lines terminated by &apos;\n&apos; stored as textfile&quot;</code></pre></li>
<li><p>加载数据到hive表中.</p>
<pre><code>$&gt;hive -e &quot;load data local inpath &apos;file:///home/centos/data.txt&apos; into table tt&quot;
   $&gt;hive -e &quot;select * from tt&quot;</code></pre></li>
<li><p>分发三个文件到所有worker节点</p>
</li>
<li><p>启动spark集群</p>
<pre><code>$&gt;soft/spark/sbin/start-all.sh</code></pre></li>
<li><p>启动spark-shell</p>
<pre><code>$&gt;spark-shell --master spark://s201:7077</code></pre></li>
<li><p>启动thriftserver服务器</p>
<pre><code>$&gt;start</code></pre></li>
</ol>
<h2 id="十一、Spark-Streaming"><a href="#十一、Spark-Streaming" class="headerlink" title="十一、Spark Streaming"></a>十一、Spark Streaming</h2><h3 id="11-1-介绍"><a href="#11-1-介绍" class="headerlink" title="11.1 介绍"></a>11.1 介绍</h3><p>是spark core的扩展，针对实时数据流处理,具有可扩展、高吞吐量、容错。数据可以是来自于kafka,flume,tcpsocket,使用高级函数(map reduce filter ,join , windows),<br>处理的数据可以推送到database,hdfs,针对数据流处理可以应用到机器学习和图计算中。</p>
<p>内部，spark接受实时数据流，分成batch(分批次)进行处理，最终在每个batch终产生结果stream。</p>
<p><strong>discretized stream or DStream</strong><br>离散流,表示的是连续的数据流。<br>通过kafka、flume等输入数据流产生，也可以通过对其他DStream进行高阶变换产生。<br>在内部，DStream是表现为RDD序列。</p>
<p><strong>StreamingContext</strong></p>
<ol>
<li>启动上下文之后，不能启动新的流或者添加新的</li>
<li>上下文停止后不能restart.</li>
<li>同一JVM只有一个active的streamingcontext</li>
<li>停止streamingContext会一同stop掉SparkContext，如若只停止StreamingContext.ssc.stop(false|true);</li>
<li>SparkContext可以创建多个StreamingContext,创建新的之前停掉旧的。</li>
</ol>
<h3 id="11-2-快速入门-单词计数"><a href="#11-2-快速入门-单词计数" class="headerlink" title="11.2 快速入门(单词计数)"></a>11.2 快速入门(单词计数)</h3><p><strong>添加pom依赖</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="11-2-1-Scala-本地"><a href="#11-2-1-Scala-本地" class="headerlink" title="11.2.1 Scala + 本地"></a>11.2.1 Scala + 本地</h4><p><strong>代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.scala</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreamingWordCountScala</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 注意这个local[2]，线程数不能1个，因为要有1个用来接受数据，一个来处理</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"WC-Streaming-Scala"</span>)</span><br><span class="line">    <span class="comment">// 创建SparkStreaming上下文，批次时长是1秒</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文本流（即数据源）</span></span><br><span class="line">    <span class="keyword">val</span> line = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数据进行处理</span></span><br><span class="line">    <span class="keyword">val</span> words = line.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">    <span class="keyword">val</span> pairs = words.map((_, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">val</span> count = pairs.reduceByKey(_ + _)</span><br><span class="line">    <span class="comment">// 要有输出，程序才能执行</span></span><br><span class="line">    count.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动作业</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">// 等待结束（不会停下来，只有调用stop()）</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行步骤</strong></p>
<ol>
<li><p>开启nc服务器（【安装教程】<a href="https://blog.csdn.net/weixin_38842096/article/details/85720559）" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38842096/article/details/85720559）</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&gt; nc -lL -p 9999</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动sparkStreaming程序</p>
</li>
<li><p>在nc命令行中输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello spark streaming</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看IDEA控制台输出</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588831126000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,1)</span><br><span class="line">(streaming,1)</span><br><span class="line">(spark,1)</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h4 id="11-2-2-Java-集群"><a href="#11-2-2-Java-集群" class="headerlink" title="11.2.2 Java + 集群"></a>11.2.2 Java + 集群</h4><p><strong>代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Seconds;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaPairDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaReceiverInputDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SparkStreamingWordCountJava class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/7 14:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingWordCountJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"WC-Streaming-Java"</span>).setMaster(<span class="string">"spark://s201:7077"</span>);</span><br><span class="line">        JavaStreamingContext jsc = <span class="keyword">new</span> JavaStreamingContext(sparkConf, Seconds.apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> JavaReceiverInputDStream&lt;String&gt; line = jsc.socketTextStream(<span class="string">"s201"</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        JavaDStream&lt;String&gt; words = line.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] words = s.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">return</span> Arrays.asList(words).iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; pairs = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; count = pairs.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer + integer2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        count.print();</span><br><span class="line"></span><br><span class="line">        jsc.start();</span><br><span class="line">        jsc.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行步骤</strong></p>
<ol>
<li><p>打jar包，上传导集群</p>
</li>
<li><p>在s201打开nc服务器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -p 9999</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>提交作业</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --class cn.wangbowen.spark.java.SparkStreamingWordCountJava Spark-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>等待启动成功后，在NC中输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world count</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看运行窗口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588833156000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,1)</span><br><span class="line">(world,1)</span><br><span class="line">(count,1)</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="11-3-DStream-和-Receiver"><a href="#11-3-DStream-和-Receiver" class="headerlink" title="11.3 DStream 和 Receiver"></a>11.3 DStream 和 Receiver</h3><h4 id="11-3-1-DSteam"><a href="#11-3-1-DSteam" class="headerlink" title="11.3.1 DSteam"></a>11.3.1 DSteam</h4><ol>
<li></li>
</ol>
<h4 id="11-3-2-Receiver"><a href="#11-3-2-Receiver" class="headerlink" title="11.3.2 Receiver"></a>11.3.2 Receiver</h4><ol>
<li>介绍：Receiver是接受者，从source接受数据，存储在内存中共spark处理。</li>
<li>源<ul>
<li>基本源:fileSystem | socket,内置API支持。</li>
<li>高级源:kafka | flume | …，需要引入pom.xml依赖.</li>
</ul>
</li>
<li>注意：使用local模式时，不能使用一个线程.使用的local[n]，n需要大于receiver的个数。</li>
</ol>
<h3 id="11-4-Kafka-集成"><a href="#11-4-Kafka-集成" class="headerlink" title="11.4 Kafka 集成"></a>11.4 Kafka 集成</h3><ol>
<li><p>确保ZK集群开启</p>
</li>
<li><p>启动Kafka，在S202~S204分别运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cd &#x2F;soft&#x2F;kafka</span><br><span class="line">$bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建kafka主题，查看主题列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$kafka-topics.sh --create --bootstrap-server s202:9092 --replication-factor 2 --partitions 2 --topic mytopic1</span><br><span class="line"># 查看主题列表</span><br><span class="line">$kafka-topics.sh --list --bootstrap-server s202:9092</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>导入依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-10_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Seconds;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.ConsumerStrategies;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.KafkaUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.LocationStrategies;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SparkStreamingWordCountJava class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/7 14:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingWordCountJavaForKafka</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"WC-Streaming-Java-Kafka"</span>).setMaster(<span class="string">"local[2]"</span>);</span><br><span class="line">        JavaStreamingContext jsc = <span class="keyword">new</span> JavaStreamingContext(sparkConf, Seconds.apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Kafka连接配置</span></span><br><span class="line">        Map&lt;String, Object&gt; kafkaParams = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"s202:9092,s203:9092"</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"key.deserializer"</span>, StringDeserializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        kafkaParams.put(<span class="string">"value.deserializer"</span>, StringDeserializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        kafkaParams.put(<span class="string">"group.id"</span>, <span class="string">"g6"</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"latest"</span>);</span><br><span class="line">        kafkaParams.put(<span class="string">"enable.auto.commit"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅主题列表</span></span><br><span class="line">        Collection&lt;String&gt; topics = Collections.singletonList(<span class="string">"mytopic1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源</span></span><br><span class="line">        <span class="keyword">final</span> JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; stream =</span><br><span class="line">                KafkaUtils.createDirectStream(</span><br><span class="line">                        jsc,</span><br><span class="line">                        LocationStrategies.PreferConsistent(),</span><br><span class="line">                        ConsumerStrategies.&lt;String, String&gt;Subscribe(topics, kafkaParams)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 压扁操作（消费数据源）</span></span><br><span class="line">        JavaDStream&lt;String&gt; words = stream.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;ConsumerRecord&lt;String, String&gt;, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(ConsumerRecord&lt;String, String&gt; consumerRecord)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// consumerRecord.key(): kafka消息由K-V组成，这里是控制台发送所以Key为null</span></span><br><span class="line">                String[] words = consumerRecord.value().split(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">return</span> Arrays.asList(words).iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; pairs = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; count = pairs.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer + integer2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        count.print();</span><br><span class="line"></span><br><span class="line">        jsc.start();</span><br><span class="line">        jsc.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启Kafka控制台生产者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$kafka-console-producer.sh --broker-list s202:9092 --topic mytopic1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运行程序（Run）</p>
</li>
<li><p>在生产者控制台发送</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;hello spark streaming for kafka</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>观察IDEA控制台输出</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588835416000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,1)</span><br><span class="line">(streaming,1)</span><br><span class="line">(kafka,1)</span><br><span class="line">(spark,1)</span><br><span class="line">(for,1)</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="11-5-状态更新"><a href="#11-5-状态更新" class="headerlink" title="11.5 状态更新"></a>11.5 状态更新</h3><h4 id="11-5-1-updateStateByKey"><a href="#11-5-1-updateStateByKey" class="headerlink" title="11.5.1 updateStateByKey"></a>11.5.1 updateStateByKey</h4><p>可以在指定的批次间隔内返回之前的全部历史数据，包括新增的，改变的和没有改变的。由于updateStateByKey在使用的时候一定要做checkpoint，当数据量过大的时候，checkpoint会占据庞大的数据量，会影响性能，效率不高。</p>
<p><strong>适用场景</strong></p>
<p>updateStateByKey可以用来统计历史数据。例如统计不同时间段用户平均消费金额，消费次数，消费总额，网站的不同时间段的访问量等指标。</p>
<h4 id="11-5-2-mapWithState"><a href="#11-5-2-mapWithState" class="headerlink" title="11.5.2 mapWithState"></a>11.5.2 mapWithState</h4><p>只返回变化后的key的值，这样做的好处是，我们可以只是关心那些已经发生的变化的key，对于没有数据输入，则不会返回那些没有变化的key的数据。这样的话，即使数据量很大，checkpoint也不会像updateStateByKey那样，占用太多的存储，效率比较高（再生产环境中建议使用这个）。</p>
<p><strong>适用场景</strong></p>
<p>mapWithState可以用于一些实时性较高，延迟较少的一些场景，例如你在某宝上下单买了个东西，付款之后返回你账户里的余额信息。</p>
<blockquote>
<p>版权声明：本文为CSDN博主「爱是与世界平行」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/an1090239782/article/details/102832444" target="_blank" rel="noopener">https://blog.csdn.net/an1090239782/article/details/102832444</a></p>
</blockquote>
<h4 id="11-5-3-代码示例"><a href="#11-5-3-代码示例" class="headerlink" title="11.5.3 代码示例"></a>11.5.3 代码示例</h4><p><strong>代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.Optional;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Seconds;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaPairDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaReceiverInputDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SparkStreamingWordCountJava class</span></span><br><span class="line"><span class="comment"> * 状态更新</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/7 14:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingStatus</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"WC-Streaming-Status"</span>).setMaster(<span class="string">"local[2]"</span>);</span><br><span class="line">        JavaStreamingContext jsc = <span class="keyword">new</span> JavaStreamingContext(sparkConf, Seconds.apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> JavaReceiverInputDStream&lt;String&gt; line = jsc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        JavaDStream&lt;String&gt; words = line.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] words = s.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">return</span> Arrays.asList(words).iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; pairs = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; count = pairs.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer + integer2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 打印当前窗口数据</span></span><br><span class="line">        count.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置检查点（使用updateStateByKey必须设置检查点目录）</span></span><br><span class="line">        jsc.checkpoint(<span class="string">"file:///d:/tmp/sparkCheckPoint"</span>);</span><br><span class="line">        <span class="comment">// 这里做状态更新</span></span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; historyCount = count.updateStateByKey(<span class="keyword">new</span> Function2&lt;List&lt;Integer&gt;, Optional&lt;Integer&gt;, Optional&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> integers 这里是相同的Key为一组进来接受处理</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> optional 这里是上一个旧的值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Optional&lt;Integer&gt; <span class="title">call</span><span class="params">(List&lt;Integer&gt; integers, Optional&lt;Integer&gt; optional)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 如果没有上一个值（即Null），那么取0</span></span><br><span class="line">                Integer newCounter = optional.orElse(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 累加值</span></span><br><span class="line">                <span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">                    newCounter += integer;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Optional.of(newCounter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 打印状态更新值，即累计值</span></span><br><span class="line">        historyCount.print();</span><br><span class="line"></span><br><span class="line">        jsc.start();</span><br><span class="line">        jsc.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行步骤</strong></p>
<ol>
<li><p>打开nc，间隔一段时间发送一次数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\XXX&gt;nc -lL -p 9999</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看IDEA控制台打印信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; count.print(); 当前窗口统计值</span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588837904000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; historyCount.print(); 历史累积值</span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588837904000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,4)</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="11-6-窗口化操作"><a href="#11-6-窗口化操作" class="headerlink" title="11.6 窗口化操作"></a>11.6 窗口化操作</h3><ul>
<li><p>batch interval : 批次的间隔。</p>
</li>
<li><p>windows length : 窗口长度,跨批次。是批次的整数倍。</p>
</li>
<li><p>slide interval : 滑动间隔,窗口计算的间隔时间，是批次interval的整倍数。</p>
</li>
</ul>
<p>比如：</p>
<p><strong>batch interval  = 2，windows length = 6，slide interval =4</strong></p>
<p>统计6秒内的热词，每2秒计算一次接收到的数据，每4秒刷新一次。</p>
<p><a href="/postImages/windows.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/windows.png" class="lazyload"></a></p>
<p><strong>代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Duration;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Seconds;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaPairDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaReceiverInputDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SparkStreamingWordCountJava class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/7 14:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingWindows</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"WC-Streaming-Windows"</span>).setMaster(<span class="string">"local[2]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批次的间隔:每2秒计算一次接收到的数据</span></span><br><span class="line">        JavaStreamingContext jsc = <span class="keyword">new</span> JavaStreamingContext(sparkConf, Seconds.apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> JavaReceiverInputDStream&lt;String&gt; line = jsc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        JavaDStream&lt;String&gt; words = line.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String[] words = s.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">return</span> Arrays.asList(words).iterator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; pairs = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 窗口机制</span></span><br><span class="line">        JavaPairDStream&lt;String, Integer&gt; count = pairs.reduceByKeyAndWindow(</span><br><span class="line">                <span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> integer + integer2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> Duration(<span class="number">6</span> * <span class="number">1000</span>), <span class="comment">// 窗口长度</span></span><br><span class="line">                <span class="keyword">new</span> Duration(<span class="number">4</span> * <span class="number">1000</span>)  <span class="comment">// 滑动窗口长度</span></span><br><span class="line">        );</span><br><span class="line">        count.print();</span><br><span class="line"></span><br><span class="line">        jsc.start();</span><br><span class="line">        jsc.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>运行过程</strong></p>
<ol>
<li><p>开启nc</p>
</li>
<li><p>运行程序</p>
</li>
<li><p>发送数据（每隔1秒发一次）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\XXX&gt;nc -lL -p 9999</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看输出结果（每次输出间隔 4s = 4000ms，每2秒计算一次，用[]表示2秒的数据，显示6秒内的数据）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588839240000 ms </span><br><span class="line">-------------------------------------------</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588839244000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(2,1)</span><br><span class="line">(1,1)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588839248000 ms	</span><br><span class="line">-------------------------------------------</span><br><span class="line">(4,1)</span><br><span class="line">(6,1)</span><br><span class="line">(2,1)</span><br><span class="line">(5,1)</span><br><span class="line">(3,1)</span><br><span class="line">(1,1)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588839252000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(8,1)</span><br><span class="line">(6,1)</span><br><span class="line">(7,1)</span><br><span class="line">(5,1)</span><br><span class="line">(9,1)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588839256000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(12,1)</span><br><span class="line">(13,1)</span><br><span class="line">(9,1)</span><br><span class="line">(11,1)</span><br><span class="line">(10,1)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588839260000 ms</span><br><span class="line">13</span><br><span class="line">-------------------------------------------</span><br><span class="line">(13,1)</span><br></pre></td></tr></table></figure></div>





</li>
</ol>
<h3 id="11-7-容错处理"><a href="#11-7-容错处理" class="headerlink" title="11.7 容错处理"></a>11.7 容错处理</h3><h4 id="11-7-1-生产环境中spark-streaming的job的注意事项"><a href="#11-7-1-生产环境中spark-streaming的job的注意事项" class="headerlink" title="11.7.1 生产环境中spark streaming的job的注意事项"></a>11.7.1 生产环境中spark streaming的job的注意事项</h4><ul>
<li>避免单点故障</li>
<li>Driver：驱动,运行用户编写的程序代码的主机。</li>
<li>Excutors：执行的spark driver提交的job,内部含有附加组件比如receiver。receiver接受数据并以block方式保存在memory中，同时，将数据块复制到其他executor中，已备于容错。每个批次末端会形成新的DStream，交给下游处理。如果receiver故障，其他执行器中的receiver会启动进行数据的接收。</li>
</ul>
<p><a href="/postImages/fail.png" data-fancybox="group" data-caption="avatar" class="fancybox"><img alt="avatar" title="avatar" data-src="/postImages/fail.png" class="lazyload"></a></p>
<h4 id="11-7-2-spark-streaming中的容错实现"><a href="#11-7-2-spark-streaming中的容错实现" class="headerlink" title="11.7.2 spark streaming中的容错实现"></a>11.7.2 spark streaming中的容错实现</h4><p>如果executor故障，所有未被处理的数据都会丢失，解决办法可以通过wal(hbase,hdfs/WALs)方式将数据预先写入到hdfs或者s3.</p>
<p>如果Driver故障，driver程序就会停止，所有executor都是丢失连接，停止计算过程。解决办法需要配置和编程。</p>
<p><strong>流程</strong></p>
<ol>
<li><p>配置Driver程序自动重启，使用特定的clustermanager实现。</p>
</li>
<li><p>重启时，从宕机的地方进行重启，通过检查点机制可以实现该功能。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置检查点目录可以是本地，可以是hdfs.</span><br><span class="line">jsc.checkpoint(&quot;d:&#x2F;&#x2F;....&quot;);</span><br><span class="line">&#x2F;&#x2F; 不再使用new方式创建SparkStreamContext对象，而是通过工厂方式.JavaStreamingContext.getOrCreate()方法创建上下文对象,首先会检查检查点目录，看是否有job运行，没有就new新的。</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<p><strong>代码</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.Optional;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function2;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Seconds;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaPairDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaReceiverInputDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.Function0;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SparkStreamingRestart class</span></span><br><span class="line"><span class="comment"> * 容错处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BoWenWang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/7 17:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkStreamingRestart</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上下文工厂函数，用来创建上下文</span></span><br><span class="line">        Function0&lt;JavaStreamingContext&gt; contextFactory = <span class="keyword">new</span> Function0&lt;JavaStreamingContext&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> JavaStreamingContext <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 这里复用了之前的更新状态内容</span></span><br><span class="line">                SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"WC-Streaming-ReStart"</span>).setMaster(<span class="string">"local[2]"</span>);</span><br><span class="line">                JavaStreamingContext jsc = <span class="keyword">new</span> JavaStreamingContext(sparkConf, Seconds.apply(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> JavaReceiverInputDStream&lt;String&gt; line = jsc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">                JavaDStream&lt;String&gt; words = line.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        String[] words = s.split(<span class="string">" "</span>);</span><br><span class="line">                        <span class="keyword">return</span> Arrays.asList(words).iterator();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                JavaPairDStream&lt;String, Integer&gt; pairs = words.mapToPair(<span class="keyword">new</span> PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(s, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                JavaPairDStream&lt;String, Integer&gt; count = pairs.reduceByKey(<span class="keyword">new</span> Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> integer + integer2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 这里做状态更新</span></span><br><span class="line">                JavaPairDStream&lt;String, Integer&gt; historyCount = count.updateStateByKey(<span class="keyword">new</span> Function2&lt;List&lt;Integer&gt;, Optional&lt;Integer&gt;, Optional&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> integers 这里是相同的Key为一组进来接受处理</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> optional 这里是上一个旧的值</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Optional&lt;Integer&gt; <span class="title">call</span><span class="params">(List&lt;Integer&gt; integers, Optional&lt;Integer&gt; optional)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Integer newCounter = optional.orElse(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">                            newCounter += integer;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> Optional.of(newCounter);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                historyCount.print();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置检查点（要与下面的路径相同，启动的时候先检查该目录，有问题的时候也是写入到该目录）</span></span><br><span class="line">                jsc.checkpoint(<span class="string">"file:///d:/tmp/ReStartCheckPoint"</span>);</span><br><span class="line">                <span class="keyword">return</span> jsc;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次启动的时候，先检查检查点，如果之间有断开，那么重启。否则新建一个上下文</span></span><br><span class="line">        JavaStreamingContext context = JavaStreamingContext.getOrCreate(<span class="string">"file:///d:/tmp/ReStartCheckPoint"</span>,</span><br><span class="line">                contextFactory);</span><br><span class="line"></span><br><span class="line">        context.start();</span><br><span class="line">        context.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行步骤</strong></p>
<ol>
<li><p>开启NC</p>
</li>
<li><p>运行程序</p>
</li>
<li><p>发送数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\BoWenWang&gt;nc -lL -p 9999</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>观察控制台输出</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588844410000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,5)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>直接杀掉程序（日志）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO CheckpointWriter: Deleting file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844650000</span><br><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO CheckpointWriter: Checkpoint for time 1588844660000 ms saved to file &#39;file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844660000&#39;, took 4337 bytes and 23 ms</span><br><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO DStreamGraph: Clearing checkpoint data for time 1588844660000 ms</span><br><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO DStreamGraph: Cleared checkpoint data for time 1588844660000 ms</span><br><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO ReceivedBlockTracker: Deleting batches: 1588844638000 ms</span><br><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO FileBasedWriteAheadLog_ReceivedBlockTracker: Attempting to clear 0 old log files in file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;receivedBlockMetadata older than 1588844640000: </span><br><span class="line">20&#x2F;05&#x2F;07 17:44:20 INFO InputInfoTracker: remove old batch metadata: 1588844638000 ms</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>重启程序（检查日志）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using Spark&#39;s default log4j profile: org&#x2F;apache&#x2F;spark&#x2F;log4j-defaults.properties</span><br><span class="line">20&#x2F;05&#x2F;07 17:45:48 INFO CheckpointReader: Checkpoint files found: file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844660000,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844660000.bk,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844658000,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844658000.bk,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844656000,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844656000.bk,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844654000,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844654000.bk,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844652000,file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844652000.bk</span><br><span class="line">20&#x2F;05&#x2F;07 17:45:48 INFO CheckpointReader: Attempting to load checkpoint from file file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844660000</span><br><span class="line">20&#x2F;05&#x2F;07 17:45:50 INFO Checkpoint: Checkpoint for time 1588844660000 ms validated</span><br><span class="line">20&#x2F;05&#x2F;07 17:45:50 INFO CheckpointReader: Checkpoint successfully loaded from file file:&#x2F;d:&#x2F;tmp&#x2F;ReStartCheckPoint&#x2F;checkpoint-1588844660000</span><br><span class="line">20&#x2F;05&#x2F;07 17:45:50 INFO CheckpointReader: Checkpoint was generated at time 1588844660000 ms</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>观察控制台输出（看到恢复了）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1588844660000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(hello,5)</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h3 id="11-8-将结果写入MySQL"><a href="#11-8-将结果写入MySQL" class="headerlink" title="11.8 将结果写入MySQL"></a>11.8 将结果写入MySQL</h3><p>利用11.2.1的代码，其中count.print()替换成输出到数据库即可：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定义一个函数获取连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createConnextion</span></span>() = &#123;</span><br><span class="line">    <span class="type">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    <span class="type">DriverManager</span>.getConnection(<span class="string">"url"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加新代码</span></span><br><span class="line">count.print()</span><br><span class="line">count.foreachRDD(rdd =&gt; &#123;</span><br><span class="line">    rdd.foreachPartition(partitionOfRecords =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> connection = createConnextion()</span><br><span class="line">        partitionOfRecords.foreach(record =&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> sql = <span class="string">"insert into ..."</span></span><br><span class="line">            connection.createStatement().execute(sql)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h2 id="十二、SparkApp-部署模式"><a href="#十二、SparkApp-部署模式" class="headerlink" title="十二、SparkApp 部署模式"></a>十二、SparkApp 部署模式</h2><p>决定spark作业入口程序的地方，Driver驱动。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark-submit --class xxx xx.jar --deploy-mode (client | cluster)</span><br></pre></td></tr></table></figure></div>

<p>–deploy-mode：指定是否部署driver程序在worker节点上还是在client主机上。不论哪种方式，rdd的运算都在worker执行</p>
<h3 id="12-1-闭包"><a href="#12-1-闭包" class="headerlink" title="12.1 闭包"></a>12.1 闭包</h3><p>RDD,resilient distributed dataset,弹性(容错)分布式数据集。</p>
<p>分区列表,function,dep Option(分区类, Pair[Key,Value]),首选位置。</p>
<p>运行job时，spark将rdd打碎变换成task,每个task由一个executor执行。执行之前，spark会进行task的闭包(closure)计算。闭包是指针对executor可见的变量和方法,以备在rdd的foreach中进行计算。闭包就是串行化后并发送给每个executor.</p>
<p><strong>local</strong>模式下，所有spark程序运行在同一JVM中，共享对象，counter（变量）是可以累加的。原因是所有executor指向的是同一个引用。</p>
<p><strong>cluster</strong>模式下，不可以，counter是闭包处理的。每个节点对driver上的counter是不可见的。只能看到自己内部串行化的counter副本。</p>
<h3 id="12-2-client"><a href="#12-2-client" class="headerlink" title="12.2 client"></a>12.2 client</h3><p>driver运行在client主机上。client可以不在cluster中。</p>
<p><strong>验证</strong></p>
<ol>
<li><p>启动spark集群</p>
</li>
<li><p>编程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wangbowen.spark.scala</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.&#123;<span class="type">InetAddress</span>, <span class="type">Socket</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SubmitDeployMode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印消息</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printfInfo</span></span>(str:<span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> ip = <span class="type">InetAddress</span>.getLocalHost.getHostAddress</span><br><span class="line">    <span class="keyword">val</span> socket = <span class="keyword">new</span> <span class="type">Socket</span>(<span class="string">"192.168.174.205"</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="keyword">val</span> out = socket.getOutputStream</span><br><span class="line">    out.write((ip + <span class="string">": "</span> + str + <span class="string">"\r\n"</span>).getBytes())</span><br><span class="line">    out.flush()</span><br><span class="line">    socket.close()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"Submit-Deploy-Mode"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    printfInfo(<span class="string">"Driver running on this node!"</span>)</span><br><span class="line">    <span class="keyword">val</span> rdd = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> rdd2 = rdd.map(num =&gt; &#123;</span><br><span class="line">      printfInfo(<span class="string">"map =&gt; "</span> + num)</span><br><span class="line">      num * <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">val</span> count = rdd2.reduce((num1, num2) =&gt; &#123;</span><br><span class="line">      printfInfo(<span class="string">"reduce =&gt; "</span> + num1 + <span class="string">","</span> + num2)</span><br><span class="line">      num1 + num2</span><br><span class="line">    &#125;)</span><br><span class="line">    printfInfo(<span class="string">"count: "</span> + count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>随便找一台机子，开启nc（这里选s205）。如果没装。用命令 <strong>$sudo yum install nc -y</strong> 安装。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lk 9999</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打jar包上传到s201并执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --class cn.wangbowen.spark.scala.SubmitDeployMode --master spark:&#x2F;&#x2F;s201:7077 --deploy-mode client Spark-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>

<p>打印结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.174.201: Driver running on this node!	# 入口程序在s201上</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 1</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 2</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 2,4</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 3</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 6,6</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 4</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 5</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 8,10</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 6</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 18,12</span><br><span class="line">192.168.174.201: reduce &#x3D;&gt; 12,30</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 7</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 8</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 14,16</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 9</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 30,18</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 10</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 48,20</span><br><span class="line">192.168.174.201: reduce &#x3D;&gt; 42,68</span><br><span class="line">192.168.174.201: count: 110						# 最终结果返回client节点s201</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将jar包上传到s202并执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --class cn.wangbowen.spark.scala.SubmitDeployMode --master spark:&#x2F;&#x2F;s201:7077 --deploy-mode client Spark-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>

<p>打印结果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.174.202: Driver running on this node!	# 入口程序在s201上</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 1</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 2</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 2,4</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 3</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 6,6</span><br><span class="line">192.168.174.204: map &#x3D;&gt; 4</span><br><span class="line">192.168.174.204: map &#x3D;&gt; 5</span><br><span class="line">192.168.174.204: reduce &#x3D;&gt; 8,10</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 7</span><br><span class="line">192.168.174.204: map &#x3D;&gt; 6</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 8</span><br><span class="line">192.168.174.204: reduce &#x3D;&gt; 18,12</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 14,16</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 9</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 30,18</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 10</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 48,20</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 12,68</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 80,30</span><br><span class="line">192.168.174.202: count: 110						# 最终结果返回client节点s202</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="12-3-cluster"><a href="#12-3-cluster" class="headerlink" title="12.3 cluster"></a>12.3 cluster</h3><p>driver程序提交给spark cluster的某个worker节点来执行。worker是cluster中的一员。导出的jar需要放置到所有worker节点都可见的位置(如hdfs)才可以。</p>
<ol>
<li><p>上传jar包到hdfs</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hdfs dfs -mkdir &#x2F;demoJars</span><br><span class="line">$hdfs dfs -put Spark-1.0-SNAPSHOT.jar &#x2F;demoJars</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>提交任务（注意模式的改变deply-mdoe和hdfs路径下的jar）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-submit --class cn.wangbowen.spark.scala.SubmitDeployMode --master spark:&#x2F;&#x2F;s201:7077 --deploy-mode cluster hdfs:&#x2F;&#x2F;mycluster&#x2F;demoJars&#x2F;Spark-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看结果（发现在s201上提交，结果Driver在s202）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.174.202: Driver running on this node!</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 1</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 2</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 2,4</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 3</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 6,6</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 7</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 8</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 14,16</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 9</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 30,18</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 10</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 48,20</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 12,68</span><br><span class="line">192.168.174.204: map &#x3D;&gt; 4</span><br><span class="line">192.168.174.204: map &#x3D;&gt; 5</span><br><span class="line">192.168.174.204: reduce &#x3D;&gt; 8,10</span><br><span class="line">192.168.174.204: map &#x3D;&gt; 6</span><br><span class="line">192.168.174.204: reduce &#x3D;&gt; 18,12</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 80,30</span><br><span class="line">192.168.174.202: count: 110</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>再次提交（发现Driver又变了，在s204上）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.174.204: Driver running on this node!</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 1</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 2</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 2,4</span><br><span class="line">192.168.174.203: map &#x3D;&gt; 3</span><br><span class="line">192.168.174.203: reduce &#x3D;&gt; 6,6</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 4</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 5</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 8,10</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 6</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 18,12</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 7</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 8</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 14,16</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 9</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 30,18</span><br><span class="line">192.168.174.202: map &#x3D;&gt; 10</span><br><span class="line">192.168.174.202: reduce &#x3D;&gt; 48,20</span><br><span class="line">192.168.174.204: reduce &#x3D;&gt; 30,68</span><br><span class="line">192.168.174.204: reduce &#x3D;&gt; 98,12</span><br><span class="line">192.168.174.204: count: 110</span><br></pre></td></tr></table></figure></div>




</li>
</ol>
<h2 id="十三、Spark集成Hive查询Hbase"><a href="#十三、Spark集成Hive查询Hbase" class="headerlink" title="十三、Spark集成Hive查询Hbase"></a>十三、Spark集成Hive查询Hbase</h2><p>假设已经按照之前的步骤HIVE集成了HBASE了。此时HBase中有一个表有两条记录，而Hive关联了HBase的表，且表名为t1。</p>
<h3 id="13-1-local-模式-spark-shell"><a href="#13-1-local-模式-spark-shell" class="headerlink" title="13.1 local 模式 + spark-shell"></a>13.1 local 模式 + spark-shell</h3><ol>
<li><p>复制hive的hive-hbase-handler-2.1.0.jar文件到spark/jars目录下。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;hive&#x2F;lib]$cp hive-hbase-handler-3.1.2.jar &#x2F;soft&#x2F;spark&#x2F;jars&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>复制hive/下的metrics的jar文件到spark下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&gt;cd &#x2F;soft&#x2F;hive&#x2F;lib</span><br><span class="line">$&gt;ls | grep metrics | cp &#96;xargs&#96; &#x2F;soft&#x2F;spark&#x2F;jars</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>由于之间hive集成hbase时候修改了hive-site.xml这里，重新导入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cp hive-site.xml &#x2F;soft&#x2F;spark&#x2F;conf&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>拷贝hbase的包到spark/jars下<strong>（这部有争议，先跳过，如果有问题先看是不是13.4中的，没办法才全部导入hbase的相关包）</strong></p>
</li>
<li><p>启动spark-shell 本地模式测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-shell --master local[4]</span><br><span class="line">$scala&gt;spark.sql(&quot;select * from t1&quot;).show</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+----+----+---+                                                 </span><br><span class="line">| key|name| id|</span><br><span class="line">+----+----+---+</span><br><span class="line">|row1| tom|100|</span><br><span class="line">|row2|toms| 18|</span><br><span class="line">+----+----+---+</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>如果报错，可能是版本验证问题和数据库连接问题。跟之前一样参考<strong>10.3.3</strong>。其他缺包等问题参考<strong>13.4</strong></p>
</li>
</ol>
<h3 id="13-2-standalone-模式-spark-shell"><a href="#13-2-standalone-模式-spark-shell" class="headerlink" title="13.2 standalone 模式 + spark-shell"></a>13.2 standalone 模式 + spark-shell</h3><ol>
<li><p>在spark集群上分发<strong>13.1 （1）</strong>模式下所有需要的jar包。</p>
</li>
<li><p>启动standalone模式，spark集群。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wbw@s201 &#x2F;soft&#x2F;spark&#x2F;sbin]$.&#x2F;start-all.sh</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动spark-shell</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$spark-shell --master spark:&#x2F;&#x2F;s201:7077</span><br><span class="line">scala&gt; spark.sql(&quot;select * from t1&quot;).show</span><br><span class="line"></span><br><span class="line">+----+----+---+                                                                 </span><br><span class="line">| key|name| id|</span><br><span class="line">+----+----+---+</span><br><span class="line">|row1| tom|100|</span><br><span class="line">|row2|toms| 18|</span><br><span class="line">+----+----+---+</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h3 id="13-3-IDEA编程访问"><a href="#13-3-IDEA编程访问" class="headerlink" title="13.3 IDEA编程访问"></a>13.3 IDEA编程访问</h3><ol>
<li><p>导依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-hbase-handler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>MAVEN发生错误？无法打包？</p>
<p>不过去掉hive-hbase-handler后，打包。在standalone下可以运行。</p>
</li>
</ol>
<h3 id="13-4-整合常见问题"><a href="#13-4-整合常见问题" class="headerlink" title="13.4 整合常见问题"></a>13.4 整合常见问题</h3><p><a href="https://www.wandouip.com/t5i62606/" target="_blank" rel="noopener">https://www.wandouip.com/t5i62606/</a></p>
<ol>
<li><p>问题一</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark 执行时报java.lang.ClassNotFoundException: org.apache.htrace.core.HTraceConfiguration</span><br></pre></td></tr></table></figure></div>

<p>解决方案</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将Hadoop中的htrace-core4-4.1.0-incubating.jar放入spark&#x2F;jars下：</span><br><span class="line"></span><br><span class="line">[wbw@s201 &#x2F;soft&#x2F;hadoop-3.1.2&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib]$cp htrace-core4-4.1.0-incubating.jar &#x2F;soft&#x2F;spark&#x2F;jars&#x2F;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>问题二</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark 执行时报java.lang.ClassNotFoundException: org.apache.hadoop.hbase.util.Bytes</span><br></pre></td></tr></table></figure></div>

<p>解决方案</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将hbase&#x2F;lib下的hbase-common-2.2.4.jar放到spark&#x2F;jars下</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
</search>
